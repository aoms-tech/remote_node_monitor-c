
remoteNodeMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db0  08005db0  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db8  08005db8  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064d4  20000104  08005ec4  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200065d8  08005ec4  000265d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b082  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4d  00000000  00000000  0002b1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002d108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d8c  00000000  00000000  0002e280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e011  00000000  00000000  0005100c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca2b8  00000000  00000000  0005f01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001292d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d80  00000000  00000000  00129328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000104 	.word	0x20000104
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005844 	.word	0x08005844

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000108 	.word	0x20000108
 800020c:	08005844 	.word	0x08005844

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <App_Init>:
* Description: 	Initializes application.
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void App_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SKYLA1_TX_EN_Port, SKYLA1_TX_EN_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <App_Init+0x2c>)
 80005f0:	f002 f9ee 	bl	80029d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SKYLA2_TX_EN_Port, SKYLA2_TX_EN_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <App_Init+0x2c>)
 80005fc:	f002 f9e8 	bl	80029d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHRG_EN_Port, CHRG_EN_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2102      	movs	r1, #2
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <App_Init+0x2c>)
 8000606:	f002 f9e3 	bl	80029d0 <HAL_GPIO_WritePin>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020800 	.word	0x40020800

08000614 <App_Update>:
* Description: 	Updates state of the application.
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void App_Update(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	switch(Get_Application_State())
 8000618:	f000 f9a8 	bl	800096c <Get_Application_State>
 800061c:	4603      	mov	r3, r0
 800061e:	2b02      	cmp	r3, #2
 8000620:	d008      	beq.n	8000634 <App_Update+0x20>
 8000622:	2b02      	cmp	r3, #2
 8000624:	dc12      	bgt.n	800064c <App_Update+0x38>
 8000626:	2b00      	cmp	r3, #0
 8000628:	d007      	beq.n	800063a <App_Update+0x26>
 800062a:	2b01      	cmp	r3, #1
 800062c:	d10e      	bne.n	800064c <App_Update+0x38>
	{
		case MOLLY_SKYLA1:
			Skyla1_Molly_App();
 800062e:	f000 fbf1 	bl	8000e14 <Skyla1_Molly_App>
			break;
 8000632:	e00b      	b.n	800064c <App_Update+0x38>

		case MOLLY_SKYLA2:
			Skyla2_Molly_App();
 8000634:	f000 fdae 	bl	8001194 <Skyla2_Molly_App>
			break;
 8000638:	e008      	b.n	800064c <App_Update+0x38>

		case MONITOR:
			Skyla1_Check_Flag();
 800063a:	f000 ff6b 	bl	8001514 <Skyla1_Check_Flag>
			Creed1_Check_Flag();
 800063e:	f000 ffc3 	bl	80015c8 <Creed1_Check_Flag>
			Skyla2_Check_Flag();
 8000642:	f001 f81b 	bl	800167c <Skyla2_Check_Flag>
			Creed2_Check_Flag();
 8000646:	f001 f873 	bl	8001730 <Creed2_Check_Flag>
			break;
 800064a:	bf00      	nop
	}
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <main>:

/**************************************************************************************************
* Main Program Loop
**************************************************************************************************/
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
   // Initialize the chip
   Chip_Init();
 8000654:	f000 f808 	bl	8000668 <Chip_Init>

   // Initialize the application
   App_Init();
 8000658:	f7ff ffc4 	bl	80005e4 <App_Init>

   /* Replace with your application code */
   while (1)
   {
      // call chip level routines that need updating
      Chip_Update();
 800065c:	f001 f8c2 	bl	80017e4 <Chip_Update>

      // call application
      App_Update();
 8000660:	f7ff ffd8 	bl	8000614 <App_Update>
      Chip_Update();
 8000664:	e7fa      	b.n	800065c <main+0xc>
	...

08000668 <Chip_Init>:
* Description: 	This routine sets up the chip
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void Chip_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f001 fde2 	bl	8002234 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f001 f8c0 	bl	80017f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f001 f932 	bl	80018dc <MX_GPIO_Init>
  MX_USART1_UART_Init();			// RASPBERRY PI
 8000678:	f001 fb4e 	bl	8001d18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800067c:	f001 fb76 	bl	8001d6c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();			// SKYLA1
 8000680:	f001 fb9e 	bl	8001dc0 <MX_USART3_UART_Init>
  MX_UART4_Init();					// CREED1
 8000684:	f001 faf4 	bl	8001c70 <MX_UART4_Init>
  MX_UART5_Init();					// SKYLA2
 8000688:	f001 fb1c 	bl	8001cc4 <MX_UART5_Init>
  MX_USART6_UART_Init();			// CREED2
 800068c:	f001 fbc2 	bl	8001e14 <MX_USART6_UART_Init>

  HAL_UART_Receive_IT(&huart1, &pi_uart_rxData, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <Chip_Init+0x60>)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <Chip_Init+0x64>)
 8000696:	f003 f87c 	bl	8003792 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &skyla1_uart_rxData, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	490c      	ldr	r1, [pc, #48]	; (80006d0 <Chip_Init+0x68>)
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <Chip_Init+0x6c>)
 80006a0:	f003 f877 	bl	8003792 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &creed1_uart_rxData, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	490c      	ldr	r1, [pc, #48]	; (80006d8 <Chip_Init+0x70>)
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <Chip_Init+0x74>)
 80006aa:	f003 f872 	bl	8003792 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, &skyla2_uart_rxData, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	490b      	ldr	r1, [pc, #44]	; (80006e0 <Chip_Init+0x78>)
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <Chip_Init+0x7c>)
 80006b4:	f003 f86d 	bl	8003792 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &creed2_uart_rxData, 1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	490b      	ldr	r1, [pc, #44]	; (80006e8 <Chip_Init+0x80>)
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <Chip_Init+0x84>)
 80006be:	f003 f868 	bl	8003792 <HAL_UART_Receive_IT>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200014ae 	.word	0x200014ae
 80006cc:	200064b4 	.word	0x200064b4
 80006d0:	20002972 	.word	0x20002972
 80006d4:	2000653c 	.word	0x2000653c
 80006d8:	20003d06 	.word	0x20003d06
 80006dc:	2000642c 	.word	0x2000642c
 80006e0:	20005096 	.word	0x20005096
 80006e4:	20006470 	.word	0x20006470
 80006e8:	20006426 	.word	0x20006426
 80006ec:	20006580 	.word	0x20006580

080006f0 <HAL_UART_RxCpltCallback>:
* 				stores RX data into buffers.
* Parameters:  	*huart --> the uart that triggered the interrupt
* Returns:     		(none)
******************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a7a      	ldr	r2, [pc, #488]	; (80008e8 <HAL_UART_RxCpltCallback+0x1f8>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d12c      	bne.n	800075c <HAL_UART_RxCpltCallback+0x6c>
	{
		pi_uart_rxBuffer[pi_array_end] = pi_uart_rxData;
 8000702:	4b7a      	ldr	r3, [pc, #488]	; (80008ec <HAL_UART_RxCpltCallback+0x1fc>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	4b79      	ldr	r3, [pc, #484]	; (80008f0 <HAL_UART_RxCpltCallback+0x200>)
 800070a:	7819      	ldrb	r1, [r3, #0]
 800070c:	4b79      	ldr	r3, [pc, #484]	; (80008f4 <HAL_UART_RxCpltCallback+0x204>)
 800070e:	5499      	strb	r1, [r3, r2]
		if(pi_uart_rxData == 'p')
 8000710:	4b77      	ldr	r3, [pc, #476]	; (80008f0 <HAL_UART_RxCpltCallback+0x200>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b70      	cmp	r3, #112	; 0x70
 8000716:	d103      	bne.n	8000720 <HAL_UART_RxCpltCallback+0x30>
			application_state = MOLLY_SKYLA1;
 8000718:	4b77      	ldr	r3, [pc, #476]	; (80008f8 <HAL_UART_RxCpltCallback+0x208>)
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	e006      	b.n	800072e <HAL_UART_RxCpltCallback+0x3e>
		else if(pi_uart_rxData == 'q')
 8000720:	4b73      	ldr	r3, [pc, #460]	; (80008f0 <HAL_UART_RxCpltCallback+0x200>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b71      	cmp	r3, #113	; 0x71
 8000726:	d102      	bne.n	800072e <HAL_UART_RxCpltCallback+0x3e>
			application_state = MOLLY_SKYLA2;
 8000728:	4b73      	ldr	r3, [pc, #460]	; (80008f8 <HAL_UART_RxCpltCallback+0x208>)
 800072a:	2202      	movs	r2, #2
 800072c:	701a      	strb	r2, [r3, #0]
		pi_array_end = (pi_array_end+1)%pi_buffer_size;
 800072e:	4b6f      	ldr	r3, [pc, #444]	; (80008ec <HAL_UART_RxCpltCallback+0x1fc>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	4a71      	ldr	r2, [pc, #452]	; (80008fc <HAL_UART_RxCpltCallback+0x20c>)
 8000736:	fb82 1203 	smull	r1, r2, r2, r3
 800073a:	12d1      	asrs	r1, r2, #11
 800073c:	17da      	asrs	r2, r3, #31
 800073e:	1a8a      	subs	r2, r1, r2
 8000740:	f241 3188 	movw	r1, #5000	; 0x1388
 8000744:	fb01 f202 	mul.w	r2, r1, r2
 8000748:	1a9a      	subs	r2, r3, r2
 800074a:	b292      	uxth	r2, r2
 800074c:	4b67      	ldr	r3, [pc, #412]	; (80008ec <HAL_UART_RxCpltCallback+0x1fc>)
 800074e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &pi_uart_rxData, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	4967      	ldr	r1, [pc, #412]	; (80008f0 <HAL_UART_RxCpltCallback+0x200>)
 8000754:	486a      	ldr	r0, [pc, #424]	; (8000900 <HAL_UART_RxCpltCallback+0x210>)
 8000756:	f003 f81c 	bl	8003792 <HAL_UART_Receive_IT>
		if(creed2_uart_rxData == '\n' || creed2_uart_rxData == '\r')
			creed2_send_flag = creed2_array_end;
		creed2_array_end = (creed2_array_end+1)%creed2_uart_buffer_size;
		HAL_UART_Receive_IT(&huart6, &creed2_uart_rxData, 1);
	}
}
 800075a:	e0c0      	b.n	80008de <HAL_UART_RxCpltCallback+0x1ee>
	else if(huart->Instance == USART3)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a68      	ldr	r2, [pc, #416]	; (8000904 <HAL_UART_RxCpltCallback+0x214>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d12c      	bne.n	80007c0 <HAL_UART_RxCpltCallback+0xd0>
		skyla1_uart_rxBuffer[skyla1_array_end] = skyla1_uart_rxData;
 8000766:	4b68      	ldr	r3, [pc, #416]	; (8000908 <HAL_UART_RxCpltCallback+0x218>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	4b67      	ldr	r3, [pc, #412]	; (800090c <HAL_UART_RxCpltCallback+0x21c>)
 800076e:	7819      	ldrb	r1, [r3, #0]
 8000770:	4b67      	ldr	r3, [pc, #412]	; (8000910 <HAL_UART_RxCpltCallback+0x220>)
 8000772:	5499      	strb	r1, [r3, r2]
		if(skyla1_uart_rxData == '\n' || skyla1_uart_rxData == '\r')
 8000774:	4b65      	ldr	r3, [pc, #404]	; (800090c <HAL_UART_RxCpltCallback+0x21c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b0a      	cmp	r3, #10
 800077a:	d003      	beq.n	8000784 <HAL_UART_RxCpltCallback+0x94>
 800077c:	4b63      	ldr	r3, [pc, #396]	; (800090c <HAL_UART_RxCpltCallback+0x21c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b0d      	cmp	r3, #13
 8000782:	d103      	bne.n	800078c <HAL_UART_RxCpltCallback+0x9c>
			skyla1_send_flag = skyla1_array_end;
 8000784:	4b60      	ldr	r3, [pc, #384]	; (8000908 <HAL_UART_RxCpltCallback+0x218>)
 8000786:	881a      	ldrh	r2, [r3, #0]
 8000788:	4b62      	ldr	r3, [pc, #392]	; (8000914 <HAL_UART_RxCpltCallback+0x224>)
 800078a:	801a      	strh	r2, [r3, #0]
		skyla1_new_data = 1;
 800078c:	4b62      	ldr	r3, [pc, #392]	; (8000918 <HAL_UART_RxCpltCallback+0x228>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
		skyla1_array_end = (skyla1_array_end+1)%skyla1_uart_buffer_size;
 8000792:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <HAL_UART_RxCpltCallback+0x218>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a58      	ldr	r2, [pc, #352]	; (80008fc <HAL_UART_RxCpltCallback+0x20c>)
 800079a:	fb82 1203 	smull	r1, r2, r2, r3
 800079e:	12d1      	asrs	r1, r2, #11
 80007a0:	17da      	asrs	r2, r3, #31
 80007a2:	1a8a      	subs	r2, r1, r2
 80007a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80007a8:	fb01 f202 	mul.w	r2, r1, r2
 80007ac:	1a9a      	subs	r2, r3, r2
 80007ae:	b292      	uxth	r2, r2
 80007b0:	4b55      	ldr	r3, [pc, #340]	; (8000908 <HAL_UART_RxCpltCallback+0x218>)
 80007b2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &skyla1_uart_rxData, 1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	4955      	ldr	r1, [pc, #340]	; (800090c <HAL_UART_RxCpltCallback+0x21c>)
 80007b8:	4858      	ldr	r0, [pc, #352]	; (800091c <HAL_UART_RxCpltCallback+0x22c>)
 80007ba:	f002 ffea 	bl	8003792 <HAL_UART_Receive_IT>
}
 80007be:	e08e      	b.n	80008de <HAL_UART_RxCpltCallback+0x1ee>
	else if(huart->Instance == UART4)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a56      	ldr	r2, [pc, #344]	; (8000920 <HAL_UART_RxCpltCallback+0x230>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d129      	bne.n	800081e <HAL_UART_RxCpltCallback+0x12e>
		creed1_uart_rxBuffer[creed1_array_end] = creed1_uart_rxData;
 80007ca:	4b56      	ldr	r3, [pc, #344]	; (8000924 <HAL_UART_RxCpltCallback+0x234>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b55      	ldr	r3, [pc, #340]	; (8000928 <HAL_UART_RxCpltCallback+0x238>)
 80007d2:	7819      	ldrb	r1, [r3, #0]
 80007d4:	4b55      	ldr	r3, [pc, #340]	; (800092c <HAL_UART_RxCpltCallback+0x23c>)
 80007d6:	5499      	strb	r1, [r3, r2]
		if(creed1_uart_rxData == '\n' || creed1_uart_rxData == '\r')
 80007d8:	4b53      	ldr	r3, [pc, #332]	; (8000928 <HAL_UART_RxCpltCallback+0x238>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b0a      	cmp	r3, #10
 80007de:	d003      	beq.n	80007e8 <HAL_UART_RxCpltCallback+0xf8>
 80007e0:	4b51      	ldr	r3, [pc, #324]	; (8000928 <HAL_UART_RxCpltCallback+0x238>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b0d      	cmp	r3, #13
 80007e6:	d103      	bne.n	80007f0 <HAL_UART_RxCpltCallback+0x100>
			creed1_send_flag = creed1_array_end;
 80007e8:	4b4e      	ldr	r3, [pc, #312]	; (8000924 <HAL_UART_RxCpltCallback+0x234>)
 80007ea:	881a      	ldrh	r2, [r3, #0]
 80007ec:	4b50      	ldr	r3, [pc, #320]	; (8000930 <HAL_UART_RxCpltCallback+0x240>)
 80007ee:	801a      	strh	r2, [r3, #0]
		creed1_array_end = (creed1_array_end+1)%creed1_uart_buffer_size;
 80007f0:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <HAL_UART_RxCpltCallback+0x234>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a41      	ldr	r2, [pc, #260]	; (80008fc <HAL_UART_RxCpltCallback+0x20c>)
 80007f8:	fb82 1203 	smull	r1, r2, r2, r3
 80007fc:	12d1      	asrs	r1, r2, #11
 80007fe:	17da      	asrs	r2, r3, #31
 8000800:	1a8a      	subs	r2, r1, r2
 8000802:	f241 3188 	movw	r1, #5000	; 0x1388
 8000806:	fb01 f202 	mul.w	r2, r1, r2
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b292      	uxth	r2, r2
 800080e:	4b45      	ldr	r3, [pc, #276]	; (8000924 <HAL_UART_RxCpltCallback+0x234>)
 8000810:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &creed1_uart_rxData, 1);
 8000812:	2201      	movs	r2, #1
 8000814:	4944      	ldr	r1, [pc, #272]	; (8000928 <HAL_UART_RxCpltCallback+0x238>)
 8000816:	4847      	ldr	r0, [pc, #284]	; (8000934 <HAL_UART_RxCpltCallback+0x244>)
 8000818:	f002 ffbb 	bl	8003792 <HAL_UART_Receive_IT>
}
 800081c:	e05f      	b.n	80008de <HAL_UART_RxCpltCallback+0x1ee>
	else if(huart->Instance == UART5)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a45      	ldr	r2, [pc, #276]	; (8000938 <HAL_UART_RxCpltCallback+0x248>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d12c      	bne.n	8000882 <HAL_UART_RxCpltCallback+0x192>
		skyla2_uart_rxBuffer[skyla2_array_end] = skyla2_uart_rxData;
 8000828:	4b44      	ldr	r3, [pc, #272]	; (800093c <HAL_UART_RxCpltCallback+0x24c>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b44      	ldr	r3, [pc, #272]	; (8000940 <HAL_UART_RxCpltCallback+0x250>)
 8000830:	7819      	ldrb	r1, [r3, #0]
 8000832:	4b44      	ldr	r3, [pc, #272]	; (8000944 <HAL_UART_RxCpltCallback+0x254>)
 8000834:	5499      	strb	r1, [r3, r2]
		if(skyla2_uart_rxData == '\n' || skyla2_uart_rxData == '\r')
 8000836:	4b42      	ldr	r3, [pc, #264]	; (8000940 <HAL_UART_RxCpltCallback+0x250>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b0a      	cmp	r3, #10
 800083c:	d003      	beq.n	8000846 <HAL_UART_RxCpltCallback+0x156>
 800083e:	4b40      	ldr	r3, [pc, #256]	; (8000940 <HAL_UART_RxCpltCallback+0x250>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b0d      	cmp	r3, #13
 8000844:	d103      	bne.n	800084e <HAL_UART_RxCpltCallback+0x15e>
			skyla2_send_flag = skyla2_array_end;
 8000846:	4b3d      	ldr	r3, [pc, #244]	; (800093c <HAL_UART_RxCpltCallback+0x24c>)
 8000848:	881a      	ldrh	r2, [r3, #0]
 800084a:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <HAL_UART_RxCpltCallback+0x258>)
 800084c:	801a      	strh	r2, [r3, #0]
		skyla2_new_data = 1;
 800084e:	4b3f      	ldr	r3, [pc, #252]	; (800094c <HAL_UART_RxCpltCallback+0x25c>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
		skyla2_array_end = (skyla2_array_end+1)%skyla2_uart_buffer_size;
 8000854:	4b39      	ldr	r3, [pc, #228]	; (800093c <HAL_UART_RxCpltCallback+0x24c>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <HAL_UART_RxCpltCallback+0x20c>)
 800085c:	fb82 1203 	smull	r1, r2, r2, r3
 8000860:	12d1      	asrs	r1, r2, #11
 8000862:	17da      	asrs	r2, r3, #31
 8000864:	1a8a      	subs	r2, r1, r2
 8000866:	f241 3188 	movw	r1, #5000	; 0x1388
 800086a:	fb01 f202 	mul.w	r2, r1, r2
 800086e:	1a9a      	subs	r2, r3, r2
 8000870:	b292      	uxth	r2, r2
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <HAL_UART_RxCpltCallback+0x24c>)
 8000874:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, &skyla2_uart_rxData, 1);
 8000876:	2201      	movs	r2, #1
 8000878:	4931      	ldr	r1, [pc, #196]	; (8000940 <HAL_UART_RxCpltCallback+0x250>)
 800087a:	4835      	ldr	r0, [pc, #212]	; (8000950 <HAL_UART_RxCpltCallback+0x260>)
 800087c:	f002 ff89 	bl	8003792 <HAL_UART_Receive_IT>
}
 8000880:	e02d      	b.n	80008de <HAL_UART_RxCpltCallback+0x1ee>
	else if(huart->Instance == USART6)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a33      	ldr	r2, [pc, #204]	; (8000954 <HAL_UART_RxCpltCallback+0x264>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d128      	bne.n	80008de <HAL_UART_RxCpltCallback+0x1ee>
		creed2_uart_rxBuffer[creed2_array_end] = creed2_uart_rxData;
 800088c:	4b32      	ldr	r3, [pc, #200]	; (8000958 <HAL_UART_RxCpltCallback+0x268>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b32      	ldr	r3, [pc, #200]	; (800095c <HAL_UART_RxCpltCallback+0x26c>)
 8000894:	7819      	ldrb	r1, [r3, #0]
 8000896:	4b32      	ldr	r3, [pc, #200]	; (8000960 <HAL_UART_RxCpltCallback+0x270>)
 8000898:	5499      	strb	r1, [r3, r2]
		if(creed2_uart_rxData == '\n' || creed2_uart_rxData == '\r')
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <HAL_UART_RxCpltCallback+0x26c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b0a      	cmp	r3, #10
 80008a0:	d003      	beq.n	80008aa <HAL_UART_RxCpltCallback+0x1ba>
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <HAL_UART_RxCpltCallback+0x26c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b0d      	cmp	r3, #13
 80008a8:	d103      	bne.n	80008b2 <HAL_UART_RxCpltCallback+0x1c2>
			creed2_send_flag = creed2_array_end;
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <HAL_UART_RxCpltCallback+0x268>)
 80008ac:	881a      	ldrh	r2, [r3, #0]
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <HAL_UART_RxCpltCallback+0x274>)
 80008b0:	801a      	strh	r2, [r3, #0]
		creed2_array_end = (creed2_array_end+1)%creed2_uart_buffer_size;
 80008b2:	4b29      	ldr	r3, [pc, #164]	; (8000958 <HAL_UART_RxCpltCallback+0x268>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_UART_RxCpltCallback+0x20c>)
 80008ba:	fb82 1203 	smull	r1, r2, r2, r3
 80008be:	12d1      	asrs	r1, r2, #11
 80008c0:	17da      	asrs	r2, r3, #31
 80008c2:	1a8a      	subs	r2, r1, r2
 80008c4:	f241 3188 	movw	r1, #5000	; 0x1388
 80008c8:	fb01 f202 	mul.w	r2, r1, r2
 80008cc:	1a9a      	subs	r2, r3, r2
 80008ce:	b292      	uxth	r2, r2
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <HAL_UART_RxCpltCallback+0x268>)
 80008d2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, &creed2_uart_rxData, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	4921      	ldr	r1, [pc, #132]	; (800095c <HAL_UART_RxCpltCallback+0x26c>)
 80008d8:	4823      	ldr	r0, [pc, #140]	; (8000968 <HAL_UART_RxCpltCallback+0x278>)
 80008da:	f002 ff5a 	bl	8003792 <HAL_UART_Receive_IT>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40011000 	.word	0x40011000
 80008ec:	200014ac 	.word	0x200014ac
 80008f0:	200014ae 	.word	0x200014ae
 80008f4:	20000124 	.word	0x20000124
 80008f8:	20000122 	.word	0x20000122
 80008fc:	68db8bad 	.word	0x68db8bad
 8000900:	200064b4 	.word	0x200064b4
 8000904:	40004800 	.word	0x40004800
 8000908:	2000296e 	.word	0x2000296e
 800090c:	20002972 	.word	0x20002972
 8000910:	200015e4 	.word	0x200015e4
 8000914:	20002970 	.word	0x20002970
 8000918:	20002973 	.word	0x20002973
 800091c:	2000653c 	.word	0x2000653c
 8000920:	40004c00 	.word	0x40004c00
 8000924:	20003d02 	.word	0x20003d02
 8000928:	20003d06 	.word	0x20003d06
 800092c:	20002978 	.word	0x20002978
 8000930:	20003d04 	.word	0x20003d04
 8000934:	2000642c 	.word	0x2000642c
 8000938:	40005000 	.word	0x40005000
 800093c:	20005092 	.word	0x20005092
 8000940:	20005096 	.word	0x20005096
 8000944:	20003d08 	.word	0x20003d08
 8000948:	20005094 	.word	0x20005094
 800094c:	20005097 	.word	0x20005097
 8000950:	20006470 	.word	0x20006470
 8000954:	40011400 	.word	0x40011400
 8000958:	20006422 	.word	0x20006422
 800095c:	20006426 	.word	0x20006426
 8000960:	20005098 	.word	0x20005098
 8000964:	20006424 	.word	0x20006424
 8000968:	20006580 	.word	0x20006580

0800096c <Get_Application_State>:

uint8_t Get_Application_State(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	return application_state;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <Get_Application_State+0x14>)
 8000972:	781b      	ldrb	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000122 	.word	0x20000122

08000984 <Skyla1_DataReady>:

uint8_t Skyla1_DataReady(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	return skyla1_new_data;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <Skyla1_DataReady+0x14>)
 800098a:	781b      	ldrb	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20002973 	.word	0x20002973

0800099c <Skyla2_DataReady>:

uint8_t Skyla2_DataReady(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	return skyla2_new_data;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <Skyla2_DataReady+0x14>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20005097 	.word	0x20005097

080009b4 <Skyla1_GetData>:

uint8_t Skyla1_GetData(uint16_t head_subtracter)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
	skyla1_new_data = 0;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <Skyla1_GetData+0x44>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
	return skyla1_uart_rxBuffer[(skyla1_uart_buffer_size-1-head_subtracter+skyla1_array_end)%skyla1_uart_buffer_size];
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80009ca:	3307      	adds	r3, #7
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <Skyla1_GetData+0x48>)
 80009ce:	8812      	ldrh	r2, [r2, #0]
 80009d0:	441a      	add	r2, r3
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <Skyla1_GetData+0x4c>)
 80009d4:	fb83 1302 	smull	r1, r3, r3, r2
 80009d8:	12d9      	asrs	r1, r3, #11
 80009da:	17d3      	asrs	r3, r2, #31
 80009dc:	1acb      	subs	r3, r1, r3
 80009de:	f241 3188 	movw	r1, #5000	; 0x1388
 80009e2:	fb01 f303 	mul.w	r3, r1, r3
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <Skyla1_GetData+0x50>)
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	20002973 	.word	0x20002973
 80009fc:	2000296e 	.word	0x2000296e
 8000a00:	68db8bad 	.word	0x68db8bad
 8000a04:	200015e4 	.word	0x200015e4

08000a08 <Skyla2_GetData>:

uint8_t Skyla2_GetData(uint16_t head_subtracter)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	skyla2_new_data = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <Skyla2_GetData+0x44>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
	return skyla2_uart_rxBuffer[(skyla2_uart_buffer_size-1-head_subtracter+skyla2_array_end)%skyla2_uart_buffer_size];
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000a1e:	3307      	adds	r3, #7
 8000a20:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <Skyla2_GetData+0x48>)
 8000a22:	8812      	ldrh	r2, [r2, #0]
 8000a24:	441a      	add	r2, r3
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <Skyla2_GetData+0x4c>)
 8000a28:	fb83 1302 	smull	r1, r3, r3, r2
 8000a2c:	12d9      	asrs	r1, r3, #11
 8000a2e:	17d3      	asrs	r3, r2, #31
 8000a30:	1acb      	subs	r3, r1, r3
 8000a32:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a36:	fb01 f303 	mul.w	r3, r1, r3
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <Skyla2_GetData+0x50>)
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	20005097 	.word	0x20005097
 8000a50:	20005092 	.word	0x20005092
 8000a54:	68db8bad 	.word	0x68db8bad
 8000a58:	20003d08 	.word	0x20003d08

08000a5c <Skyla1_Find_Word>:

uint8_t Skyla1_Find_Word(char* word)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b0c5      	sub	sp, #276	; 0x114
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a6a:	6018      	str	r0, [r3, #0]
	if(Skyla1_DataReady())
 8000a6c:	f7ff ff8a 	bl	8000984 <Skyla1_DataReady>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d047      	beq.n	8000b06 <Skyla1_Find_Word+0xaa>
	{
		uint16_t word_length = strlen(word);
 8000a76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	f7ff fbd0 	bl	8000224 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		char current_word[255] = {0};
 8000a8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	3304      	adds	r3, #4
 8000a98:	22fb      	movs	r2, #251	; 0xfb
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 fe3b 	bl	8004718 <memset>
		for(uint16_t i = 0; i<word_length; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000aa8:	e016      	b.n	8000ad8 <Skyla1_Find_Word+0x7c>
			current_word[word_length-1-i] = Skyla1_GetData(i);
 8000aaa:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000ab4:	1ad4      	subs	r4, r2, r3
 8000ab6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff7a 	bl	80009b4 <Skyla1_GetData>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000acc:	551a      	strb	r2, [r3, r4]
		for(uint16_t i = 0; i<word_length; i++)
 8000ace:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000ad8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000adc:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3e2      	bcc.n	8000aaa <Skyla1_Find_Word+0x4e>

		if(strcmp(current_word, word) == 0)
 8000ae4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ae8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000aec:	f107 020c 	add.w	r2, r7, #12
 8000af0:	6819      	ldr	r1, [r3, #0]
 8000af2:	4610      	mov	r0, r2
 8000af4:	f7ff fb8c 	bl	8000210 <strcmp>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <Skyla1_Find_Word+0xa6>
			return 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e002      	b.n	8000b08 <Skyla1_Find_Word+0xac>
		else
			return 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <Skyla1_Find_Word+0xac>
	}
	else
		return 0;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}

08000b12 <Skyla2_Find_Word>:

uint8_t Skyla2_Find_Word(char* word)
{
 8000b12:	b590      	push	{r4, r7, lr}
 8000b14:	b0c5      	sub	sp, #276	; 0x114
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b20:	6018      	str	r0, [r3, #0]
	if(Skyla2_DataReady())
 8000b22:	f7ff ff3b 	bl	800099c <Skyla2_DataReady>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d047      	beq.n	8000bbc <Skyla2_Find_Word+0xaa>
	{
		uint16_t word_length = strlen(word);
 8000b2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	f7ff fb75 	bl	8000224 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		char current_word[255] = {0};
 8000b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	22fb      	movs	r2, #251	; 0xfb
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fde0 	bl	8004718 <memset>
		for(uint16_t i = 0; i<word_length; i++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000b5e:	e016      	b.n	8000b8e <Skyla2_Find_Word+0x7c>
			current_word[word_length-1-i] = Skyla2_GetData(i);
 8000b60:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000b64:	1e5a      	subs	r2, r3, #1
 8000b66:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000b6a:	1ad4      	subs	r4, r2, r3
 8000b6c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff49 	bl	8000a08 <Skyla2_GetData>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b82:	551a      	strb	r2, [r3, r4]
		for(uint16_t i = 0; i<word_length; i++)
 8000b84:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000b88:	3301      	adds	r3, #1
 8000b8a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000b8e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000b92:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d3e2      	bcc.n	8000b60 <Skyla2_Find_Word+0x4e>

		if(strcmp(current_word, word) == 0)
 8000b9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ba2:	f107 020c 	add.w	r2, r7, #12
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	4610      	mov	r0, r2
 8000baa:	f7ff fb31 	bl	8000210 <strcmp>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d101      	bne.n	8000bb8 <Skyla2_Find_Word+0xa6>
			return 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e002      	b.n	8000bbe <Skyla2_Find_Word+0xac>
		else
			return 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e000      	b.n	8000bbe <Skyla2_Find_Word+0xac>
	}
	else
		return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}

08000bc8 <Skyla1_GetInfo>:

uint8_t * Skyla1_GetInfo(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	if(Skyla1_DataReady())
 8000bce:	f7ff fed9 	bl	8000984 <Skyla1_DataReady>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d037      	beq.n	8000c48 <Skyla1_GetInfo+0x80>
	{
		if(getinfo_find_fields)
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <Skyla1_GetInfo+0x8c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d021      	beq.n	8000c24 <Skyla1_GetInfo+0x5c>
		{
			char curr_char = Skyla1_GetData(0);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fee7 	bl	80009b4 <Skyla1_GetData>
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
			getinfo_buffer[getinfo_buffer_head] = curr_char;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <Skyla1_GetInfo+0x90>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4a1a      	ldr	r2, [pc, #104]	; (8000c5c <Skyla1_GetInfo+0x94>)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	5453      	strb	r3, [r2, r1]
			getinfo_buffer_head += 1;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <Skyla1_GetInfo+0x90>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <Skyla1_GetInfo+0x90>)
 8000c00:	801a      	strh	r2, [r3, #0]

			if(curr_char == '|')
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b7c      	cmp	r3, #124	; 0x7c
 8000c06:	d105      	bne.n	8000c14 <Skyla1_GetInfo+0x4c>
				getinfo_fields_found_count += 1;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <Skyla1_GetInfo+0x98>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <Skyla1_GetInfo+0x98>)
 8000c12:	701a      	strb	r2, [r3, #0]

			if(getinfo_fields_found_count == num_machine_readable_fields)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <Skyla1_GetInfo+0x98>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b25      	cmp	r3, #37	; 0x25
 8000c1a:	d115      	bne.n	8000c48 <Skyla1_GetInfo+0x80>
				getinfo_buffer[0] = '1';
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <Skyla1_GetInfo+0x94>)
 8000c1e:	2231      	movs	r2, #49	; 0x31
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e011      	b.n	8000c48 <Skyla1_GetInfo+0x80>
		}
		else
		{
			if(Skyla1_Find_Word("1."))
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <Skyla1_GetInfo+0x9c>)
 8000c26:	f7ff ff19 	bl	8000a5c <Skyla1_Find_Word>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00b      	beq.n	8000c48 <Skyla1_GetInfo+0x80>
			{
				getinfo_buffer[1] = '.';
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <Skyla1_GetInfo+0x94>)
 8000c32:	222e      	movs	r2, #46	; 0x2e
 8000c34:	705a      	strb	r2, [r3, #1]
				getinfo_buffer_head = getinfo_buffer_head + 1;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <Skyla1_GetInfo+0x90>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <Skyla1_GetInfo+0x90>)
 8000c40:	801a      	strh	r2, [r3, #0]
				getinfo_find_fields = 1;
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <Skyla1_GetInfo+0x8c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return getinfo_buffer;
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <Skyla1_GetInfo+0x94>)
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200015dd 	.word	0x200015dd
 8000c58:	200015de 	.word	0x200015de
 8000c5c:	200014b0 	.word	0x200014b0
 8000c60:	200015dc 	.word	0x200015dc
 8000c64:	0800585c 	.word	0x0800585c

08000c68 <Skyla2_GetInfo>:

uint8_t * Skyla2_GetInfo(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	if(Skyla2_DataReady())
 8000c6e:	f7ff fe95 	bl	800099c <Skyla2_DataReady>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d037      	beq.n	8000ce8 <Skyla2_GetInfo+0x80>
	{
		if(getinfo_find_fields)
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <Skyla2_GetInfo+0x8c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d021      	beq.n	8000cc4 <Skyla2_GetInfo+0x5c>
		{
			char curr_char = Skyla2_GetData(0);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fec1 	bl	8000a08 <Skyla2_GetData>
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
			getinfo_buffer[getinfo_buffer_head] = curr_char;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <Skyla2_GetInfo+0x90>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4a1a      	ldr	r2, [pc, #104]	; (8000cfc <Skyla2_GetInfo+0x94>)
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	5453      	strb	r3, [r2, r1]
			getinfo_buffer_head += 1;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <Skyla2_GetInfo+0x90>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <Skyla2_GetInfo+0x90>)
 8000ca0:	801a      	strh	r2, [r3, #0]

			if(curr_char == '|')
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b7c      	cmp	r3, #124	; 0x7c
 8000ca6:	d105      	bne.n	8000cb4 <Skyla2_GetInfo+0x4c>
				getinfo_fields_found_count += 1;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <Skyla2_GetInfo+0x98>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <Skyla2_GetInfo+0x98>)
 8000cb2:	701a      	strb	r2, [r3, #0]

			if(getinfo_fields_found_count == num_machine_readable_fields)
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <Skyla2_GetInfo+0x98>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b25      	cmp	r3, #37	; 0x25
 8000cba:	d115      	bne.n	8000ce8 <Skyla2_GetInfo+0x80>
				getinfo_buffer[0] = '1';
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <Skyla2_GetInfo+0x94>)
 8000cbe:	2231      	movs	r2, #49	; 0x31
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e011      	b.n	8000ce8 <Skyla2_GetInfo+0x80>
		}
		else
		{
			if(Skyla2_Find_Word("1."))
 8000cc4:	480f      	ldr	r0, [pc, #60]	; (8000d04 <Skyla2_GetInfo+0x9c>)
 8000cc6:	f7ff ff24 	bl	8000b12 <Skyla2_Find_Word>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d00b      	beq.n	8000ce8 <Skyla2_GetInfo+0x80>
			{
				getinfo_buffer[1] = '.';
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <Skyla2_GetInfo+0x94>)
 8000cd2:	222e      	movs	r2, #46	; 0x2e
 8000cd4:	705a      	strb	r2, [r3, #1]
				getinfo_buffer_head = getinfo_buffer_head + 1;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <Skyla2_GetInfo+0x90>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <Skyla2_GetInfo+0x90>)
 8000ce0:	801a      	strh	r2, [r3, #0]
				getinfo_find_fields = 1;
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <Skyla2_GetInfo+0x8c>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return getinfo_buffer;
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <Skyla2_GetInfo+0x94>)
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200015dd 	.word	0x200015dd
 8000cf8:	200015de 	.word	0x200015de
 8000cfc:	200014b0 	.word	0x200014b0
 8000d00:	200015dc 	.word	0x200015dc
 8000d04:	0800585c 	.word	0x0800585c

08000d08 <PrettySend_Skyla_Info_toPi>:
			"Network Key",								"Fuse Settings",						"Creed Transmit Frequency",		"RTCC Trim Value",						"Data Logger Send Pointer",
			"Build Version",								"Creed Settings",						"RTCC Control Value",				"Data Logger Next Sector",			"Data Logger Read Sector",
			"Data Logger Origin Sector",			"Data Logger Send Sector"
};
void PrettySend_Skyla_Info_toPi(uint8_t *payload, uint8_t skyla_num, uint8_t before_bool)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
 8000d14:	4613      	mov	r3, r2
 8000d16:	70bb      	strb	r3, [r7, #2]
	char* tokens = strtok((char*) payload, "|");
 8000d18:	4935      	ldr	r1, [pc, #212]	; (8000df0 <PrettySend_Skyla_Info_toPi+0xe8>)
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f003 fd3c 	bl	8004798 <strtok>
 8000d20:	60f8      	str	r0, [r7, #12]
	uint8_t counter = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]

	while( tokens != NULL )
 8000d26:	e05a      	b.n	8000dde <PrettySend_Skyla_Info_toPi+0xd6>
	{
		if(skyla_num == 1)
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d107      	bne.n	8000d3e <PrettySend_Skyla_Info_toPi+0x36>
			HAL_UART_Transmit(&huart1, (uint8_t*)"S1|", 3, 1000);
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	2203      	movs	r2, #3
 8000d34:	492f      	ldr	r1, [pc, #188]	; (8000df4 <PrettySend_Skyla_Info_toPi+0xec>)
 8000d36:	4830      	ldr	r0, [pc, #192]	; (8000df8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d38:	f002 fc99 	bl	800366e <HAL_UART_Transmit>
 8000d3c:	e006      	b.n	8000d4c <PrettySend_Skyla_Info_toPi+0x44>
		else
			HAL_UART_Transmit(&huart1, (uint8_t*)"S2|", 3, 1000);
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	2203      	movs	r2, #3
 8000d44:	492d      	ldr	r1, [pc, #180]	; (8000dfc <PrettySend_Skyla_Info_toPi+0xf4>)
 8000d46:	482c      	ldr	r0, [pc, #176]	; (8000df8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d48:	f002 fc91 	bl	800366e <HAL_UART_Transmit>

		if(before_bool)
 8000d4c:	78bb      	ldrb	r3, [r7, #2]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <PrettySend_Skyla_Info_toPi+0x5a>
			HAL_UART_Transmit(&huart1, (uint8_t*)"B|", 2, 1000);
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	2202      	movs	r2, #2
 8000d58:	4929      	ldr	r1, [pc, #164]	; (8000e00 <PrettySend_Skyla_Info_toPi+0xf8>)
 8000d5a:	4827      	ldr	r0, [pc, #156]	; (8000df8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d5c:	f002 fc87 	bl	800366e <HAL_UART_Transmit>
 8000d60:	e006      	b.n	8000d70 <PrettySend_Skyla_Info_toPi+0x68>
		else
			HAL_UART_Transmit(&huart1, (uint8_t*)"A|", 2, 1000);
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	2202      	movs	r2, #2
 8000d68:	4926      	ldr	r1, [pc, #152]	; (8000e04 <PrettySend_Skyla_Info_toPi+0xfc>)
 8000d6a:	4823      	ldr	r0, [pc, #140]	; (8000df8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d6c:	f002 fc7f 	bl	800366e <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, (uint8_t*)titles[counter], strlen(titles[counter]), 1000);
 8000d70:	7afb      	ldrb	r3, [r7, #11]
 8000d72:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <PrettySend_Skyla_Info_toPi+0x100>)
 8000d74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000d78:	7afb      	ldrb	r3, [r7, #11]
 8000d7a:	4a23      	ldr	r2, [pc, #140]	; (8000e08 <PrettySend_Skyla_Info_toPi+0x100>)
 8000d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fa4f 	bl	8000224 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	4621      	mov	r1, r4
 8000d90:	4819      	ldr	r0, [pc, #100]	; (8000df8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d92:	f002 fc6c 	bl	800366e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"| ", 2, 1000);
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	491b      	ldr	r1, [pc, #108]	; (8000e0c <PrettySend_Skyla_Info_toPi+0x104>)
 8000d9e:	4816      	ldr	r0, [pc, #88]	; (8000df8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000da0:	f002 fc65 	bl	800366e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)tokens, strlen(tokens), 1000);
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff fa3d 	bl	8000224 <strlen>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	68f9      	ldr	r1, [r7, #12]
 8000db4:	4810      	ldr	r0, [pc, #64]	; (8000df8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000db6:	f002 fc5a 	bl	800366e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4913      	ldr	r1, [pc, #76]	; (8000e10 <PrettySend_Skyla_Info_toPi+0x108>)
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000dc4:	f002 fc53 	bl	800366e <HAL_UART_Transmit>

		tokens = strtok(NULL, "|");
 8000dc8:	4909      	ldr	r1, [pc, #36]	; (8000df0 <PrettySend_Skyla_Info_toPi+0xe8>)
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f003 fce4 	bl	8004798 <strtok>
 8000dd0:	60f8      	str	r0, [r7, #12]
		counter += 1;
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(10);
 8000dd8:	200a      	movs	r0, #10
 8000dda:	f001 fa9d 	bl	8002318 <HAL_Delay>
	while( tokens != NULL )
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1a1      	bne.n	8000d28 <PrettySend_Skyla_Info_toPi+0x20>
	}
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	08005b50 	.word	0x08005b50
 8000df4:	08005b54 	.word	0x08005b54
 8000df8:	200064b4 	.word	0x200064b4
 8000dfc:	08005b58 	.word	0x08005b58
 8000e00:	08005b5c 	.word	0x08005b5c
 8000e04:	08005b60 	.word	0x08005b60
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	08005b64 	.word	0x08005b64
 8000e10:	08005b68 	.word	0x08005b68

08000e14 <Skyla1_Molly_App>:

void Skyla1_Molly_App(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e1a:	af00      	add	r7, sp, #0
	switch(molly_skyla1_state)
 8000e1c:	4bba      	ldr	r3, [pc, #744]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	2b07      	cmp	r3, #7
 8000e24:	f200 8152 	bhi.w	80010cc <Skyla1_Molly_App+0x2b8>
 8000e28:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <Skyla1_Molly_App+0x1c>)
 8000e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2e:	bf00      	nop
 8000e30:	08000e51 	.word	0x08000e51
 8000e34:	08000e83 	.word	0x08000e83
 8000e38:	08000ef7 	.word	0x08000ef7
 8000e3c:	08000f39 	.word	0x08000f39
 8000e40:	08000f65 	.word	0x08000f65
 8000e44:	08000fc3 	.word	0x08000fc3
 8000e48:	0800107b 	.word	0x0800107b
 8000e4c:	080010a5 	.word	0x080010a5
	{
		case FIND_DEBUG:
			if(Skyla1_Find_Word("DEBUG"))
 8000e50:	48ae      	ldr	r0, [pc, #696]	; (800110c <Skyla1_Molly_App+0x2f8>)
 8000e52:	f7ff fe03 	bl	8000a5c <Skyla1_Find_Word>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8148 	beq.w	80010ee <Skyla1_Molly_App+0x2da>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L|Found debug\n", 14, 1000);
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	220e      	movs	r2, #14
 8000e64:	49aa      	ldr	r1, [pc, #680]	; (8001110 <Skyla1_Molly_App+0x2fc>)
 8000e66:	48ab      	ldr	r0, [pc, #684]	; (8001114 <Skyla1_Molly_App+0x300>)
 8000e68:	f002 fc01 	bl	800366e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*)"DEBUG", 5, 1000);
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	2205      	movs	r2, #5
 8000e72:	49a6      	ldr	r1, [pc, #664]	; (800110c <Skyla1_Molly_App+0x2f8>)
 8000e74:	48a8      	ldr	r0, [pc, #672]	; (8001118 <Skyla1_Molly_App+0x304>)
 8000e76:	f002 fbfa 	bl	800366e <HAL_UART_Transmit>
				molly_skyla1_state = GET_SETTINGS;
 8000e7a:	4ba3      	ldr	r3, [pc, #652]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e80:	e135      	b.n	80010ee <Skyla1_Molly_App+0x2da>

		case GET_SETTINGS:
			memset(pi_uart_rxBuffer, 0, pi_buffer_size);
 8000e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e86:	2100      	movs	r1, #0
 8000e88:	48a4      	ldr	r0, [pc, #656]	; (800111c <Skyla1_Molly_App+0x308>)
 8000e8a:	f003 fc45 	bl	8004718 <memset>
			pi_array_end = 0;
 8000e8e:	4ba4      	ldr	r3, [pc, #656]	; (8001120 <Skyla1_Molly_App+0x30c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"send payload \r\n", 15, 1000);
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	220f      	movs	r2, #15
 8000e9a:	49a2      	ldr	r1, [pc, #648]	; (8001124 <Skyla1_Molly_App+0x310>)
 8000e9c:	489d      	ldr	r0, [pc, #628]	; (8001114 <Skyla1_Molly_App+0x300>)
 8000e9e:	f002 fbe6 	bl	800366e <HAL_UART_Transmit>
			HAL_Delay(100);
 8000ea2:	2064      	movs	r0, #100	; 0x64
 8000ea4:	f001 fa38 	bl	8002318 <HAL_Delay>

			HAL_UART_Transmit(&huart1, (uint8_t*)"L| PL:", 6, 1000);
 8000ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eac:	2206      	movs	r2, #6
 8000eae:	499e      	ldr	r1, [pc, #632]	; (8001128 <Skyla1_Molly_App+0x314>)
 8000eb0:	4898      	ldr	r0, [pc, #608]	; (8001114 <Skyla1_Molly_App+0x300>)
 8000eb2:	f002 fbdc 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)(char*)pi_uart_rxBuffer, strlen((char*)pi_uart_rxBuffer), 1000);
 8000eb6:	4899      	ldr	r0, [pc, #612]	; (800111c <Skyla1_Molly_App+0x308>)
 8000eb8:	f7ff f9b4 	bl	8000224 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec4:	4995      	ldr	r1, [pc, #596]	; (800111c <Skyla1_Molly_App+0x308>)
 8000ec6:	4893      	ldr	r0, [pc, #588]	; (8001114 <Skyla1_Molly_App+0x300>)
 8000ec8:	f002 fbd1 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8000ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4996      	ldr	r1, [pc, #600]	; (800112c <Skyla1_Molly_App+0x318>)
 8000ed4:	488f      	ldr	r0, [pc, #572]	; (8001114 <Skyla1_Molly_App+0x300>)
 8000ed6:	f002 fbca 	bl	800366e <HAL_UART_Transmit>

			payload = pi_uart_rxBuffer;
 8000eda:	4b95      	ldr	r3, [pc, #596]	; (8001130 <Skyla1_Molly_App+0x31c>)
 8000edc:	4a8f      	ldr	r2, [pc, #572]	; (800111c <Skyla1_Molly_App+0x308>)
 8000ede:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*)"$", 1, 500);
 8000ee0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4993      	ldr	r1, [pc, #588]	; (8001134 <Skyla1_Molly_App+0x320>)
 8000ee8:	488b      	ldr	r0, [pc, #556]	; (8001118 <Skyla1_Molly_App+0x304>)
 8000eea:	f002 fbc0 	bl	800366e <HAL_UART_Transmit>
			molly_skyla1_state = GET_MSG_P1;
 8000eee:	4b86      	ldr	r3, [pc, #536]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	701a      	strb	r2, [r3, #0]
			break;
 8000ef4:	e102      	b.n	80010fc <Skyla1_Molly_App+0x2e8>

		case GET_MSG_P1:
			if(Skyla1_Find_Word("NACK"))
 8000ef6:	4890      	ldr	r0, [pc, #576]	; (8001138 <Skyla1_Molly_App+0x324>)
 8000ef8:	f7ff fdb0 	bl	8000a5c <Skyla1_Find_Word>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 80f7 	beq.w	80010f2 <Skyla1_Molly_App+0x2de>
			{
				memset(getinfo_buffer, 0, getinfo_buffer_size);
 8000f04:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f08:	2100      	movs	r1, #0
 8000f0a:	488c      	ldr	r0, [pc, #560]	; (800113c <Skyla1_Molly_App+0x328>)
 8000f0c:	f003 fc04 	bl	8004718 <memset>
				getinfo_buffer_head = 1;
 8000f10:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <Skyla1_Molly_App+0x32c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	801a      	strh	r2, [r3, #0]
				getinfo_fields_found_count = 0;
 8000f16:	4b8b      	ldr	r3, [pc, #556]	; (8001144 <Skyla1_Molly_App+0x330>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
				getinfo_find_fields = 0;
 8000f1c:	4b8a      	ldr	r3, [pc, #552]	; (8001148 <Skyla1_Molly_App+0x334>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)"#", 1, 500);
 8000f22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f26:	2201      	movs	r2, #1
 8000f28:	4988      	ldr	r1, [pc, #544]	; (800114c <Skyla1_Molly_App+0x338>)
 8000f2a:	487b      	ldr	r0, [pc, #492]	; (8001118 <Skyla1_Molly_App+0x304>)
 8000f2c:	f002 fb9f 	bl	800366e <HAL_UART_Transmit>
				molly_skyla1_state = GET_MSG_P2;
 8000f30:	4b75      	ldr	r3, [pc, #468]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f36:	e0dc      	b.n	80010f2 <Skyla1_Molly_App+0x2de>

		case GET_MSG_P2:
			brd_msg = Skyla1_GetInfo();
 8000f38:	f7ff fe46 	bl	8000bc8 <Skyla1_GetInfo>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a84      	ldr	r2, [pc, #528]	; (8001150 <Skyla1_Molly_App+0x33c>)
 8000f40:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 8000f42:	4b83      	ldr	r3, [pc, #524]	; (8001150 <Skyla1_Molly_App+0x33c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b31      	cmp	r3, #49	; 0x31
 8000f4a:	f040 80d4 	bne.w	80010f6 <Skyla1_Molly_App+0x2e2>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 1, 1);
 8000f4e:	4b80      	ldr	r3, [pc, #512]	; (8001150 <Skyla1_Molly_App+0x33c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2201      	movs	r2, #1
 8000f54:	2101      	movs	r1, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fed6 	bl	8000d08 <PrettySend_Skyla_Info_toPi>
				molly_skyla1_state = MOLLY_P1;
 8000f5c:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 8000f5e:	2205      	movs	r2, #5
 8000f60:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f62:	e0c8      	b.n	80010f6 <Skyla1_Molly_App+0x2e2>

		case MOLLY_P1:
			if(Skyla1_Find_Word("N"))
 8000f64:	487b      	ldr	r0, [pc, #492]	; (8001154 <Skyla1_Molly_App+0x340>)
 8000f66:	f7ff fd79 	bl	8000a5c <Skyla1_Find_Word>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <Skyla1_Molly_App+0x162>
					skyla1_new_data = 0;
 8000f70:	4b79      	ldr	r3, [pc, #484]	; (8001158 <Skyla1_Molly_App+0x344>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
			char strC[500];
			char * settings_char = "$$";
 8000f76:	4b79      	ldr	r3, [pc, #484]	; (800115c <Skyla1_Molly_App+0x348>)
 8000f78:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			strncpy(strC, settings_char, 1);
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 fbde 	bl	8004746 <strncpy>
			strC[1] = '\0';
 8000f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f92:	2200      	movs	r2, #0
 8000f94:	705a      	strb	r2, [r3, #1]
			strcat(strC, (char*)payload);
 8000f96:	4b66      	ldr	r3, [pc, #408]	; (8001130 <Skyla1_Molly_App+0x31c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fbc2 	bl	8004728 <strcat>
			HAL_UART_Transmit(&huart3, (uint8_t*) strC, strlen(strC), 50);
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f93c 	bl	8000224 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	1d39      	adds	r1, r7, #4
 8000fb2:	2332      	movs	r3, #50	; 0x32
 8000fb4:	4858      	ldr	r0, [pc, #352]	; (8001118 <Skyla1_Molly_App+0x304>)
 8000fb6:	f002 fb5a 	bl	800366e <HAL_UART_Transmit>
			molly_skyla1_state = MOLLY_P2;
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 8000fbc:	2206      	movs	r2, #6
 8000fbe:	701a      	strb	r2, [r3, #0]
			break;
 8000fc0:	e09c      	b.n	80010fc <Skyla1_Molly_App+0x2e8>

		case MOLLY_P2:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| in molly \n", 13, 500);
 8000fc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fc6:	220d      	movs	r2, #13
 8000fc8:	4965      	ldr	r1, [pc, #404]	; (8001160 <Skyla1_Molly_App+0x34c>)
 8000fca:	4852      	ldr	r0, [pc, #328]	; (8001114 <Skyla1_Molly_App+0x300>)
 8000fcc:	f002 fb4f 	bl	800366e <HAL_UART_Transmit>
			while(1)
			{
				if(Skyla1_Find_Word(":"))
 8000fd0:	4864      	ldr	r0, [pc, #400]	; (8001164 <Skyla1_Molly_App+0x350>)
 8000fd2:	f7ff fd43 	bl	8000a5c <Skyla1_Find_Word>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f9      	beq.n	8000fd0 <Skyla1_Molly_App+0x1bc>
				{
					char * curr_string = (char*)&skyla1_uart_rxBuffer[skyla1_array_start+1];
 8000fdc:	4b62      	ldr	r3, [pc, #392]	; (8001168 <Skyla1_Molly_App+0x354>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4a62      	ldr	r2, [pc, #392]	; (800116c <Skyla1_Molly_App+0x358>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
					char * find_pass = strstr(curr_string, "PASS");
 8000fea:	4961      	ldr	r1, [pc, #388]	; (8001170 <Skyla1_Molly_App+0x35c>)
 8000fec:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8000ff0:	f003 fbbc 	bl	800476c <strstr>
 8000ff4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					char * find_fail = strstr(curr_string, "FAIL");
 8000ff8:	495e      	ldr	r1, [pc, #376]	; (8001174 <Skyla1_Molly_App+0x360>)
 8000ffa:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8000ffe:	f003 fbb5 	bl	800476c <strstr>
 8001002:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
					if(find_pass != NULL)
 8001006:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800100a:	2b00      	cmp	r3, #0
 800100c:	d020      	beq.n	8001050 <Skyla1_Molly_App+0x23c>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD PASS \n", 15, 500);
 800100e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001012:	220f      	movs	r2, #15
 8001014:	4958      	ldr	r1, [pc, #352]	; (8001178 <Skyla1_Molly_App+0x364>)
 8001016:	483f      	ldr	r0, [pc, #252]	; (8001114 <Skyla1_Molly_App+0x300>)
 8001018:	f002 fb29 	bl	800366e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t*)"#", 1, 500);
 800101c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001020:	2201      	movs	r2, #1
 8001022:	494a      	ldr	r1, [pc, #296]	; (800114c <Skyla1_Molly_App+0x338>)
 8001024:	483c      	ldr	r0, [pc, #240]	; (8001118 <Skyla1_Molly_App+0x304>)
 8001026:	f002 fb22 	bl	800366e <HAL_UART_Transmit>
						memset(getinfo_buffer, 0, getinfo_buffer_size);
 800102a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800102e:	2100      	movs	r1, #0
 8001030:	4842      	ldr	r0, [pc, #264]	; (800113c <Skyla1_Molly_App+0x328>)
 8001032:	f003 fb71 	bl	8004718 <memset>
						getinfo_buffer_head = 1;
 8001036:	4b42      	ldr	r3, [pc, #264]	; (8001140 <Skyla1_Molly_App+0x32c>)
 8001038:	2201      	movs	r2, #1
 800103a:	801a      	strh	r2, [r3, #0]
						getinfo_fields_found_count = 0;
 800103c:	4b41      	ldr	r3, [pc, #260]	; (8001144 <Skyla1_Molly_App+0x330>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
						getinfo_find_fields = 0;
 8001042:	4b41      	ldr	r3, [pc, #260]	; (8001148 <Skyla1_Molly_App+0x334>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
						molly_skyla1_state = GET_MSG_P3;
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 800104a:	2207      	movs	r2, #7
 800104c:	701a      	strb	r2, [r3, #0]
						break;
 800104e:	e013      	b.n	8001078 <Skyla1_Molly_App+0x264>
					}
					else if(find_fail != NULL)
 8001050:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00a      	beq.n	800106e <Skyla1_Molly_App+0x25a>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD FAIL!!! \n", 18, 500);
 8001058:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800105c:	2212      	movs	r2, #18
 800105e:	4947      	ldr	r1, [pc, #284]	; (800117c <Skyla1_Molly_App+0x368>)
 8001060:	482c      	ldr	r0, [pc, #176]	; (8001114 <Skyla1_Molly_App+0x300>)
 8001062:	f002 fb04 	bl	800366e <HAL_UART_Transmit>
						molly_skyla1_state = FINISH_MOLLY;
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 8001068:	2208      	movs	r2, #8
 800106a:	701a      	strb	r2, [r3, #0]
						break;
 800106c:	e004      	b.n	8001078 <Skyla1_Molly_App+0x264>
					}
					skyla1_array_start = skyla1_array_end;
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <Skyla1_Molly_App+0x36c>)
 8001070:	881a      	ldrh	r2, [r3, #0]
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <Skyla1_Molly_App+0x354>)
 8001074:	801a      	strh	r2, [r3, #0]
				if(Skyla1_Find_Word(":"))
 8001076:	e7ab      	b.n	8000fd0 <Skyla1_Molly_App+0x1bc>
				}
			}
			break;
 8001078:	e040      	b.n	80010fc <Skyla1_Molly_App+0x2e8>

		case GET_MSG_P3:
			brd_msg = Skyla1_GetInfo();
 800107a:	f7ff fda5 	bl	8000bc8 <Skyla1_GetInfo>
 800107e:	4603      	mov	r3, r0
 8001080:	4a33      	ldr	r2, [pc, #204]	; (8001150 <Skyla1_Molly_App+0x33c>)
 8001082:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <Skyla1_Molly_App+0x33c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b31      	cmp	r3, #49	; 0x31
 800108c:	d135      	bne.n	80010fa <Skyla1_Molly_App+0x2e6>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 1, 0);
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <Skyla1_Molly_App+0x33c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2200      	movs	r2, #0
 8001094:	2101      	movs	r1, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fe36 	bl	8000d08 <PrettySend_Skyla_Info_toPi>
				molly_skyla1_state = FINISH_MOLLY;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 800109e:	2208      	movs	r2, #8
 80010a0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80010a2:	e02a      	b.n	80010fa <Skyla1_Molly_App+0x2e6>

		case FINISH_MOLLY:
			HAL_GPIO_WritePin(SKYLA1_TX_EN_Port, SKYLA1_TX_EN_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010aa:	4836      	ldr	r0, [pc, #216]	; (8001184 <Skyla1_Molly_App+0x370>)
 80010ac:	f001 fc90 	bl	80029d0 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, (uint8_t*)"molly complete \r\n", 17, 1000);
 80010b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b4:	2211      	movs	r2, #17
 80010b6:	4934      	ldr	r1, [pc, #208]	; (8001188 <Skyla1_Molly_App+0x374>)
 80010b8:	4816      	ldr	r0, [pc, #88]	; (8001114 <Skyla1_Molly_App+0x300>)
 80010ba:	f002 fad8 	bl	800366e <HAL_UART_Transmit>
			molly_skyla1_state = DEFAULT;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <Skyla1_Molly_App+0x378>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
			break;
 80010ca:	e017      	b.n	80010fc <Skyla1_Molly_App+0x2e8>

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| Received molly command. \r\n", 29, 1000);
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	221d      	movs	r2, #29
 80010d2:	492f      	ldr	r1, [pc, #188]	; (8001190 <Skyla1_Molly_App+0x37c>)
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <Skyla1_Molly_App+0x300>)
 80010d6:	f002 faca 	bl	800366e <HAL_UART_Transmit>
			HAL_GPIO_WritePin(SKYLA1_TX_EN_Port, SKYLA1_TX_EN_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e0:	4828      	ldr	r0, [pc, #160]	; (8001184 <Skyla1_Molly_App+0x370>)
 80010e2:	f001 fc75 	bl	80029d0 <HAL_GPIO_WritePin>
			molly_skyla1_state = FIND_DEBUG;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <Skyla1_Molly_App+0x2f4>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
			break;
 80010ec:	e006      	b.n	80010fc <Skyla1_Molly_App+0x2e8>
			break;
 80010ee:	bf00      	nop
 80010f0:	e004      	b.n	80010fc <Skyla1_Molly_App+0x2e8>
			break;
 80010f2:	bf00      	nop
 80010f4:	e002      	b.n	80010fc <Skyla1_Molly_App+0x2e8>
			break;
 80010f6:	bf00      	nop
 80010f8:	e000      	b.n	80010fc <Skyla1_Molly_App+0x2e8>
			break;
 80010fa:	bf00      	nop
	}
}
 80010fc:	bf00      	nop
 80010fe:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000120 	.word	0x20000120
 800110c:	08005b6c 	.word	0x08005b6c
 8001110:	08005b74 	.word	0x08005b74
 8001114:	200064b4 	.word	0x200064b4
 8001118:	2000653c 	.word	0x2000653c
 800111c:	20000124 	.word	0x20000124
 8001120:	200014ac 	.word	0x200014ac
 8001124:	08005b84 	.word	0x08005b84
 8001128:	08005b94 	.word	0x08005b94
 800112c:	08005b68 	.word	0x08005b68
 8001130:	20002974 	.word	0x20002974
 8001134:	08005b9c 	.word	0x08005b9c
 8001138:	08005ba0 	.word	0x08005ba0
 800113c:	200014b0 	.word	0x200014b0
 8001140:	200015de 	.word	0x200015de
 8001144:	200015dc 	.word	0x200015dc
 8001148:	200015dd 	.word	0x200015dd
 800114c:	08005ba8 	.word	0x08005ba8
 8001150:	200015e0 	.word	0x200015e0
 8001154:	08005bac 	.word	0x08005bac
 8001158:	20002973 	.word	0x20002973
 800115c:	08005bb0 	.word	0x08005bb0
 8001160:	08005bb4 	.word	0x08005bb4
 8001164:	08005bc4 	.word	0x08005bc4
 8001168:	2000296c 	.word	0x2000296c
 800116c:	200015e4 	.word	0x200015e4
 8001170:	08005bc8 	.word	0x08005bc8
 8001174:	08005bd0 	.word	0x08005bd0
 8001178:	08005bd8 	.word	0x08005bd8
 800117c:	08005be8 	.word	0x08005be8
 8001180:	2000296e 	.word	0x2000296e
 8001184:	40020800 	.word	0x40020800
 8001188:	08005bfc 	.word	0x08005bfc
 800118c:	20000122 	.word	0x20000122
 8001190:	08005c10 	.word	0x08005c10

08001194 <Skyla2_Molly_App>:

void Skyla2_Molly_App(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800119a:	af00      	add	r7, sp, #0
	switch(molly_skyla2_state)
 800119c:	4bba      	ldr	r3, [pc, #744]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	f200 8152 	bhi.w	800144c <Skyla2_Molly_App+0x2b8>
 80011a8:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <Skyla2_Molly_App+0x1c>)
 80011aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ae:	bf00      	nop
 80011b0:	080011d1 	.word	0x080011d1
 80011b4:	08001203 	.word	0x08001203
 80011b8:	08001277 	.word	0x08001277
 80011bc:	080012b9 	.word	0x080012b9
 80011c0:	080012e5 	.word	0x080012e5
 80011c4:	08001343 	.word	0x08001343
 80011c8:	080013fb 	.word	0x080013fb
 80011cc:	08001425 	.word	0x08001425
	{
		case FIND_DEBUG:
			if(Skyla2_Find_Word("DEBUG"))
 80011d0:	48ae      	ldr	r0, [pc, #696]	; (800148c <Skyla2_Molly_App+0x2f8>)
 80011d2:	f7ff fc9e 	bl	8000b12 <Skyla2_Find_Word>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8148 	beq.w	800146e <Skyla2_Molly_App+0x2da>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L|Found debug\n", 14, 1000);
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	220e      	movs	r2, #14
 80011e4:	49aa      	ldr	r1, [pc, #680]	; (8001490 <Skyla2_Molly_App+0x2fc>)
 80011e6:	48ab      	ldr	r0, [pc, #684]	; (8001494 <Skyla2_Molly_App+0x300>)
 80011e8:	f002 fa41 	bl	800366e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart5, (uint8_t*)"DEBUG", 5, 1000);
 80011ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f0:	2205      	movs	r2, #5
 80011f2:	49a6      	ldr	r1, [pc, #664]	; (800148c <Skyla2_Molly_App+0x2f8>)
 80011f4:	48a8      	ldr	r0, [pc, #672]	; (8001498 <Skyla2_Molly_App+0x304>)
 80011f6:	f002 fa3a 	bl	800366e <HAL_UART_Transmit>
				molly_skyla2_state = GET_SETTINGS;
 80011fa:	4ba3      	ldr	r3, [pc, #652]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001200:	e135      	b.n	800146e <Skyla2_Molly_App+0x2da>

		case GET_SETTINGS:
			memset(pi_uart_rxBuffer, 0, pi_buffer_size);
 8001202:	f241 3288 	movw	r2, #5000	; 0x1388
 8001206:	2100      	movs	r1, #0
 8001208:	48a4      	ldr	r0, [pc, #656]	; (800149c <Skyla2_Molly_App+0x308>)
 800120a:	f003 fa85 	bl	8004718 <memset>
			pi_array_end = 0;
 800120e:	4ba4      	ldr	r3, [pc, #656]	; (80014a0 <Skyla2_Molly_App+0x30c>)
 8001210:	2200      	movs	r2, #0
 8001212:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"send payload \r\n", 15, 1000);
 8001214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001218:	220f      	movs	r2, #15
 800121a:	49a2      	ldr	r1, [pc, #648]	; (80014a4 <Skyla2_Molly_App+0x310>)
 800121c:	489d      	ldr	r0, [pc, #628]	; (8001494 <Skyla2_Molly_App+0x300>)
 800121e:	f002 fa26 	bl	800366e <HAL_UART_Transmit>
			HAL_Delay(100);
 8001222:	2064      	movs	r0, #100	; 0x64
 8001224:	f001 f878 	bl	8002318 <HAL_Delay>

			HAL_UART_Transmit(&huart1, (uint8_t*)"L| PL:", 6, 1000);
 8001228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122c:	2206      	movs	r2, #6
 800122e:	499e      	ldr	r1, [pc, #632]	; (80014a8 <Skyla2_Molly_App+0x314>)
 8001230:	4898      	ldr	r0, [pc, #608]	; (8001494 <Skyla2_Molly_App+0x300>)
 8001232:	f002 fa1c 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)(char*)pi_uart_rxBuffer, strlen((char*)pi_uart_rxBuffer), 1000);
 8001236:	4899      	ldr	r0, [pc, #612]	; (800149c <Skyla2_Molly_App+0x308>)
 8001238:	f7fe fff4 	bl	8000224 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	b29a      	uxth	r2, r3
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	4995      	ldr	r1, [pc, #596]	; (800149c <Skyla2_Molly_App+0x308>)
 8001246:	4893      	ldr	r0, [pc, #588]	; (8001494 <Skyla2_Molly_App+0x300>)
 8001248:	f002 fa11 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 800124c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001250:	2201      	movs	r2, #1
 8001252:	4996      	ldr	r1, [pc, #600]	; (80014ac <Skyla2_Molly_App+0x318>)
 8001254:	488f      	ldr	r0, [pc, #572]	; (8001494 <Skyla2_Molly_App+0x300>)
 8001256:	f002 fa0a 	bl	800366e <HAL_UART_Transmit>

			payload = pi_uart_rxBuffer;
 800125a:	4b95      	ldr	r3, [pc, #596]	; (80014b0 <Skyla2_Molly_App+0x31c>)
 800125c:	4a8f      	ldr	r2, [pc, #572]	; (800149c <Skyla2_Molly_App+0x308>)
 800125e:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart5, (uint8_t*)"$", 1, 500);
 8001260:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001264:	2201      	movs	r2, #1
 8001266:	4993      	ldr	r1, [pc, #588]	; (80014b4 <Skyla2_Molly_App+0x320>)
 8001268:	488b      	ldr	r0, [pc, #556]	; (8001498 <Skyla2_Molly_App+0x304>)
 800126a:	f002 fa00 	bl	800366e <HAL_UART_Transmit>
			molly_skyla2_state = GET_MSG_P1;
 800126e:	4b86      	ldr	r3, [pc, #536]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 8001270:	2203      	movs	r2, #3
 8001272:	701a      	strb	r2, [r3, #0]
			break;
 8001274:	e102      	b.n	800147c <Skyla2_Molly_App+0x2e8>

		case GET_MSG_P1:
			if(Skyla2_Find_Word("NACK"))
 8001276:	4890      	ldr	r0, [pc, #576]	; (80014b8 <Skyla2_Molly_App+0x324>)
 8001278:	f7ff fc4b 	bl	8000b12 <Skyla2_Find_Word>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80f7 	beq.w	8001472 <Skyla2_Molly_App+0x2de>
			{
				memset(getinfo_buffer, 0, getinfo_buffer_size);
 8001284:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001288:	2100      	movs	r1, #0
 800128a:	488c      	ldr	r0, [pc, #560]	; (80014bc <Skyla2_Molly_App+0x328>)
 800128c:	f003 fa44 	bl	8004718 <memset>
				getinfo_buffer_head = 1;
 8001290:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <Skyla2_Molly_App+0x32c>)
 8001292:	2201      	movs	r2, #1
 8001294:	801a      	strh	r2, [r3, #0]
				getinfo_fields_found_count = 0;
 8001296:	4b8b      	ldr	r3, [pc, #556]	; (80014c4 <Skyla2_Molly_App+0x330>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
				getinfo_find_fields = 0;
 800129c:	4b8a      	ldr	r3, [pc, #552]	; (80014c8 <Skyla2_Molly_App+0x334>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart5, (uint8_t*)"#", 1, 500);
 80012a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a6:	2201      	movs	r2, #1
 80012a8:	4988      	ldr	r1, [pc, #544]	; (80014cc <Skyla2_Molly_App+0x338>)
 80012aa:	487b      	ldr	r0, [pc, #492]	; (8001498 <Skyla2_Molly_App+0x304>)
 80012ac:	f002 f9df 	bl	800366e <HAL_UART_Transmit>
				molly_skyla2_state = GET_MSG_P2;
 80012b0:	4b75      	ldr	r3, [pc, #468]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 80012b2:	2204      	movs	r2, #4
 80012b4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80012b6:	e0dc      	b.n	8001472 <Skyla2_Molly_App+0x2de>

		case GET_MSG_P2:
			brd_msg = Skyla2_GetInfo();
 80012b8:	f7ff fcd6 	bl	8000c68 <Skyla2_GetInfo>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a84      	ldr	r2, [pc, #528]	; (80014d0 <Skyla2_Molly_App+0x33c>)
 80012c0:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 80012c2:	4b83      	ldr	r3, [pc, #524]	; (80014d0 <Skyla2_Molly_App+0x33c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b31      	cmp	r3, #49	; 0x31
 80012ca:	f040 80d4 	bne.w	8001476 <Skyla2_Molly_App+0x2e2>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 2, 1);
 80012ce:	4b80      	ldr	r3, [pc, #512]	; (80014d0 <Skyla2_Molly_App+0x33c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2201      	movs	r2, #1
 80012d4:	2102      	movs	r1, #2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fd16 	bl	8000d08 <PrettySend_Skyla_Info_toPi>
				molly_skyla2_state = MOLLY_P1;
 80012dc:	4b6a      	ldr	r3, [pc, #424]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 80012de:	2205      	movs	r2, #5
 80012e0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80012e2:	e0c8      	b.n	8001476 <Skyla2_Molly_App+0x2e2>

		case MOLLY_P1:
			if(Skyla2_Find_Word("N"))
 80012e4:	487b      	ldr	r0, [pc, #492]	; (80014d4 <Skyla2_Molly_App+0x340>)
 80012e6:	f7ff fc14 	bl	8000b12 <Skyla2_Find_Word>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <Skyla2_Molly_App+0x162>
					skyla1_new_data = 0;
 80012f0:	4b79      	ldr	r3, [pc, #484]	; (80014d8 <Skyla2_Molly_App+0x344>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
			char strC[500];
			char * settings_char = "$$";
 80012f6:	4b79      	ldr	r3, [pc, #484]	; (80014dc <Skyla2_Molly_App+0x348>)
 80012f8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			strncpy(strC, settings_char, 1);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2201      	movs	r2, #1
 8001300:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fa1e 	bl	8004746 <strncpy>
			strC[1] = '\0';
 800130a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800130e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001312:	2200      	movs	r2, #0
 8001314:	705a      	strb	r2, [r3, #1]
			strcat(strC, (char*)payload);
 8001316:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <Skyla2_Molly_App+0x31c>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fa02 	bl	8004728 <strcat>
			HAL_UART_Transmit(&huart5, (uint8_t*) strC, strlen(strC), 50);
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ff7c 	bl	8000224 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	b29a      	uxth	r2, r3
 8001330:	1d39      	adds	r1, r7, #4
 8001332:	2332      	movs	r3, #50	; 0x32
 8001334:	4858      	ldr	r0, [pc, #352]	; (8001498 <Skyla2_Molly_App+0x304>)
 8001336:	f002 f99a 	bl	800366e <HAL_UART_Transmit>
			molly_skyla2_state = MOLLY_P2;
 800133a:	4b53      	ldr	r3, [pc, #332]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 800133c:	2206      	movs	r2, #6
 800133e:	701a      	strb	r2, [r3, #0]
			break;
 8001340:	e09c      	b.n	800147c <Skyla2_Molly_App+0x2e8>

		case MOLLY_P2:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| in molly \n", 13, 500);
 8001342:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001346:	220d      	movs	r2, #13
 8001348:	4965      	ldr	r1, [pc, #404]	; (80014e0 <Skyla2_Molly_App+0x34c>)
 800134a:	4852      	ldr	r0, [pc, #328]	; (8001494 <Skyla2_Molly_App+0x300>)
 800134c:	f002 f98f 	bl	800366e <HAL_UART_Transmit>
			while(1)
			{
				if(Skyla2_Find_Word(":"))
 8001350:	4864      	ldr	r0, [pc, #400]	; (80014e4 <Skyla2_Molly_App+0x350>)
 8001352:	f7ff fbde 	bl	8000b12 <Skyla2_Find_Word>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f9      	beq.n	8001350 <Skyla2_Molly_App+0x1bc>
				{
					char * curr_string = (char*)&skyla2_uart_rxBuffer[skyla2_array_start+1];
 800135c:	4b62      	ldr	r3, [pc, #392]	; (80014e8 <Skyla2_Molly_App+0x354>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a62      	ldr	r2, [pc, #392]	; (80014ec <Skyla2_Molly_App+0x358>)
 8001364:	4413      	add	r3, r2
 8001366:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
					char * find_pass = strstr(curr_string, "PASS");
 800136a:	4961      	ldr	r1, [pc, #388]	; (80014f0 <Skyla2_Molly_App+0x35c>)
 800136c:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001370:	f003 f9fc 	bl	800476c <strstr>
 8001374:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					char * find_fail = strstr(curr_string, "FAIL");
 8001378:	495e      	ldr	r1, [pc, #376]	; (80014f4 <Skyla2_Molly_App+0x360>)
 800137a:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800137e:	f003 f9f5 	bl	800476c <strstr>
 8001382:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
					if(find_pass != NULL)
 8001386:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800138a:	2b00      	cmp	r3, #0
 800138c:	d020      	beq.n	80013d0 <Skyla2_Molly_App+0x23c>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD PASS \n", 15, 500);
 800138e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001392:	220f      	movs	r2, #15
 8001394:	4958      	ldr	r1, [pc, #352]	; (80014f8 <Skyla2_Molly_App+0x364>)
 8001396:	483f      	ldr	r0, [pc, #252]	; (8001494 <Skyla2_Molly_App+0x300>)
 8001398:	f002 f969 	bl	800366e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart5, (uint8_t*)"#", 1, 500);
 800139c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013a0:	2201      	movs	r2, #1
 80013a2:	494a      	ldr	r1, [pc, #296]	; (80014cc <Skyla2_Molly_App+0x338>)
 80013a4:	483c      	ldr	r0, [pc, #240]	; (8001498 <Skyla2_Molly_App+0x304>)
 80013a6:	f002 f962 	bl	800366e <HAL_UART_Transmit>
						memset(getinfo_buffer, 0, getinfo_buffer_size);
 80013aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013ae:	2100      	movs	r1, #0
 80013b0:	4842      	ldr	r0, [pc, #264]	; (80014bc <Skyla2_Molly_App+0x328>)
 80013b2:	f003 f9b1 	bl	8004718 <memset>
						getinfo_buffer_head = 1;
 80013b6:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <Skyla2_Molly_App+0x32c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	801a      	strh	r2, [r3, #0]
						getinfo_fields_found_count = 0;
 80013bc:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <Skyla2_Molly_App+0x330>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
						getinfo_find_fields = 0;
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <Skyla2_Molly_App+0x334>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
						molly_skyla2_state = GET_MSG_P3;
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 80013ca:	2207      	movs	r2, #7
 80013cc:	701a      	strb	r2, [r3, #0]
						break;
 80013ce:	e013      	b.n	80013f8 <Skyla2_Molly_App+0x264>
					}
					else if(find_fail != NULL)
 80013d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00a      	beq.n	80013ee <Skyla2_Molly_App+0x25a>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD FAIL!!! \n", 18, 500);
 80013d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013dc:	2212      	movs	r2, #18
 80013de:	4947      	ldr	r1, [pc, #284]	; (80014fc <Skyla2_Molly_App+0x368>)
 80013e0:	482c      	ldr	r0, [pc, #176]	; (8001494 <Skyla2_Molly_App+0x300>)
 80013e2:	f002 f944 	bl	800366e <HAL_UART_Transmit>
						molly_skyla2_state = FINISH_MOLLY;
 80013e6:	4b28      	ldr	r3, [pc, #160]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 80013e8:	2208      	movs	r2, #8
 80013ea:	701a      	strb	r2, [r3, #0]
						break;
 80013ec:	e004      	b.n	80013f8 <Skyla2_Molly_App+0x264>
					}
					skyla2_array_start = skyla2_array_end;
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <Skyla2_Molly_App+0x36c>)
 80013f0:	881a      	ldrh	r2, [r3, #0]
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <Skyla2_Molly_App+0x354>)
 80013f4:	801a      	strh	r2, [r3, #0]
				if(Skyla2_Find_Word(":"))
 80013f6:	e7ab      	b.n	8001350 <Skyla2_Molly_App+0x1bc>
				}
			}
			break;
 80013f8:	e040      	b.n	800147c <Skyla2_Molly_App+0x2e8>

		case GET_MSG_P3:
			brd_msg = Skyla2_GetInfo();
 80013fa:	f7ff fc35 	bl	8000c68 <Skyla2_GetInfo>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <Skyla2_Molly_App+0x33c>)
 8001402:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <Skyla2_Molly_App+0x33c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b31      	cmp	r3, #49	; 0x31
 800140c:	d135      	bne.n	800147a <Skyla2_Molly_App+0x2e6>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 2, 0);
 800140e:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <Skyla2_Molly_App+0x33c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2200      	movs	r2, #0
 8001414:	2102      	movs	r1, #2
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc76 	bl	8000d08 <PrettySend_Skyla_Info_toPi>
				molly_skyla2_state = FINISH_MOLLY;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 800141e:	2208      	movs	r2, #8
 8001420:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001422:	e02a      	b.n	800147a <Skyla2_Molly_App+0x2e6>

		case FINISH_MOLLY:
			HAL_GPIO_WritePin(SKYLA2_TX_EN_Port, SKYLA2_TX_EN_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142a:	4836      	ldr	r0, [pc, #216]	; (8001504 <Skyla2_Molly_App+0x370>)
 800142c:	f001 fad0 	bl	80029d0 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, (uint8_t*)"molly complete \r\n", 17, 1000);
 8001430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001434:	2211      	movs	r2, #17
 8001436:	4934      	ldr	r1, [pc, #208]	; (8001508 <Skyla2_Molly_App+0x374>)
 8001438:	4816      	ldr	r0, [pc, #88]	; (8001494 <Skyla2_Molly_App+0x300>)
 800143a:	f002 f918 	bl	800366e <HAL_UART_Transmit>
			molly_skyla2_state = DEFAULT;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <Skyla2_Molly_App+0x378>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
			break;
 800144a:	e017      	b.n	800147c <Skyla2_Molly_App+0x2e8>

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| Received molly command. \r\n", 29, 1000);
 800144c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001450:	221d      	movs	r2, #29
 8001452:	492f      	ldr	r1, [pc, #188]	; (8001510 <Skyla2_Molly_App+0x37c>)
 8001454:	480f      	ldr	r0, [pc, #60]	; (8001494 <Skyla2_Molly_App+0x300>)
 8001456:	f002 f90a 	bl	800366e <HAL_UART_Transmit>
			HAL_GPIO_WritePin(SKYLA2_TX_EN_Port, SKYLA2_TX_EN_Pin, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001460:	4828      	ldr	r0, [pc, #160]	; (8001504 <Skyla2_Molly_App+0x370>)
 8001462:	f001 fab5 	bl	80029d0 <HAL_GPIO_WritePin>
			molly_skyla2_state = FIND_DEBUG;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <Skyla2_Molly_App+0x2f4>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
			break;
 800146c:	e006      	b.n	800147c <Skyla2_Molly_App+0x2e8>
			break;
 800146e:	bf00      	nop
 8001470:	e004      	b.n	800147c <Skyla2_Molly_App+0x2e8>
			break;
 8001472:	bf00      	nop
 8001474:	e002      	b.n	800147c <Skyla2_Molly_App+0x2e8>
			break;
 8001476:	bf00      	nop
 8001478:	e000      	b.n	800147c <Skyla2_Molly_App+0x2e8>
			break;
 800147a:	bf00      	nop
	}
}
 800147c:	bf00      	nop
 800147e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000121 	.word	0x20000121
 800148c:	08005b6c 	.word	0x08005b6c
 8001490:	08005b74 	.word	0x08005b74
 8001494:	200064b4 	.word	0x200064b4
 8001498:	20006470 	.word	0x20006470
 800149c:	20000124 	.word	0x20000124
 80014a0:	200014ac 	.word	0x200014ac
 80014a4:	08005b84 	.word	0x08005b84
 80014a8:	08005b94 	.word	0x08005b94
 80014ac:	08005b68 	.word	0x08005b68
 80014b0:	20002974 	.word	0x20002974
 80014b4:	08005b9c 	.word	0x08005b9c
 80014b8:	08005ba0 	.word	0x08005ba0
 80014bc:	200014b0 	.word	0x200014b0
 80014c0:	200015de 	.word	0x200015de
 80014c4:	200015dc 	.word	0x200015dc
 80014c8:	200015dd 	.word	0x200015dd
 80014cc:	08005ba8 	.word	0x08005ba8
 80014d0:	200015e0 	.word	0x200015e0
 80014d4:	08005bac 	.word	0x08005bac
 80014d8:	20002973 	.word	0x20002973
 80014dc:	08005bb0 	.word	0x08005bb0
 80014e0:	08005bb4 	.word	0x08005bb4
 80014e4:	08005bc4 	.word	0x08005bc4
 80014e8:	20005090 	.word	0x20005090
 80014ec:	20003d08 	.word	0x20003d08
 80014f0:	08005bc8 	.word	0x08005bc8
 80014f4:	08005bd0 	.word	0x08005bd0
 80014f8:	08005bd8 	.word	0x08005bd8
 80014fc:	08005be8 	.word	0x08005be8
 8001500:	20005092 	.word	0x20005092
 8001504:	40020800 	.word	0x40020800
 8001508:	08005bfc 	.word	0x08005bfc
 800150c:	20000122 	.word	0x20000122
 8001510:	08005c10 	.word	0x08005c10

08001514 <Skyla1_Check_Flag>:

void Skyla1_Check_Flag(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	if(skyla1_send_flag != skyla1_array_start){
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <Skyla1_Check_Flag+0xa0>)
 800151c:	881a      	ldrh	r2, [r3, #0]
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <Skyla1_Check_Flag+0xa4>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d042      	beq.n	80015ac <Skyla1_Check_Flag+0x98>
		uint16_t num_bytes;
		if(skyla1_send_flag > skyla1_array_start){
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <Skyla1_Check_Flag+0xa0>)
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <Skyla1_Check_Flag+0xa4>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d918      	bls.n	8001564 <Skyla1_Check_Flag+0x50>
			num_bytes = skyla1_send_flag - skyla1_array_start;
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <Skyla1_Check_Flag+0xa0>)
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <Skyla1_Check_Flag+0xa4>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS1|", 4, 500);
 800153e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001542:	2204      	movs	r2, #4
 8001544:	491d      	ldr	r1, [pc, #116]	; (80015bc <Skyla1_Check_Flag+0xa8>)
 8001546:	481e      	ldr	r0, [pc, #120]	; (80015c0 <Skyla1_Check_Flag+0xac>)
 8001548:	f002 f891 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla1_uart_rxBuffer[skyla1_array_start+1], num_bytes, 500);
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <Skyla1_Check_Flag+0xa4>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <Skyla1_Check_Flag+0xb0>)
 8001554:	1899      	adds	r1, r3, r2
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800155c:	4818      	ldr	r0, [pc, #96]	; (80015c0 <Skyla1_Check_Flag+0xac>)
 800155e:	f002 f886 	bl	800366e <HAL_UART_Transmit>
 8001562:	e01f      	b.n	80015a4 <Skyla1_Check_Flag+0x90>
		}
		else
		{
			num_bytes = skyla1_uart_buffer_size - skyla1_array_start;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <Skyla1_Check_Flag+0xa4>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800156c:	3308      	adds	r3, #8
 800156e:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS1|", 4, 500);
 8001570:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001574:	2204      	movs	r2, #4
 8001576:	4911      	ldr	r1, [pc, #68]	; (80015bc <Skyla1_Check_Flag+0xa8>)
 8001578:	4811      	ldr	r0, [pc, #68]	; (80015c0 <Skyla1_Check_Flag+0xac>)
 800157a:	f002 f878 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla1_uart_rxBuffer[skyla1_array_start+1], num_bytes, 500);
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <Skyla1_Check_Flag+0xa4>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <Skyla1_Check_Flag+0xb0>)
 8001586:	1899      	adds	r1, r3, r2
 8001588:	88fa      	ldrh	r2, [r7, #6]
 800158a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <Skyla1_Check_Flag+0xac>)
 8001590:	f002 f86d 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla1_uart_rxBuffer[0], skyla1_send_flag, 500);
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <Skyla1_Check_Flag+0xa0>)
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800159c:	4909      	ldr	r1, [pc, #36]	; (80015c4 <Skyla1_Check_Flag+0xb0>)
 800159e:	4808      	ldr	r0, [pc, #32]	; (80015c0 <Skyla1_Check_Flag+0xac>)
 80015a0:	f002 f865 	bl	800366e <HAL_UART_Transmit>
		}
		skyla1_array_start = skyla1_send_flag;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <Skyla1_Check_Flag+0xa0>)
 80015a6:	881a      	ldrh	r2, [r3, #0]
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <Skyla1_Check_Flag+0xa4>)
 80015aa:	801a      	strh	r2, [r3, #0]
	}
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20002970 	.word	0x20002970
 80015b8:	2000296c 	.word	0x2000296c
 80015bc:	08005c30 	.word	0x08005c30
 80015c0:	200064b4 	.word	0x200064b4
 80015c4:	200015e4 	.word	0x200015e4

080015c8 <Creed1_Check_Flag>:

void Creed1_Check_Flag(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	if(creed1_send_flag != creed1_array_start){
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <Creed1_Check_Flag+0xa0>)
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <Creed1_Check_Flag+0xa4>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d042      	beq.n	8001660 <Creed1_Check_Flag+0x98>
		uint16_t num_bytes;
		if(creed1_send_flag > creed1_array_start){
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <Creed1_Check_Flag+0xa0>)
 80015dc:	881a      	ldrh	r2, [r3, #0]
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <Creed1_Check_Flag+0xa4>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d918      	bls.n	8001618 <Creed1_Check_Flag+0x50>
			num_bytes = creed1_send_flag - creed1_array_start;
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <Creed1_Check_Flag+0xa0>)
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <Creed1_Check_Flag+0xa4>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC1|", 4, 500);
 80015f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015f6:	2204      	movs	r2, #4
 80015f8:	491d      	ldr	r1, [pc, #116]	; (8001670 <Creed1_Check_Flag+0xa8>)
 80015fa:	481e      	ldr	r0, [pc, #120]	; (8001674 <Creed1_Check_Flag+0xac>)
 80015fc:	f002 f837 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed1_uart_rxBuffer[creed1_array_start+1], num_bytes, 500);
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <Creed1_Check_Flag+0xa4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <Creed1_Check_Flag+0xb0>)
 8001608:	1899      	adds	r1, r3, r2
 800160a:	88fa      	ldrh	r2, [r7, #6]
 800160c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001610:	4818      	ldr	r0, [pc, #96]	; (8001674 <Creed1_Check_Flag+0xac>)
 8001612:	f002 f82c 	bl	800366e <HAL_UART_Transmit>
 8001616:	e01f      	b.n	8001658 <Creed1_Check_Flag+0x90>
		}
		else
		{
			num_bytes = creed1_uart_buffer_size - creed1_array_start;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <Creed1_Check_Flag+0xa4>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8001620:	3308      	adds	r3, #8
 8001622:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC1|", 4, 500);
 8001624:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001628:	2204      	movs	r2, #4
 800162a:	4911      	ldr	r1, [pc, #68]	; (8001670 <Creed1_Check_Flag+0xa8>)
 800162c:	4811      	ldr	r0, [pc, #68]	; (8001674 <Creed1_Check_Flag+0xac>)
 800162e:	f002 f81e 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed1_uart_rxBuffer[creed1_array_start+1], num_bytes, 500);
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <Creed1_Check_Flag+0xa4>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <Creed1_Check_Flag+0xb0>)
 800163a:	1899      	adds	r1, r3, r2
 800163c:	88fa      	ldrh	r2, [r7, #6]
 800163e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <Creed1_Check_Flag+0xac>)
 8001644:	f002 f813 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed1_uart_rxBuffer[0], creed1_send_flag, 500);
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <Creed1_Check_Flag+0xa0>)
 800164a:	881a      	ldrh	r2, [r3, #0]
 800164c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001650:	4909      	ldr	r1, [pc, #36]	; (8001678 <Creed1_Check_Flag+0xb0>)
 8001652:	4808      	ldr	r0, [pc, #32]	; (8001674 <Creed1_Check_Flag+0xac>)
 8001654:	f002 f80b 	bl	800366e <HAL_UART_Transmit>
		}
		creed1_array_start = creed1_send_flag;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <Creed1_Check_Flag+0xa0>)
 800165a:	881a      	ldrh	r2, [r3, #0]
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <Creed1_Check_Flag+0xa4>)
 800165e:	801a      	strh	r2, [r3, #0]
	}
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20003d04 	.word	0x20003d04
 800166c:	20003d00 	.word	0x20003d00
 8001670:	08005c38 	.word	0x08005c38
 8001674:	200064b4 	.word	0x200064b4
 8001678:	20002978 	.word	0x20002978

0800167c <Skyla2_Check_Flag>:

void Skyla2_Check_Flag(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
	if(skyla2_send_flag != skyla2_array_start){
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <Skyla2_Check_Flag+0xa0>)
 8001684:	881a      	ldrh	r2, [r3, #0]
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <Skyla2_Check_Flag+0xa4>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d042      	beq.n	8001714 <Skyla2_Check_Flag+0x98>
		uint16_t num_bytes;
		if(skyla2_send_flag > skyla2_array_start){
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <Skyla2_Check_Flag+0xa0>)
 8001690:	881a      	ldrh	r2, [r3, #0]
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <Skyla2_Check_Flag+0xa4>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d918      	bls.n	80016cc <Skyla2_Check_Flag+0x50>
			num_bytes = skyla2_send_flag - skyla2_array_start;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <Skyla2_Check_Flag+0xa0>)
 800169c:	881a      	ldrh	r2, [r3, #0]
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <Skyla2_Check_Flag+0xa4>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS2|", 4, 500);
 80016a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016aa:	2204      	movs	r2, #4
 80016ac:	491d      	ldr	r1, [pc, #116]	; (8001724 <Skyla2_Check_Flag+0xa8>)
 80016ae:	481e      	ldr	r0, [pc, #120]	; (8001728 <Skyla2_Check_Flag+0xac>)
 80016b0:	f001 ffdd 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla2_uart_rxBuffer[skyla2_array_start+1], num_bytes, 500);
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <Skyla2_Check_Flag+0xa4>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a1c      	ldr	r2, [pc, #112]	; (800172c <Skyla2_Check_Flag+0xb0>)
 80016bc:	1899      	adds	r1, r3, r2
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016c4:	4818      	ldr	r0, [pc, #96]	; (8001728 <Skyla2_Check_Flag+0xac>)
 80016c6:	f001 ffd2 	bl	800366e <HAL_UART_Transmit>
 80016ca:	e01f      	b.n	800170c <Skyla2_Check_Flag+0x90>
		}
		else
		{
			num_bytes = skyla2_uart_buffer_size - skyla2_array_start;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <Skyla2_Check_Flag+0xa4>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80016d4:	3308      	adds	r3, #8
 80016d6:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS2|", 4, 500);
 80016d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016dc:	2204      	movs	r2, #4
 80016de:	4911      	ldr	r1, [pc, #68]	; (8001724 <Skyla2_Check_Flag+0xa8>)
 80016e0:	4811      	ldr	r0, [pc, #68]	; (8001728 <Skyla2_Check_Flag+0xac>)
 80016e2:	f001 ffc4 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla2_uart_rxBuffer[skyla2_array_start+1], num_bytes, 500);
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <Skyla2_Check_Flag+0xa4>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <Skyla2_Check_Flag+0xb0>)
 80016ee:	1899      	adds	r1, r3, r2
 80016f0:	88fa      	ldrh	r2, [r7, #6]
 80016f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016f6:	480c      	ldr	r0, [pc, #48]	; (8001728 <Skyla2_Check_Flag+0xac>)
 80016f8:	f001 ffb9 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla2_uart_rxBuffer[0], skyla2_send_flag, 500);
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <Skyla2_Check_Flag+0xa0>)
 80016fe:	881a      	ldrh	r2, [r3, #0]
 8001700:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001704:	4909      	ldr	r1, [pc, #36]	; (800172c <Skyla2_Check_Flag+0xb0>)
 8001706:	4808      	ldr	r0, [pc, #32]	; (8001728 <Skyla2_Check_Flag+0xac>)
 8001708:	f001 ffb1 	bl	800366e <HAL_UART_Transmit>
		}
		skyla2_array_start = skyla2_send_flag;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <Skyla2_Check_Flag+0xa0>)
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <Skyla2_Check_Flag+0xa4>)
 8001712:	801a      	strh	r2, [r3, #0]
	}
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20005094 	.word	0x20005094
 8001720:	20005090 	.word	0x20005090
 8001724:	08005c40 	.word	0x08005c40
 8001728:	200064b4 	.word	0x200064b4
 800172c:	20003d08 	.word	0x20003d08

08001730 <Creed2_Check_Flag>:

void Creed2_Check_Flag(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	if(creed2_send_flag != creed2_array_start){
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <Creed2_Check_Flag+0xa0>)
 8001738:	881a      	ldrh	r2, [r3, #0]
 800173a:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <Creed2_Check_Flag+0xa4>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d042      	beq.n	80017c8 <Creed2_Check_Flag+0x98>
		uint16_t num_bytes;
		if(creed2_send_flag > creed2_array_start){
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <Creed2_Check_Flag+0xa0>)
 8001744:	881a      	ldrh	r2, [r3, #0]
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <Creed2_Check_Flag+0xa4>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d918      	bls.n	8001780 <Creed2_Check_Flag+0x50>
			num_bytes = creed2_send_flag - creed2_array_start;
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <Creed2_Check_Flag+0xa0>)
 8001750:	881a      	ldrh	r2, [r3, #0]
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <Creed2_Check_Flag+0xa4>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC2|", 4, 500);
 800175a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800175e:	2204      	movs	r2, #4
 8001760:	491d      	ldr	r1, [pc, #116]	; (80017d8 <Creed2_Check_Flag+0xa8>)
 8001762:	481e      	ldr	r0, [pc, #120]	; (80017dc <Creed2_Check_Flag+0xac>)
 8001764:	f001 ff83 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed2_uart_rxBuffer[creed2_array_start+1], num_bytes, 500);
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <Creed2_Check_Flag+0xa4>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <Creed2_Check_Flag+0xb0>)
 8001770:	1899      	adds	r1, r3, r2
 8001772:	88fa      	ldrh	r2, [r7, #6]
 8001774:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001778:	4818      	ldr	r0, [pc, #96]	; (80017dc <Creed2_Check_Flag+0xac>)
 800177a:	f001 ff78 	bl	800366e <HAL_UART_Transmit>
 800177e:	e01f      	b.n	80017c0 <Creed2_Check_Flag+0x90>
		}
		else
		{
			num_bytes = creed2_uart_buffer_size - creed2_array_start;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <Creed2_Check_Flag+0xa4>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8001788:	3308      	adds	r3, #8
 800178a:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC2|", 4, 500);
 800178c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001790:	2204      	movs	r2, #4
 8001792:	4911      	ldr	r1, [pc, #68]	; (80017d8 <Creed2_Check_Flag+0xa8>)
 8001794:	4811      	ldr	r0, [pc, #68]	; (80017dc <Creed2_Check_Flag+0xac>)
 8001796:	f001 ff6a 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed2_uart_rxBuffer[creed2_array_start+1], num_bytes, 500);
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <Creed2_Check_Flag+0xa4>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <Creed2_Check_Flag+0xb0>)
 80017a2:	1899      	adds	r1, r3, r2
 80017a4:	88fa      	ldrh	r2, [r7, #6]
 80017a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017aa:	480c      	ldr	r0, [pc, #48]	; (80017dc <Creed2_Check_Flag+0xac>)
 80017ac:	f001 ff5f 	bl	800366e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed2_uart_rxBuffer[0], creed2_send_flag, 500);
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <Creed2_Check_Flag+0xa0>)
 80017b2:	881a      	ldrh	r2, [r3, #0]
 80017b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b8:	4909      	ldr	r1, [pc, #36]	; (80017e0 <Creed2_Check_Flag+0xb0>)
 80017ba:	4808      	ldr	r0, [pc, #32]	; (80017dc <Creed2_Check_Flag+0xac>)
 80017bc:	f001 ff57 	bl	800366e <HAL_UART_Transmit>
		}
		creed2_array_start = creed2_send_flag;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <Creed2_Check_Flag+0xa0>)
 80017c2:	881a      	ldrh	r2, [r3, #0]
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <Creed2_Check_Flag+0xa4>)
 80017c6:	801a      	strh	r2, [r3, #0]
	}
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20006424 	.word	0x20006424
 80017d4:	20006420 	.word	0x20006420
 80017d8:	08005c48 	.word	0x08005c48
 80017dc:	200064b4 	.word	0x200064b4
 80017e0:	20005098 	.word	0x20005098

080017e4 <Chip_Update>:
* Description: 	This routine update any low level chip functions
* Parameters:  	(none)
* Returns:    	 	(none)
******************************************************************************/
void Chip_Update(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SystemClock_Config>:
* 				files by STM32CubeIDE.
* Parameters:  	(none)
* Returns:     	(none)
******************************************************************************/
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b094      	sub	sp, #80	; 0x50
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	2234      	movs	r2, #52	; 0x34
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f002 ff88 	bl	8004718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <SystemClock_Config+0xd4>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <SystemClock_Config+0xd4>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001826:	6413      	str	r3, [r2, #64]	; 0x40
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <SystemClock_Config+0xd4>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001834:	2300      	movs	r3, #0
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <SystemClock_Config+0xd8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <SystemClock_Config+0xd8>)
 8001842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <SystemClock_Config+0xd8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001854:	2302      	movs	r3, #2
 8001856:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001858:	2301      	movs	r3, #1
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800185c:	2310      	movs	r3, #16
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001860:	2302      	movs	r3, #2
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001864:	2300      	movs	r3, #0
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001868:	2310      	movs	r3, #16
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800186c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001872:	2304      	movs	r3, #4
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001876:	2302      	movs	r3, #2
 8001878:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800187a:	2302      	movs	r3, #2
 800187c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fc08 	bl	8003098 <HAL_RCC_OscConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800188e:	f000 f81f 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001892:	230f      	movs	r3, #15
 8001894:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001896:	2302      	movs	r3, #2
 8001898:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018a8:	f107 0308 	add.w	r3, r7, #8
 80018ac:	2102      	movs	r1, #2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 f8a8 	bl	8002a04 <HAL_RCC_ClockConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80018ba:	f000 f809 	bl	80018d0 <Error_Handler>
  }
}
 80018be:	bf00      	nop
 80018c0:	3750      	adds	r7, #80	; 0x50
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40007000 	.word	0x40007000

080018d0 <Error_Handler>:
* 				in to main.c of generated files by STM32CubeIDE.
* Parameters:  	(none)
* Returns:     	(none)
******************************************************************************/
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  __disable_irq();
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <Error_Handler+0x8>
	...

080018dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <MX_GPIO_Init+0xd4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <MX_GPIO_Init+0xd4>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_GPIO_Init+0xd4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_GPIO_Init+0xd4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <MX_GPIO_Init+0xd4>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_GPIO_Init+0xd4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f640 4102 	movw	r1, #3074	; 0xc02
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <MX_GPIO_Init+0xd8>)
 8001986:	f001 f823 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800198a:	f640 4302 	movw	r3, #3074	; 0xc02
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_GPIO_Init+0xd8>)
 80019a4:	f000 fe80 	bl	80026a8 <HAL_GPIO_Init>

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020800 	.word	0x40020800

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_MspInit+0x4c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_MspInit+0x4c>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019f6:	2007      	movs	r0, #7
 80019f8:	f000 fd82 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 fc40 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <USART1_IRQHandler+0x10>)
 8001a62:	f001 fec7 	bl	80037f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200064b4 	.word	0x200064b4

08001a70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <USART3_IRQHandler+0x10>)
 8001a76:	f001 febd 	bl	80037f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000653c 	.word	0x2000653c

08001a84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <UART4_IRQHandler+0x10>)
 8001a8a:	f001 feb3 	bl	80037f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000642c 	.word	0x2000642c

08001a98 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <UART5_IRQHandler+0x10>)
 8001a9e:	f001 fea9 	bl	80037f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20006470 	.word	0x20006470

08001aac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <USART6_IRQHandler+0x10>)
 8001ab2:	f001 fe9f 	bl	80037f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20006580 	.word	0x20006580

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ada:	f002 fdf3 	bl	80046c4 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b02:	e7fe      	b.n	8001b02 <_exit+0x12>

08001b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00a      	b.n	8001b2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b16:	f3af 8000 	nop.w
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60ba      	str	r2, [r7, #8]
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf0      	blt.n	8001b16 <_read+0x12>
	}

return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e009      	b.n	8001b64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dbf1      	blt.n	8001b50 <_write+0x12>
	}
	return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_close>:

int _close(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_isatty>:

int _isatty(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
	return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f002 fd58 	bl	80046c4 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20020000 	.word	0x20020000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	20006428 	.word	0x20006428
 8001c48:	200065d8 	.word	0x200065d8

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_UART4_Init+0x4c>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <MX_UART4_Init+0x50>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_UART4_Init+0x4c>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_UART4_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_UART4_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_UART4_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_UART4_Init+0x4c>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_UART4_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_UART4_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_UART4_Init+0x4c>)
 8001ca8:	f001 fc94 	bl	80035d4 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001cb2:	f7ff fe0d 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000642c 	.word	0x2000642c
 8001cc0:	40004c00 	.word	0x40004c00

08001cc4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_UART5_Init+0x4c>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <MX_UART5_Init+0x50>)
 8001ccc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_UART5_Init+0x4c>)
 8001cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_UART5_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_UART5_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_UART5_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_UART5_Init+0x4c>)
 8001cea:	220c      	movs	r2, #12
 8001cec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_UART5_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_UART5_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_UART5_Init+0x4c>)
 8001cfc:	f001 fc6a 	bl	80035d4 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001d06:	f7ff fde3 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20006470 	.word	0x20006470
 8001d14:	40005000 	.word	0x40005000

08001d18 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <MX_USART1_UART_Init+0x50>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d50:	f001 fc40 	bl	80035d4 <HAL_UART_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d5a:	f7ff fdb9 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200064b4 	.word	0x200064b4
 8001d68:	40011000 	.word	0x40011000

08001d6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_USART2_UART_Init+0x4c>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <MX_USART2_UART_Init+0x50>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <MX_USART2_UART_Init+0x4c>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_USART2_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_USART2_UART_Init+0x4c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <MX_USART2_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_USART2_UART_Init+0x4c>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <MX_USART2_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_USART2_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_USART2_UART_Init+0x4c>)
 8001da4:	f001 fc16 	bl	80035d4 <HAL_UART_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dae:	f7ff fd8f 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200064f8 	.word	0x200064f8
 8001dbc:	40004400 	.word	0x40004400

08001dc0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USART3_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MX_USART3_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_USART3_UART_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USART3_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USART3_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USART3_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USART3_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USART3_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USART3_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART3_UART_Init+0x4c>)
 8001df8:	f001 fbec 	bl	80035d4 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f7ff fd65 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000653c 	.word	0x2000653c
 8001e10:	40004800 	.word	0x40004800

08001e14 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_USART6_UART_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <MX_USART6_UART_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_USART6_UART_Init+0x4c>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_USART6_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_USART6_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_USART6_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_USART6_UART_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <MX_USART6_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_USART6_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_USART6_UART_Init+0x4c>)
 8001e4c:	f001 fbc2 	bl	80035d4 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e56:	f7ff fd3b 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20006580 	.word	0x20006580
 8001e64:	40011400 	.word	0x40011400

08001e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b096      	sub	sp, #88	; 0x58
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a7e      	ldr	r2, [pc, #504]	; (8002080 <HAL_UART_MspInit+0x218>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d134      	bne.n	8001ef4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8001e8e:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a7c      	ldr	r2, [pc, #496]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b7a      	ldr	r3, [pc, #488]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8001ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eaa:	4b76      	ldr	r3, [pc, #472]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a75      	ldr	r2, [pc, #468]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b73      	ldr	r3, [pc, #460]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001eda:	4619      	mov	r1, r3
 8001edc:	486a      	ldr	r0, [pc, #424]	; (8002088 <HAL_UART_MspInit+0x220>)
 8001ede:	f000 fbe3 	bl	80026a8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2034      	movs	r0, #52	; 0x34
 8001ee8:	f000 fb15 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001eec:	2034      	movs	r0, #52	; 0x34
 8001eee:	f000 fb2e 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ef2:	e167      	b.n	80021c4 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==UART5)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a64      	ldr	r2, [pc, #400]	; (800208c <HAL_UART_MspInit+0x224>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d153      	bne.n	8001fa6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f02:	4b60      	ldr	r3, [pc, #384]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a5f      	ldr	r2, [pc, #380]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f1e:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a58      	ldr	r2, [pc, #352]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b56      	ldr	r3, [pc, #344]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	637b      	str	r3, [r7, #52]	; 0x34
 8001f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
 8001f3a:	4b52      	ldr	r3, [pc, #328]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a51      	ldr	r2, [pc, #324]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f56:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f64:	2308      	movs	r3, #8
 8001f66:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4848      	ldr	r0, [pc, #288]	; (8002090 <HAL_UART_MspInit+0x228>)
 8001f70:	f000 fb9a 	bl	80026a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f74:	2304      	movs	r3, #4
 8001f76:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f84:	2308      	movs	r3, #8
 8001f86:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4841      	ldr	r0, [pc, #260]	; (8002094 <HAL_UART_MspInit+0x22c>)
 8001f90:	f000 fb8a 	bl	80026a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	2035      	movs	r0, #53	; 0x35
 8001f9a:	f000 fabc 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001f9e:	2035      	movs	r0, #53	; 0x35
 8001fa0:	f000 fad5 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001fa4:	e10e      	b.n	80021c4 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a3b      	ldr	r2, [pc, #236]	; (8002098 <HAL_UART_MspInit+0x230>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d135      	bne.n	800201c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb4:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	4a32      	ldr	r2, [pc, #200]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001fba:	f043 0310 	orr.w	r3, r3, #16
 8001fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc0:	4b30      	ldr	r3, [pc, #192]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6313      	str	r3, [r2, #48]	; 0x30
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fe8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002002:	4619      	mov	r1, r3
 8002004:	4820      	ldr	r0, [pc, #128]	; (8002088 <HAL_UART_MspInit+0x220>)
 8002006:	f000 fb4f 	bl	80026a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2025      	movs	r0, #37	; 0x25
 8002010:	f000 fa81 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002014:	2025      	movs	r0, #37	; 0x25
 8002016:	f000 fa9a 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 800201a:	e0d3      	b.n	80021c4 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_UART_MspInit+0x234>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d13c      	bne.n	80020a0 <HAL_UART_MspInit+0x238>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_UART_MspInit+0x21c>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_UART_MspInit+0x21c>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_UART_MspInit+0x21c>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800205e:	230c      	movs	r3, #12
 8002060:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206e:	2307      	movs	r3, #7
 8002070:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002076:	4619      	mov	r1, r3
 8002078:	4803      	ldr	r0, [pc, #12]	; (8002088 <HAL_UART_MspInit+0x220>)
 800207a:	f000 fb15 	bl	80026a8 <HAL_GPIO_Init>
}
 800207e:	e0a1      	b.n	80021c4 <HAL_UART_MspInit+0x35c>
 8002080:	40004c00 	.word	0x40004c00
 8002084:	40023800 	.word	0x40023800
 8002088:	40020000 	.word	0x40020000
 800208c:	40005000 	.word	0x40005000
 8002090:	40020800 	.word	0x40020800
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40011000 	.word	0x40011000
 800209c:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a49      	ldr	r2, [pc, #292]	; (80021cc <HAL_UART_MspInit+0x364>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d153      	bne.n	8002152 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	4b48      	ldr	r3, [pc, #288]	; (80021d0 <HAL_UART_MspInit+0x368>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a47      	ldr	r2, [pc, #284]	; (80021d0 <HAL_UART_MspInit+0x368>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <HAL_UART_MspInit+0x368>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_UART_MspInit+0x368>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <HAL_UART_MspInit+0x368>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <HAL_UART_MspInit+0x368>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <HAL_UART_MspInit+0x368>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a39      	ldr	r2, [pc, #228]	; (80021d0 <HAL_UART_MspInit+0x368>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_UART_MspInit+0x368>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020fe:	2320      	movs	r3, #32
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800210e:	2307      	movs	r3, #7
 8002110:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002112:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002116:	4619      	mov	r1, r3
 8002118:	482e      	ldr	r0, [pc, #184]	; (80021d4 <HAL_UART_MspInit+0x36c>)
 800211a:	f000 fac5 	bl	80026a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800211e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002130:	2307      	movs	r3, #7
 8002132:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002138:	4619      	mov	r1, r3
 800213a:	4827      	ldr	r0, [pc, #156]	; (80021d8 <HAL_UART_MspInit+0x370>)
 800213c:	f000 fab4 	bl	80026a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2027      	movs	r0, #39	; 0x27
 8002146:	f000 f9e6 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800214a:	2027      	movs	r0, #39	; 0x27
 800214c:	f000 f9ff 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8002150:	e038      	b.n	80021c4 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART6)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <HAL_UART_MspInit+0x374>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d133      	bne.n	80021c4 <HAL_UART_MspInit+0x35c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_UART_MspInit+0x368>)
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <HAL_UART_MspInit+0x368>)
 8002166:	f043 0320 	orr.w	r3, r3, #32
 800216a:	6453      	str	r3, [r2, #68]	; 0x44
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_UART_MspInit+0x368>)
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_UART_MspInit+0x368>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <HAL_UART_MspInit+0x368>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6313      	str	r3, [r2, #48]	; 0x30
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_UART_MspInit+0x368>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002194:	23c0      	movs	r3, #192	; 0xc0
 8002196:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021a4:	2308      	movs	r3, #8
 80021a6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021ac:	4619      	mov	r1, r3
 80021ae:	4809      	ldr	r0, [pc, #36]	; (80021d4 <HAL_UART_MspInit+0x36c>)
 80021b0:	f000 fa7a 	bl	80026a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	2047      	movs	r0, #71	; 0x47
 80021ba:	f000 f9ac 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80021be:	2047      	movs	r0, #71	; 0x47
 80021c0:	f000 f9c5 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 80021c4:	bf00      	nop
 80021c6:	3758      	adds	r7, #88	; 0x58
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40004800 	.word	0x40004800
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020400 	.word	0x40020400
 80021dc:	40011400 	.word	0x40011400

080021e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021e6:	490e      	ldr	r1, [pc, #56]	; (8002220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021fc:	4c0b      	ldr	r4, [pc, #44]	; (800222c <LoopFillZerobss+0x26>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800220a:	f7ff fd1f 	bl	8001c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800220e:	f002 fa5f 	bl	80046d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002212:	f7fe fa1d 	bl	8000650 <main>
  bx  lr    
 8002216:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002224:	08005dc0 	.word	0x08005dc0
  ldr r2, =_sbss
 8002228:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800222c:	200065d8 	.word	0x200065d8

08002230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC_IRQHandler>
	...

08002234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <HAL_Init+0x40>)
 800223e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_Init+0x40>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_Init+0x40>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_Init+0x40>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 f94f 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	2000      	movs	r0, #0
 8002264:	f000 f808 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff fba6 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f967 	bl	800256a <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f000 f92f 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000094 	.word	0x20000094
 80022d0:	2000009c 	.word	0x2000009c
 80022d4:	20000098 	.word	0x20000098

080022d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x24>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_IncTick+0x24>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2000009c 	.word	0x2000009c
 80022fc:	200065c4 	.word	0x200065c4

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_GetTick+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	200065c4 	.word	0x200065c4

08002318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff ffee 	bl	8002300 <HAL_GetTick>
 8002324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d005      	beq.n	800233e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_Delay+0x44>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800233e:	bf00      	nop
 8002340:	f7ff ffde 	bl	8002300 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d8f7      	bhi.n	8002340 <HAL_Delay+0x28>
  {
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	2000009c 	.word	0x2000009c

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f7ff ff8e 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff29 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff3e 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff8e 	bl	8002454 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff31 	bl	80023c4 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa2 	bl	80024bc <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff feb6 	bl	8002300 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d008      	beq.n	80025b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e052      	b.n	800265a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0216 	bic.w	r2, r2, #22
 80025c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <HAL_DMA_Abort+0x62>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0208 	bic.w	r2, r2, #8
 80025f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002604:	e013      	b.n	800262e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002606:	f7ff fe7b 	bl	8002300 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b05      	cmp	r3, #5
 8002612:	d90c      	bls.n	800262e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2203      	movs	r2, #3
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e015      	b.n	800265a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e4      	bne.n	8002606 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	223f      	movs	r2, #63	; 0x3f
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d004      	beq.n	8002680 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e00c      	b.n	800269a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2205      	movs	r2, #5
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e165      	b.n	8002990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	f040 8154 	bne.w	800298a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d005      	beq.n	80026fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d130      	bne.n	800275c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2203      	movs	r2, #3
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0201 	and.w	r2, r3, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b03      	cmp	r3, #3
 8002766:	d017      	beq.n	8002798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d123      	bne.n	80027ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3208      	adds	r2, #8
 80027ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0203 	and.w	r2, r3, #3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80ae 	beq.w	800298a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <HAL_GPIO_Init+0x300>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a5c      	ldr	r2, [pc, #368]	; (80029a8 <HAL_GPIO_Init+0x300>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b5a      	ldr	r3, [pc, #360]	; (80029a8 <HAL_GPIO_Init+0x300>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_GPIO_Init+0x304>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4f      	ldr	r2, [pc, #316]	; (80029b0 <HAL_GPIO_Init+0x308>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d025      	beq.n	80028c2 <HAL_GPIO_Init+0x21a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4e      	ldr	r2, [pc, #312]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01f      	beq.n	80028be <HAL_GPIO_Init+0x216>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4d      	ldr	r2, [pc, #308]	; (80029b8 <HAL_GPIO_Init+0x310>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d019      	beq.n	80028ba <HAL_GPIO_Init+0x212>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <HAL_GPIO_Init+0x314>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_GPIO_Init+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4b      	ldr	r2, [pc, #300]	; (80029c0 <HAL_GPIO_Init+0x318>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00d      	beq.n	80028b2 <HAL_GPIO_Init+0x20a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4a      	ldr	r2, [pc, #296]	; (80029c4 <HAL_GPIO_Init+0x31c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d007      	beq.n	80028ae <HAL_GPIO_Init+0x206>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a49      	ldr	r2, [pc, #292]	; (80029c8 <HAL_GPIO_Init+0x320>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_GPIO_Init+0x202>
 80028a6:	2306      	movs	r3, #6
 80028a8:	e00c      	b.n	80028c4 <HAL_GPIO_Init+0x21c>
 80028aa:	2307      	movs	r3, #7
 80028ac:	e00a      	b.n	80028c4 <HAL_GPIO_Init+0x21c>
 80028ae:	2305      	movs	r3, #5
 80028b0:	e008      	b.n	80028c4 <HAL_GPIO_Init+0x21c>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x21c>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e004      	b.n	80028c4 <HAL_GPIO_Init+0x21c>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_Init+0x21c>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x21c>
 80028c2:	2300      	movs	r3, #0
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	f002 0203 	and.w	r2, r2, #3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4093      	lsls	r3, r2
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d4:	4935      	ldr	r1, [pc, #212]	; (80029ac <HAL_GPIO_Init+0x304>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e2:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <HAL_GPIO_Init+0x324>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002906:	4a31      	ldr	r2, [pc, #196]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_GPIO_Init+0x324>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002930:	4a26      	ldr	r2, [pc, #152]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002936:	4b25      	ldr	r3, [pc, #148]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_GPIO_Init+0x324>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002960:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b0f      	cmp	r3, #15
 8002994:	f67f ae96 	bls.w	80026c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40013800 	.word	0x40013800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40021400 	.word	0x40021400
 80029c8:	40021800 	.word	0x40021800
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0cc      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d90c      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b8      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	494d      	ldr	r1, [pc, #308]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d044      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d119      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e067      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae2:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4934      	ldr	r1, [pc, #208]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af4:	f7ff fc04 	bl	8002300 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afc:	f7ff fc00 	bl	8002300 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e04f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 020c 	and.w	r2, r3, #12
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d1eb      	bne.n	8002afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d20c      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e032      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b8a:	f000 f855 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	490a      	ldr	r1, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fb64 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08005c50 	.word	0x08005c50
 8002bc8:	20000094 	.word	0x20000094
 8002bcc:	20000098 	.word	0x20000098

08002bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000094 	.word	0x20000094

08002be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bec:	f7ff fff0 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4903      	ldr	r1, [pc, #12]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08005c60 	.word	0x08005c60

08002c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c14:	f7ff ffdc 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0b5b      	lsrs	r3, r3, #13
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08005c60 	.word	0x08005c60

08002c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c3c:	b0ae      	sub	sp, #184	; 0xb8
 8002c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5e:	4bcb      	ldr	r3, [pc, #812]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	f200 8206 	bhi.w	8003078 <HAL_RCC_GetSysClockFreq+0x440>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002ca9 	.word	0x08002ca9
 8002c78:	08003079 	.word	0x08003079
 8002c7c:	08003079 	.word	0x08003079
 8002c80:	08003079 	.word	0x08003079
 8002c84:	08002cb1 	.word	0x08002cb1
 8002c88:	08003079 	.word	0x08003079
 8002c8c:	08003079 	.word	0x08003079
 8002c90:	08003079 	.word	0x08003079
 8002c94:	08002cb9 	.word	0x08002cb9
 8002c98:	08003079 	.word	0x08003079
 8002c9c:	08003079 	.word	0x08003079
 8002ca0:	08003079 	.word	0x08003079
 8002ca4:	08002ea9 	.word	0x08002ea9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4bb9      	ldr	r3, [pc, #740]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x358>)
 8002caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cae:	e1e7      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cb0:	4bb8      	ldr	r3, [pc, #736]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cb6:	e1e3      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cb8:	4bb4      	ldr	r3, [pc, #720]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc4:	4bb1      	ldr	r3, [pc, #708]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d071      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd0:	4bae      	ldr	r3, [pc, #696]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cdc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	f04f 0000 	mov.w	r0, #0
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	0159      	lsls	r1, r3, #5
 8002d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d08:	0150      	lsls	r0, r2, #5
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4621      	mov	r1, r4
 8002d10:	1a51      	subs	r1, r2, r1
 8002d12:	6439      	str	r1, [r7, #64]	; 0x40
 8002d14:	4629      	mov	r1, r5
 8002d16:	eb63 0301 	sbc.w	r3, r3, r1
 8002d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d28:	4649      	mov	r1, r9
 8002d2a:	018b      	lsls	r3, r1, #6
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d32:	4641      	mov	r1, r8
 8002d34:	018a      	lsls	r2, r1, #6
 8002d36:	4641      	mov	r1, r8
 8002d38:	1a51      	subs	r1, r2, r1
 8002d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d50:	4649      	mov	r1, r9
 8002d52:	00cb      	lsls	r3, r1, #3
 8002d54:	4641      	mov	r1, r8
 8002d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d5a:	4641      	mov	r1, r8
 8002d5c:	00ca      	lsls	r2, r1, #3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	4622      	mov	r2, r4
 8002d66:	189b      	adds	r3, r3, r2
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6a:	462b      	mov	r3, r5
 8002d6c:	460a      	mov	r2, r1
 8002d6e:	eb42 0303 	adc.w	r3, r2, r3
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d80:	4629      	mov	r1, r5
 8002d82:	024b      	lsls	r3, r1, #9
 8002d84:	4621      	mov	r1, r4
 8002d86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	024a      	lsls	r2, r1, #9
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002da0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002da4:	f7fd fa9c 	bl	80002e0 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4613      	mov	r3, r2
 8002dae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db2:	e067      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	4b75      	ldr	r3, [pc, #468]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dc0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002dc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dce:	2300      	movs	r3, #0
 8002dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dd2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	462b      	mov	r3, r5
 8002dda:	f04f 0000 	mov.w	r0, #0
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	0159      	lsls	r1, r3, #5
 8002de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de8:	0150      	lsls	r0, r2, #5
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4621      	mov	r1, r4
 8002df0:	1a51      	subs	r1, r2, r1
 8002df2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002df4:	4629      	mov	r1, r5
 8002df6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e08:	4649      	mov	r1, r9
 8002e0a:	018b      	lsls	r3, r1, #6
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e12:	4641      	mov	r1, r8
 8002e14:	018a      	lsls	r2, r1, #6
 8002e16:	4641      	mov	r1, r8
 8002e18:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e36:	4692      	mov	sl, r2
 8002e38:	469b      	mov	fp, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	eb1a 0303 	adds.w	r3, sl, r3
 8002e40:	623b      	str	r3, [r7, #32]
 8002e42:	462b      	mov	r3, r5
 8002e44:	eb4b 0303 	adc.w	r3, fp, r3
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e56:	4629      	mov	r1, r5
 8002e58:	028b      	lsls	r3, r1, #10
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e60:	4621      	mov	r1, r4
 8002e62:	028a      	lsls	r2, r1, #10
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e70:	677a      	str	r2, [r7, #116]	; 0x74
 8002e72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e76:	f7fd fa33 	bl	80002e0 <__aeabi_uldivmod>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4613      	mov	r3, r2
 8002e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e84:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ea6:	e0eb      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea8:	4b38      	ldr	r3, [pc, #224]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb4:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d06b      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec0:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ed8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002edc:	4622      	mov	r2, r4
 8002ede:	462b      	mov	r3, r5
 8002ee0:	f04f 0000 	mov.w	r0, #0
 8002ee4:	f04f 0100 	mov.w	r1, #0
 8002ee8:	0159      	lsls	r1, r3, #5
 8002eea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eee:	0150      	lsls	r0, r2, #5
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	1a51      	subs	r1, r2, r1
 8002ef8:	61b9      	str	r1, [r7, #24]
 8002efa:	4629      	mov	r1, r5
 8002efc:	eb63 0301 	sbc.w	r3, r3, r1
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f0e:	4659      	mov	r1, fp
 8002f10:	018b      	lsls	r3, r1, #6
 8002f12:	4651      	mov	r1, sl
 8002f14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f18:	4651      	mov	r1, sl
 8002f1a:	018a      	lsls	r2, r1, #6
 8002f1c:	4651      	mov	r1, sl
 8002f1e:	ebb2 0801 	subs.w	r8, r2, r1
 8002f22:	4659      	mov	r1, fp
 8002f24:	eb63 0901 	sbc.w	r9, r3, r1
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f3c:	4690      	mov	r8, r2
 8002f3e:	4699      	mov	r9, r3
 8002f40:	4623      	mov	r3, r4
 8002f42:	eb18 0303 	adds.w	r3, r8, r3
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	462b      	mov	r3, r5
 8002f4a:	eb49 0303 	adc.w	r3, r9, r3
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	024b      	lsls	r3, r1, #9
 8002f60:	4621      	mov	r1, r4
 8002f62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f66:	4621      	mov	r1, r4
 8002f68:	024a      	lsls	r2, r1, #9
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f72:	2200      	movs	r2, #0
 8002f74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f7c:	f7fd f9b0 	bl	80002e0 <__aeabi_uldivmod>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4613      	mov	r3, r2
 8002f86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f8a:	e065      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x420>
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	00f42400 	.word	0x00f42400
 8002f94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f98:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	099b      	lsrs	r3, r3, #6
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa8:	653b      	str	r3, [r7, #80]	; 0x50
 8002faa:	2300      	movs	r3, #0
 8002fac:	657b      	str	r3, [r7, #84]	; 0x54
 8002fae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002fb2:	4642      	mov	r2, r8
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	f04f 0000 	mov.w	r0, #0
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	0159      	lsls	r1, r3, #5
 8002fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc4:	0150      	lsls	r0, r2, #5
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4641      	mov	r1, r8
 8002fcc:	1a51      	subs	r1, r2, r1
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fe4:	4659      	mov	r1, fp
 8002fe6:	018b      	lsls	r3, r1, #6
 8002fe8:	4651      	mov	r1, sl
 8002fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fee:	4651      	mov	r1, sl
 8002ff0:	018a      	lsls	r2, r1, #6
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	1a54      	subs	r4, r2, r1
 8002ff6:	4659      	mov	r1, fp
 8002ff8:	eb63 0501 	sbc.w	r5, r3, r1
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	00eb      	lsls	r3, r5, #3
 8003006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800300a:	00e2      	lsls	r2, r4, #3
 800300c:	4614      	mov	r4, r2
 800300e:	461d      	mov	r5, r3
 8003010:	4643      	mov	r3, r8
 8003012:	18e3      	adds	r3, r4, r3
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	464b      	mov	r3, r9
 8003018:	eb45 0303 	adc.w	r3, r5, r3
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800302a:	4629      	mov	r1, r5
 800302c:	028b      	lsls	r3, r1, #10
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003034:	4621      	mov	r1, r4
 8003036:	028a      	lsls	r2, r1, #10
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003040:	2200      	movs	r2, #0
 8003042:	64bb      	str	r3, [r7, #72]	; 0x48
 8003044:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003046:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800304a:	f7fd f949 	bl	80002e0 <__aeabi_uldivmod>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4613      	mov	r3, r2
 8003054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <HAL_RCC_GetSysClockFreq+0x458>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0f1b      	lsrs	r3, r3, #28
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800306a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003076:	e003      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_GetSysClockFreq+0x45c>)
 800307a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800307e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003084:	4618      	mov	r0, r3
 8003086:	37b8      	adds	r7, #184	; 0xb8
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	00f42400 	.word	0x00f42400

08003098 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e28d      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8083 	beq.w	80031be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030b8:	4b94      	ldr	r3, [pc, #592]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d019      	beq.n	80030f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030c4:	4b91      	ldr	r3, [pc, #580]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030d0:	4b8e      	ldr	r3, [pc, #568]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030dc:	d00c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030de:	4b8b      	ldr	r3, [pc, #556]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d112      	bne.n	8003110 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ea:	4b88      	ldr	r3, [pc, #544]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f6:	d10b      	bne.n	8003110 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	4b84      	ldr	r3, [pc, #528]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d05b      	beq.n	80031bc <HAL_RCC_OscConfig+0x124>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d157      	bne.n	80031bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e25a      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x90>
 800311a:	4b7c      	ldr	r3, [pc, #496]	; (800330c <HAL_RCC_OscConfig+0x274>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a7b      	ldr	r2, [pc, #492]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xcc>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0xb4>
 8003132:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a75      	ldr	r2, [pc, #468]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b73      	ldr	r3, [pc, #460]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a72      	ldr	r2, [pc, #456]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xcc>
 800314c:	4b6f      	ldr	r3, [pc, #444]	; (800330c <HAL_RCC_OscConfig+0x274>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6e      	ldr	r2, [pc, #440]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b6c      	ldr	r3, [pc, #432]	; (800330c <HAL_RCC_OscConfig+0x274>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6b      	ldr	r2, [pc, #428]	; (800330c <HAL_RCC_OscConfig+0x274>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7ff f8c8 	bl	8002300 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003174:	f7ff f8c4 	bl	8002300 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e21f      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b61      	ldr	r3, [pc, #388]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xdc>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7ff f8b4 	bl	8002300 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319c:	f7ff f8b0 	bl	8002300 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e20b      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b57      	ldr	r3, [pc, #348]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x104>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d06f      	beq.n	80032aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ca:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d017      	beq.n	8003206 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031d6:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d105      	bne.n	80031ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031e2:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d11c      	bne.n	8003234 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fa:	4b44      	ldr	r3, [pc, #272]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d116      	bne.n	8003234 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x186>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1d3      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4937      	ldr	r1, [pc, #220]	; (800330c <HAL_RCC_OscConfig+0x274>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	e03a      	b.n	80032aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCC_OscConfig+0x278>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7ff f85d 	bl	8002300 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324a:	f7ff f859 	bl	8002300 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e1b4      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_RCC_OscConfig+0x274>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCC_OscConfig+0x274>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4925      	ldr	r1, [pc, #148]	; (800330c <HAL_RCC_OscConfig+0x274>)
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
 800327c:	e015      	b.n	80032aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x278>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7ff f83c 	bl	8002300 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328c:	f7ff f838 	bl	8002300 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e193      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d036      	beq.n	8003324 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d016      	beq.n	80032ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7ff f81c 	bl	8002300 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032cc:	f7ff f818 	bl	8002300 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e173      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_OscConfig+0x274>)
 80032e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x234>
 80032ea:	e01b      	b.n	8003324 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7ff f805 	bl	8002300 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	e00e      	b.n	8003318 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fa:	f7ff f801 	bl	8002300 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d907      	bls.n	8003318 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e15c      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
 800330c:	40023800 	.word	0x40023800
 8003310:	42470000 	.word	0x42470000
 8003314:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	4b8a      	ldr	r3, [pc, #552]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 800331a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ea      	bne.n	80032fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8097 	beq.w	8003460 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003336:	4b83      	ldr	r3, [pc, #524]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	4b7f      	ldr	r3, [pc, #508]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a7e      	ldr	r2, [pc, #504]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
 8003352:	4b7c      	ldr	r3, [pc, #496]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335e:	2301      	movs	r3, #1
 8003360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003362:	4b79      	ldr	r3, [pc, #484]	; (8003548 <HAL_RCC_OscConfig+0x4b0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x4b0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x4b0>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337a:	f7fe ffc1 	bl	8002300 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fe ffbd 	bl	8002300 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e118      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x4b0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x31e>
 80033a8:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a65      	ldr	r2, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	e01c      	b.n	80033f0 <HAL_RCC_OscConfig+0x358>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x340>
 80033be:	4b61      	ldr	r3, [pc, #388]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	4a60      	ldr	r2, [pc, #384]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ca:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a5d      	ldr	r2, [pc, #372]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0x358>
 80033d8:	4b5a      	ldr	r3, [pc, #360]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a59      	ldr	r2, [pc, #356]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	4b57      	ldr	r3, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a56      	ldr	r2, [pc, #344]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe ff82 	bl	8002300 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fe ff7e 	bl	8002300 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0d7      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003416:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ee      	beq.n	8003400 <HAL_RCC_OscConfig+0x368>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7fe ff6c 	bl	8002300 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342a:	e00a      	b.n	8003442 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fe ff68 	bl	8002300 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e0c1      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003442:	4b40      	ldr	r3, [pc, #256]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ee      	bne.n	800342c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003454:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	4a3a      	ldr	r2, [pc, #232]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80ad 	beq.w	80035c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b08      	cmp	r3, #8
 8003474:	d060      	beq.n	8003538 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d145      	bne.n	800350a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_RCC_OscConfig+0x4b4>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe ff3c 	bl	8002300 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe ff38 	bl	8002300 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e093      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	071b      	lsls	r3, r3, #28
 80034d6:	491b      	ldr	r1, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x4b4>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fe ff0d 	bl	8002300 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe ff09 	bl	8002300 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e064      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x452>
 8003508:	e05c      	b.n	80035c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCC_OscConfig+0x4b4>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fef6 	bl	8002300 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003518:	f7fe fef2 	bl	8002300 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e04d      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_OscConfig+0x4ac>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x480>
 8003536:	e045      	b.n	80035c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e040      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
 8003544:	40023800 	.word	0x40023800
 8003548:	40007000 	.word	0x40007000
 800354c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003550:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <HAL_RCC_OscConfig+0x538>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d030      	beq.n	80035c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d129      	bne.n	80035c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d122      	bne.n	80035c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003586:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003588:	4293      	cmp	r3, r2
 800358a:	d119      	bne.n	80035c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	3b01      	subs	r3, #1
 800359a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d10f      	bne.n	80035c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d107      	bne.n	80035c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800

080035d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e03f      	b.n	8003666 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fe fc34 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fddf 	bl	80041dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800364c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b08a      	sub	sp, #40	; 0x28
 8003672:	af02      	add	r7, sp, #8
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b20      	cmp	r3, #32
 800368c:	d17c      	bne.n	8003788 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_UART_Transmit+0x2c>
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e075      	b.n	800378a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Transmit+0x3e>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e06e      	b.n	800378a <HAL_UART_Transmit+0x11c>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2221      	movs	r2, #33	; 0x21
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c2:	f7fe fe1d 	bl	8002300 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036dc:	d108      	bne.n	80036f0 <HAL_UART_Transmit+0x82>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e003      	b.n	80036f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003700:	e02a      	b.n	8003758 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fb1f 	bl	8003d50 <UART_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e036      	b.n	800378a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e007      	b.n	800374a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cf      	bne.n	8003702 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	; 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 faef 	bl	8003d50 <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e006      	b.n	800378a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	4613      	mov	r3, r2
 800379e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d11d      	bne.n	80037e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_UART_Receive_IT+0x26>
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e016      	b.n	80037ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Receive_IT+0x38>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e00f      	b.n	80037ea <HAL_UART_Receive_IT+0x58>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	461a      	mov	r2, r3
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fb24 	bl	8003e2c <UART_Start_Receive_IT>
 80037e4:	4603      	mov	r3, r0
 80037e6:	e000      	b.n	80037ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b0ba      	sub	sp, #232	; 0xe8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10f      	bne.n	800385a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800383a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_UART_IRQHandler+0x66>
 8003846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fc07 	bl	8004066 <UART_Receive_IT>
      return;
 8003858:	e256      	b.n	8003d08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800385a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80de 	beq.w	8003a20 <HAL_UART_IRQHandler+0x22c>
 8003864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003874:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80d1 	beq.w	8003a20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800387e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_UART_IRQHandler+0xae>
 800388a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_UART_IRQHandler+0xd2>
 80038ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0202 	orr.w	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_UART_IRQHandler+0xf6>
 80038d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f043 0204 	orr.w	r2, r3, #4
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d011      	beq.n	800391a <HAL_UART_IRQHandler+0x126>
 80038f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f043 0208 	orr.w	r2, r3, #8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 81ed 	beq.w	8003cfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_UART_IRQHandler+0x14e>
 8003930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fb92 	bl	8004066 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <HAL_UART_IRQHandler+0x17a>
 8003966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d04f      	beq.n	8003a0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa9a 	bl	8003ea8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d141      	bne.n	8003a06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3314      	adds	r3, #20
 8003988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800399c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1d9      	bne.n	8003982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d013      	beq.n	80039fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	4a7d      	ldr	r2, [pc, #500]	; (8003bd0 <HAL_UART_IRQHandler+0x3dc>)
 80039dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fe3d 	bl	8002662 <HAL_DMA_Abort_IT>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f8:	4610      	mov	r0, r2
 80039fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	e00e      	b.n	8003a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f990 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	e00a      	b.n	8003a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f98c 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	e006      	b.n	8003a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f988 	bl	8003d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a1a:	e170      	b.n	8003cfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	bf00      	nop
    return;
 8003a1e:	e16e      	b.n	8003cfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	f040 814a 	bne.w	8003cbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8143 	beq.w	8003cbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 813c 	beq.w	8003cbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b40      	cmp	r3, #64	; 0x40
 8003a68:	f040 80b4 	bne.w	8003bd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8140 	beq.w	8003d02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	f080 8139 	bcs.w	8003d02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa2:	f000 8088 	beq.w	8003bb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	330c      	adds	r3, #12
 8003ace:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1d9      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e1      	bne.n	8003af2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3314      	adds	r3, #20
 8003b34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3314      	adds	r3, #20
 8003b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e3      	bne.n	8003b2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b86:	f023 0310 	bic.w	r3, r3, #16
 8003b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b98:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e3      	bne.n	8003b74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fce6 	bl	8002582 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8b6 	bl	8003d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bcc:	e099      	b.n	8003d02 <HAL_UART_IRQHandler+0x50e>
 8003bce:	bf00      	nop
 8003bd0:	08003f6f 	.word	0x08003f6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 808b 	beq.w	8003d06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8086 	beq.w	8003d06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	330c      	adds	r3, #12
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c1e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e3      	bne.n	8003bfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	623b      	str	r3, [r7, #32]
   return(result);
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3314      	adds	r3, #20
 8003c52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c56:	633a      	str	r2, [r7, #48]	; 0x30
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e3      	bne.n	8003c32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	330c      	adds	r3, #12
 8003c7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0310 	bic.w	r3, r3, #16
 8003c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c9c:	61fa      	str	r2, [r7, #28]
 8003c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	69b9      	ldr	r1, [r7, #24]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e3      	bne.n	8003c78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f83e 	bl	8003d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cbc:	e023      	b.n	8003d06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_UART_IRQHandler+0x4ea>
 8003cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f95d 	bl	8003f96 <UART_Transmit_IT>
    return;
 8003cdc:	e014      	b.n	8003d08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00e      	beq.n	8003d08 <HAL_UART_IRQHandler+0x514>
 8003cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f99d 	bl	8004036 <UART_EndTransmit_IT>
    return;
 8003cfc:	e004      	b.n	8003d08 <HAL_UART_IRQHandler+0x514>
    return;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <HAL_UART_IRQHandler+0x514>
      return;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <HAL_UART_IRQHandler+0x514>
      return;
 8003d06:	bf00      	nop
  }
}
 8003d08:	37e8      	adds	r7, #232	; 0xe8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop

08003d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b090      	sub	sp, #64	; 0x40
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d60:	e050      	b.n	8003e04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d04c      	beq.n	8003e04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d70:	f7fe fac6 	bl	8002300 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d241      	bcs.n	8003e04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003da0:	637a      	str	r2, [r7, #52]	; 0x34
 8003da2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e5      	bne.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3314      	adds	r3, #20
 8003dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd4:	623a      	str	r2, [r7, #32]
 8003dd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	69f9      	ldr	r1, [r7, #28]
 8003dda:	6a3a      	ldr	r2, [r7, #32]
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e5      	bne.n	8003db4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e00f      	b.n	8003e24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d09f      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3740      	adds	r7, #64	; 0x40
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2222      	movs	r2, #34	; 0x22
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0220 	orr.w	r2, r2, #32
 8003e98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b095      	sub	sp, #84	; 0x54
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ed0:	643a      	str	r2, [r7, #64]	; 0x40
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e5      	bne.n	8003eb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3314      	adds	r3, #20
 8003eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3314      	adds	r3, #20
 8003f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e5      	bne.n	8003ee4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d119      	bne.n	8003f54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f023 0310 	bic.w	r3, r3, #16
 8003f36:	647b      	str	r3, [r7, #68]	; 0x44
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f40:	61ba      	str	r2, [r7, #24]
 8003f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e5      	bne.n	8003f20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f62:	bf00      	nop
 8003f64:	3754      	adds	r7, #84	; 0x54
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff fecb 	bl	8003d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b21      	cmp	r3, #33	; 0x21
 8003fa8:	d13e      	bne.n	8004028 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	d114      	bne.n	8003fde <UART_Transmit_IT+0x48>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d110      	bne.n	8003fde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	621a      	str	r2, [r3, #32]
 8003fdc:	e008      	b.n	8003ff0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6211      	str	r1, [r2, #32]
 8003fe8:	781a      	ldrb	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10f      	bne.n	8004024 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004012:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004022:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fe5a 	bl	8003d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b08c      	sub	sp, #48	; 0x30
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b22      	cmp	r3, #34	; 0x22
 8004078:	f040 80ab 	bne.w	80041d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004084:	d117      	bne.n	80040b6 <UART_Receive_IT+0x50>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d113      	bne.n	80040b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
 80040b4:	e026      	b.n	8004104 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c8:	d007      	beq.n	80040da <UART_Receive_IT+0x74>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <UART_Receive_IT+0x82>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e008      	b.n	80040fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29b      	uxth	r3, r3
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4619      	mov	r1, r3
 8004112:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004114:	2b00      	cmp	r3, #0
 8004116:	d15a      	bne.n	80041ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0220 	bic.w	r2, r2, #32
 8004126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	2b01      	cmp	r3, #1
 8004156:	d135      	bne.n	80041c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	613b      	str	r3, [r7, #16]
   return(result);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f023 0310 	bic.w	r3, r3, #16
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417e:	623a      	str	r2, [r7, #32]
 8004180:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	69f9      	ldr	r1, [r7, #28]
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	61bb      	str	r3, [r7, #24]
   return(result);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d10a      	bne.n	80041b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ba:	4619      	mov	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff fdbb 	bl	8003d38 <HAL_UARTEx_RxEventCallback>
 80041c2:	e002      	b.n	80041ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fc fa93 	bl	80006f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e002      	b.n	80041d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
  }
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3730      	adds	r7, #48	; 0x30
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b0c0      	sub	sp, #256	; 0x100
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	68d9      	ldr	r1, [r3, #12]
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	ea40 0301 	orr.w	r3, r0, r1
 8004204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	431a      	orrs	r2, r3
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	431a      	orrs	r2, r3
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004234:	f021 010c 	bic.w	r1, r1, #12
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004242:	430b      	orrs	r3, r1
 8004244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	6999      	ldr	r1, [r3, #24]
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	ea40 0301 	orr.w	r3, r0, r1
 8004262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b8f      	ldr	r3, [pc, #572]	; (80044a8 <UART_SetConfig+0x2cc>)
 800426c:	429a      	cmp	r2, r3
 800426e:	d005      	beq.n	800427c <UART_SetConfig+0xa0>
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4b8d      	ldr	r3, [pc, #564]	; (80044ac <UART_SetConfig+0x2d0>)
 8004278:	429a      	cmp	r2, r3
 800427a:	d104      	bne.n	8004286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800427c:	f7fe fcc8 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8004280:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004284:	e003      	b.n	800428e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004286:	f7fe fcaf 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 800428a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004298:	f040 810c 	bne.w	80044b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800429c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	1891      	adds	r1, r2, r2
 80042b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80042b6:	415b      	adcs	r3, r3
 80042b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042be:	4621      	mov	r1, r4
 80042c0:	eb12 0801 	adds.w	r8, r2, r1
 80042c4:	4629      	mov	r1, r5
 80042c6:	eb43 0901 	adc.w	r9, r3, r1
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042de:	4690      	mov	r8, r2
 80042e0:	4699      	mov	r9, r3
 80042e2:	4623      	mov	r3, r4
 80042e4:	eb18 0303 	adds.w	r3, r8, r3
 80042e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042ec:	462b      	mov	r3, r5
 80042ee:	eb49 0303 	adc.w	r3, r9, r3
 80042f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004302:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800430a:	460b      	mov	r3, r1
 800430c:	18db      	adds	r3, r3, r3
 800430e:	653b      	str	r3, [r7, #80]	; 0x50
 8004310:	4613      	mov	r3, r2
 8004312:	eb42 0303 	adc.w	r3, r2, r3
 8004316:	657b      	str	r3, [r7, #84]	; 0x54
 8004318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800431c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004320:	f7fb ffde 	bl	80002e0 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <UART_SetConfig+0x2d4>)
 800432a:	fba3 2302 	umull	r2, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	011c      	lsls	r4, r3, #4
 8004332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800433c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	1891      	adds	r1, r2, r2
 800434a:	64b9      	str	r1, [r7, #72]	; 0x48
 800434c:	415b      	adcs	r3, r3
 800434e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004354:	4641      	mov	r1, r8
 8004356:	eb12 0a01 	adds.w	sl, r2, r1
 800435a:	4649      	mov	r1, r9
 800435c:	eb43 0b01 	adc.w	fp, r3, r1
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800436c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004374:	4692      	mov	sl, r2
 8004376:	469b      	mov	fp, r3
 8004378:	4643      	mov	r3, r8
 800437a:	eb1a 0303 	adds.w	r3, sl, r3
 800437e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004382:	464b      	mov	r3, r9
 8004384:	eb4b 0303 	adc.w	r3, fp, r3
 8004388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004398:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800439c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043a0:	460b      	mov	r3, r1
 80043a2:	18db      	adds	r3, r3, r3
 80043a4:	643b      	str	r3, [r7, #64]	; 0x40
 80043a6:	4613      	mov	r3, r2
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	647b      	str	r3, [r7, #68]	; 0x44
 80043ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043b6:	f7fb ff93 	bl	80002e0 <__aeabi_uldivmod>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <UART_SetConfig+0x2d4>)
 80043c2:	fba3 2301 	umull	r2, r3, r3, r1
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2264      	movs	r2, #100	; 0x64
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	1acb      	subs	r3, r1, r3
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <UART_SetConfig+0x2d4>)
 80043d8:	fba3 2302 	umull	r2, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043e4:	441c      	add	r4, r3
 80043e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004400:	415b      	adcs	r3, r3
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004408:	4641      	mov	r1, r8
 800440a:	1851      	adds	r1, r2, r1
 800440c:	6339      	str	r1, [r7, #48]	; 0x30
 800440e:	4649      	mov	r1, r9
 8004410:	414b      	adcs	r3, r1
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004420:	4659      	mov	r1, fp
 8004422:	00cb      	lsls	r3, r1, #3
 8004424:	4651      	mov	r1, sl
 8004426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442a:	4651      	mov	r1, sl
 800442c:	00ca      	lsls	r2, r1, #3
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	4603      	mov	r3, r0
 8004434:	4642      	mov	r2, r8
 8004436:	189b      	adds	r3, r3, r2
 8004438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800443c:	464b      	mov	r3, r9
 800443e:	460a      	mov	r2, r1
 8004440:	eb42 0303 	adc.w	r3, r2, r3
 8004444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004454:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800445c:	460b      	mov	r3, r1
 800445e:	18db      	adds	r3, r3, r3
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
 8004462:	4613      	mov	r3, r2
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800446e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004472:	f7fb ff35 	bl	80002e0 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <UART_SetConfig+0x2d4>)
 800447c:	fba3 1302 	umull	r1, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	2164      	movs	r1, #100	; 0x64
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	3332      	adds	r3, #50	; 0x32
 800448e:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <UART_SetConfig+0x2d4>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	f003 0207 	and.w	r2, r3, #7
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4422      	add	r2, r4
 80044a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044a4:	e105      	b.n	80046b2 <UART_SetConfig+0x4d6>
 80044a6:	bf00      	nop
 80044a8:	40011000 	.word	0x40011000
 80044ac:	40011400 	.word	0x40011400
 80044b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044c6:	4642      	mov	r2, r8
 80044c8:	464b      	mov	r3, r9
 80044ca:	1891      	adds	r1, r2, r2
 80044cc:	6239      	str	r1, [r7, #32]
 80044ce:	415b      	adcs	r3, r3
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
 80044d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044d6:	4641      	mov	r1, r8
 80044d8:	1854      	adds	r4, r2, r1
 80044da:	4649      	mov	r1, r9
 80044dc:	eb43 0501 	adc.w	r5, r3, r1
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	00eb      	lsls	r3, r5, #3
 80044ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ee:	00e2      	lsls	r2, r4, #3
 80044f0:	4614      	mov	r4, r2
 80044f2:	461d      	mov	r5, r3
 80044f4:	4643      	mov	r3, r8
 80044f6:	18e3      	adds	r3, r4, r3
 80044f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044fc:	464b      	mov	r3, r9
 80044fe:	eb45 0303 	adc.w	r3, r5, r3
 8004502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004522:	4629      	mov	r1, r5
 8004524:	008b      	lsls	r3, r1, #2
 8004526:	4621      	mov	r1, r4
 8004528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452c:	4621      	mov	r1, r4
 800452e:	008a      	lsls	r2, r1, #2
 8004530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004534:	f7fb fed4 	bl	80002e0 <__aeabi_uldivmod>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4b60      	ldr	r3, [pc, #384]	; (80046c0 <UART_SetConfig+0x4e4>)
 800453e:	fba3 2302 	umull	r2, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	011c      	lsls	r4, r3, #4
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004550:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	1891      	adds	r1, r2, r2
 800455e:	61b9      	str	r1, [r7, #24]
 8004560:	415b      	adcs	r3, r3
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004568:	4641      	mov	r1, r8
 800456a:	1851      	adds	r1, r2, r1
 800456c:	6139      	str	r1, [r7, #16]
 800456e:	4649      	mov	r1, r9
 8004570:	414b      	adcs	r3, r1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004580:	4659      	mov	r1, fp
 8004582:	00cb      	lsls	r3, r1, #3
 8004584:	4651      	mov	r1, sl
 8004586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458a:	4651      	mov	r1, sl
 800458c:	00ca      	lsls	r2, r1, #3
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	4603      	mov	r3, r0
 8004594:	4642      	mov	r2, r8
 8004596:	189b      	adds	r3, r3, r2
 8004598:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800459c:	464b      	mov	r3, r9
 800459e:	460a      	mov	r2, r1
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80045b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045c0:	4649      	mov	r1, r9
 80045c2:	008b      	lsls	r3, r1, #2
 80045c4:	4641      	mov	r1, r8
 80045c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ca:	4641      	mov	r1, r8
 80045cc:	008a      	lsls	r2, r1, #2
 80045ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045d2:	f7fb fe85 	bl	80002e0 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <UART_SetConfig+0x4e4>)
 80045dc:	fba3 1302 	umull	r1, r3, r3, r2
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	2164      	movs	r1, #100	; 0x64
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	3332      	adds	r3, #50	; 0x32
 80045ee:	4a34      	ldr	r2, [pc, #208]	; (80046c0 <UART_SetConfig+0x4e4>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fa:	441c      	add	r4, r3
 80045fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004600:	2200      	movs	r2, #0
 8004602:	673b      	str	r3, [r7, #112]	; 0x70
 8004604:	677a      	str	r2, [r7, #116]	; 0x74
 8004606:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800460a:	4642      	mov	r2, r8
 800460c:	464b      	mov	r3, r9
 800460e:	1891      	adds	r1, r2, r2
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	415b      	adcs	r3, r3
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800461a:	4641      	mov	r1, r8
 800461c:	1851      	adds	r1, r2, r1
 800461e:	6039      	str	r1, [r7, #0]
 8004620:	4649      	mov	r1, r9
 8004622:	414b      	adcs	r3, r1
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004632:	4659      	mov	r1, fp
 8004634:	00cb      	lsls	r3, r1, #3
 8004636:	4651      	mov	r1, sl
 8004638:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463c:	4651      	mov	r1, sl
 800463e:	00ca      	lsls	r2, r1, #3
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	4603      	mov	r3, r0
 8004646:	4642      	mov	r2, r8
 8004648:	189b      	adds	r3, r3, r2
 800464a:	66bb      	str	r3, [r7, #104]	; 0x68
 800464c:	464b      	mov	r3, r9
 800464e:	460a      	mov	r2, r1
 8004650:	eb42 0303 	adc.w	r3, r2, r3
 8004654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	663b      	str	r3, [r7, #96]	; 0x60
 8004660:	667a      	str	r2, [r7, #100]	; 0x64
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800466e:	4649      	mov	r1, r9
 8004670:	008b      	lsls	r3, r1, #2
 8004672:	4641      	mov	r1, r8
 8004674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004678:	4641      	mov	r1, r8
 800467a:	008a      	lsls	r2, r1, #2
 800467c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004680:	f7fb fe2e 	bl	80002e0 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <UART_SetConfig+0x4e4>)
 800468a:	fba3 1302 	umull	r1, r3, r3, r2
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2164      	movs	r1, #100	; 0x64
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	3332      	adds	r3, #50	; 0x32
 800469c:	4a08      	ldr	r2, [pc, #32]	; (80046c0 <UART_SetConfig+0x4e4>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4422      	add	r2, r4
 80046b0:	609a      	str	r2, [r3, #8]
}
 80046b2:	bf00      	nop
 80046b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046b8:	46bd      	mov	sp, r7
 80046ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046be:	bf00      	nop
 80046c0:	51eb851f 	.word	0x51eb851f

080046c4 <__errno>:
 80046c4:	4b01      	ldr	r3, [pc, #4]	; (80046cc <__errno+0x8>)
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	200000a0 	.word	0x200000a0

080046d0 <__libc_init_array>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	4d0d      	ldr	r5, [pc, #52]	; (8004708 <__libc_init_array+0x38>)
 80046d4:	4c0d      	ldr	r4, [pc, #52]	; (800470c <__libc_init_array+0x3c>)
 80046d6:	1b64      	subs	r4, r4, r5
 80046d8:	10a4      	asrs	r4, r4, #2
 80046da:	2600      	movs	r6, #0
 80046dc:	42a6      	cmp	r6, r4
 80046de:	d109      	bne.n	80046f4 <__libc_init_array+0x24>
 80046e0:	4d0b      	ldr	r5, [pc, #44]	; (8004710 <__libc_init_array+0x40>)
 80046e2:	4c0c      	ldr	r4, [pc, #48]	; (8004714 <__libc_init_array+0x44>)
 80046e4:	f001 f8ae 	bl	8005844 <_init>
 80046e8:	1b64      	subs	r4, r4, r5
 80046ea:	10a4      	asrs	r4, r4, #2
 80046ec:	2600      	movs	r6, #0
 80046ee:	42a6      	cmp	r6, r4
 80046f0:	d105      	bne.n	80046fe <__libc_init_array+0x2e>
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f8:	4798      	blx	r3
 80046fa:	3601      	adds	r6, #1
 80046fc:	e7ee      	b.n	80046dc <__libc_init_array+0xc>
 80046fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004702:	4798      	blx	r3
 8004704:	3601      	adds	r6, #1
 8004706:	e7f2      	b.n	80046ee <__libc_init_array+0x1e>
 8004708:	08005db8 	.word	0x08005db8
 800470c:	08005db8 	.word	0x08005db8
 8004710:	08005db8 	.word	0x08005db8
 8004714:	08005dbc 	.word	0x08005dbc

08004718 <memset>:
 8004718:	4402      	add	r2, r0
 800471a:	4603      	mov	r3, r0
 800471c:	4293      	cmp	r3, r2
 800471e:	d100      	bne.n	8004722 <memset+0xa>
 8004720:	4770      	bx	lr
 8004722:	f803 1b01 	strb.w	r1, [r3], #1
 8004726:	e7f9      	b.n	800471c <memset+0x4>

08004728 <strcat>:
 8004728:	b510      	push	{r4, lr}
 800472a:	4602      	mov	r2, r0
 800472c:	7814      	ldrb	r4, [r2, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	3201      	adds	r2, #1
 8004732:	2c00      	cmp	r4, #0
 8004734:	d1fa      	bne.n	800472c <strcat+0x4>
 8004736:	3b01      	subs	r3, #1
 8004738:	f811 2b01 	ldrb.w	r2, [r1], #1
 800473c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004740:	2a00      	cmp	r2, #0
 8004742:	d1f9      	bne.n	8004738 <strcat+0x10>
 8004744:	bd10      	pop	{r4, pc}

08004746 <strncpy>:
 8004746:	b510      	push	{r4, lr}
 8004748:	3901      	subs	r1, #1
 800474a:	4603      	mov	r3, r0
 800474c:	b132      	cbz	r2, 800475c <strncpy+0x16>
 800474e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004752:	f803 4b01 	strb.w	r4, [r3], #1
 8004756:	3a01      	subs	r2, #1
 8004758:	2c00      	cmp	r4, #0
 800475a:	d1f7      	bne.n	800474c <strncpy+0x6>
 800475c:	441a      	add	r2, r3
 800475e:	2100      	movs	r1, #0
 8004760:	4293      	cmp	r3, r2
 8004762:	d100      	bne.n	8004766 <strncpy+0x20>
 8004764:	bd10      	pop	{r4, pc}
 8004766:	f803 1b01 	strb.w	r1, [r3], #1
 800476a:	e7f9      	b.n	8004760 <strncpy+0x1a>

0800476c <strstr>:
 800476c:	780a      	ldrb	r2, [r1, #0]
 800476e:	b570      	push	{r4, r5, r6, lr}
 8004770:	b96a      	cbnz	r2, 800478e <strstr+0x22>
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	429a      	cmp	r2, r3
 8004776:	d109      	bne.n	800478c <strstr+0x20>
 8004778:	460c      	mov	r4, r1
 800477a:	4605      	mov	r5, r0
 800477c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f6      	beq.n	8004772 <strstr+0x6>
 8004784:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004788:	429e      	cmp	r6, r3
 800478a:	d0f7      	beq.n	800477c <strstr+0x10>
 800478c:	3001      	adds	r0, #1
 800478e:	7803      	ldrb	r3, [r0, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ef      	bne.n	8004774 <strstr+0x8>
 8004794:	4618      	mov	r0, r3
 8004796:	e7ec      	b.n	8004772 <strstr+0x6>

08004798 <strtok>:
 8004798:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <strtok+0x5c>)
 800479a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800479c:	681e      	ldr	r6, [r3, #0]
 800479e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80047a0:	4605      	mov	r5, r0
 80047a2:	b9fc      	cbnz	r4, 80047e4 <strtok+0x4c>
 80047a4:	2050      	movs	r0, #80	; 0x50
 80047a6:	9101      	str	r1, [sp, #4]
 80047a8:	f000 f882 	bl	80048b0 <malloc>
 80047ac:	9901      	ldr	r1, [sp, #4]
 80047ae:	65b0      	str	r0, [r6, #88]	; 0x58
 80047b0:	4602      	mov	r2, r0
 80047b2:	b920      	cbnz	r0, 80047be <strtok+0x26>
 80047b4:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <strtok+0x60>)
 80047b6:	4811      	ldr	r0, [pc, #68]	; (80047fc <strtok+0x64>)
 80047b8:	2157      	movs	r1, #87	; 0x57
 80047ba:	f000 f849 	bl	8004850 <__assert_func>
 80047be:	e9c0 4400 	strd	r4, r4, [r0]
 80047c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80047c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80047ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80047ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80047d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80047d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80047da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80047de:	6184      	str	r4, [r0, #24]
 80047e0:	7704      	strb	r4, [r0, #28]
 80047e2:	6244      	str	r4, [r0, #36]	; 0x24
 80047e4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80047e6:	2301      	movs	r3, #1
 80047e8:	4628      	mov	r0, r5
 80047ea:	b002      	add	sp, #8
 80047ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047f0:	f000 b806 	b.w	8004800 <__strtok_r>
 80047f4:	200000a0 	.word	0x200000a0
 80047f8:	08005c6c 	.word	0x08005c6c
 80047fc:	08005c83 	.word	0x08005c83

08004800 <__strtok_r>:
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004802:	b908      	cbnz	r0, 8004808 <__strtok_r+0x8>
 8004804:	6810      	ldr	r0, [r2, #0]
 8004806:	b188      	cbz	r0, 800482c <__strtok_r+0x2c>
 8004808:	4604      	mov	r4, r0
 800480a:	4620      	mov	r0, r4
 800480c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004810:	460f      	mov	r7, r1
 8004812:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004816:	b91e      	cbnz	r6, 8004820 <__strtok_r+0x20>
 8004818:	b965      	cbnz	r5, 8004834 <__strtok_r+0x34>
 800481a:	6015      	str	r5, [r2, #0]
 800481c:	4628      	mov	r0, r5
 800481e:	e005      	b.n	800482c <__strtok_r+0x2c>
 8004820:	42b5      	cmp	r5, r6
 8004822:	d1f6      	bne.n	8004812 <__strtok_r+0x12>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <__strtok_r+0xa>
 8004828:	6014      	str	r4, [r2, #0]
 800482a:	7003      	strb	r3, [r0, #0]
 800482c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482e:	461c      	mov	r4, r3
 8004830:	e00c      	b.n	800484c <__strtok_r+0x4c>
 8004832:	b915      	cbnz	r5, 800483a <__strtok_r+0x3a>
 8004834:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004838:	460e      	mov	r6, r1
 800483a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800483e:	42ab      	cmp	r3, r5
 8004840:	d1f7      	bne.n	8004832 <__strtok_r+0x32>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f3      	beq.n	800482e <__strtok_r+0x2e>
 8004846:	2300      	movs	r3, #0
 8004848:	f804 3c01 	strb.w	r3, [r4, #-1]
 800484c:	6014      	str	r4, [r2, #0]
 800484e:	e7ed      	b.n	800482c <__strtok_r+0x2c>

08004850 <__assert_func>:
 8004850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004852:	4614      	mov	r4, r2
 8004854:	461a      	mov	r2, r3
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <__assert_func+0x2c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4605      	mov	r5, r0
 800485c:	68d8      	ldr	r0, [r3, #12]
 800485e:	b14c      	cbz	r4, 8004874 <__assert_func+0x24>
 8004860:	4b07      	ldr	r3, [pc, #28]	; (8004880 <__assert_func+0x30>)
 8004862:	9100      	str	r1, [sp, #0]
 8004864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004868:	4906      	ldr	r1, [pc, #24]	; (8004884 <__assert_func+0x34>)
 800486a:	462b      	mov	r3, r5
 800486c:	f000 f80e 	bl	800488c <fiprintf>
 8004870:	f000 fcc4 	bl	80051fc <abort>
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <__assert_func+0x38>)
 8004876:	461c      	mov	r4, r3
 8004878:	e7f3      	b.n	8004862 <__assert_func+0x12>
 800487a:	bf00      	nop
 800487c:	200000a0 	.word	0x200000a0
 8004880:	08005ce0 	.word	0x08005ce0
 8004884:	08005ced 	.word	0x08005ced
 8004888:	08005d1b 	.word	0x08005d1b

0800488c <fiprintf>:
 800488c:	b40e      	push	{r1, r2, r3}
 800488e:	b503      	push	{r0, r1, lr}
 8004890:	4601      	mov	r1, r0
 8004892:	ab03      	add	r3, sp, #12
 8004894:	4805      	ldr	r0, [pc, #20]	; (80048ac <fiprintf+0x20>)
 8004896:	f853 2b04 	ldr.w	r2, [r3], #4
 800489a:	6800      	ldr	r0, [r0, #0]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	f000 f919 	bl	8004ad4 <_vfiprintf_r>
 80048a2:	b002      	add	sp, #8
 80048a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048a8:	b003      	add	sp, #12
 80048aa:	4770      	bx	lr
 80048ac:	200000a0 	.word	0x200000a0

080048b0 <malloc>:
 80048b0:	4b02      	ldr	r3, [pc, #8]	; (80048bc <malloc+0xc>)
 80048b2:	4601      	mov	r1, r0
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f000 b86f 	b.w	8004998 <_malloc_r>
 80048ba:	bf00      	nop
 80048bc:	200000a0 	.word	0x200000a0

080048c0 <_free_r>:
 80048c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048c2:	2900      	cmp	r1, #0
 80048c4:	d044      	beq.n	8004950 <_free_r+0x90>
 80048c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ca:	9001      	str	r0, [sp, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f1a1 0404 	sub.w	r4, r1, #4
 80048d2:	bfb8      	it	lt
 80048d4:	18e4      	addlt	r4, r4, r3
 80048d6:	f000 feb9 	bl	800564c <__malloc_lock>
 80048da:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <_free_r+0x94>)
 80048dc:	9801      	ldr	r0, [sp, #4]
 80048de:	6813      	ldr	r3, [r2, #0]
 80048e0:	b933      	cbnz	r3, 80048f0 <_free_r+0x30>
 80048e2:	6063      	str	r3, [r4, #4]
 80048e4:	6014      	str	r4, [r2, #0]
 80048e6:	b003      	add	sp, #12
 80048e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048ec:	f000 beb4 	b.w	8005658 <__malloc_unlock>
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	d908      	bls.n	8004906 <_free_r+0x46>
 80048f4:	6825      	ldr	r5, [r4, #0]
 80048f6:	1961      	adds	r1, r4, r5
 80048f8:	428b      	cmp	r3, r1
 80048fa:	bf01      	itttt	eq
 80048fc:	6819      	ldreq	r1, [r3, #0]
 80048fe:	685b      	ldreq	r3, [r3, #4]
 8004900:	1949      	addeq	r1, r1, r5
 8004902:	6021      	streq	r1, [r4, #0]
 8004904:	e7ed      	b.n	80048e2 <_free_r+0x22>
 8004906:	461a      	mov	r2, r3
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	b10b      	cbz	r3, 8004910 <_free_r+0x50>
 800490c:	42a3      	cmp	r3, r4
 800490e:	d9fa      	bls.n	8004906 <_free_r+0x46>
 8004910:	6811      	ldr	r1, [r2, #0]
 8004912:	1855      	adds	r5, r2, r1
 8004914:	42a5      	cmp	r5, r4
 8004916:	d10b      	bne.n	8004930 <_free_r+0x70>
 8004918:	6824      	ldr	r4, [r4, #0]
 800491a:	4421      	add	r1, r4
 800491c:	1854      	adds	r4, r2, r1
 800491e:	42a3      	cmp	r3, r4
 8004920:	6011      	str	r1, [r2, #0]
 8004922:	d1e0      	bne.n	80048e6 <_free_r+0x26>
 8004924:	681c      	ldr	r4, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	6053      	str	r3, [r2, #4]
 800492a:	4421      	add	r1, r4
 800492c:	6011      	str	r1, [r2, #0]
 800492e:	e7da      	b.n	80048e6 <_free_r+0x26>
 8004930:	d902      	bls.n	8004938 <_free_r+0x78>
 8004932:	230c      	movs	r3, #12
 8004934:	6003      	str	r3, [r0, #0]
 8004936:	e7d6      	b.n	80048e6 <_free_r+0x26>
 8004938:	6825      	ldr	r5, [r4, #0]
 800493a:	1961      	adds	r1, r4, r5
 800493c:	428b      	cmp	r3, r1
 800493e:	bf04      	itt	eq
 8004940:	6819      	ldreq	r1, [r3, #0]
 8004942:	685b      	ldreq	r3, [r3, #4]
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	bf04      	itt	eq
 8004948:	1949      	addeq	r1, r1, r5
 800494a:	6021      	streq	r1, [r4, #0]
 800494c:	6054      	str	r4, [r2, #4]
 800494e:	e7ca      	b.n	80048e6 <_free_r+0x26>
 8004950:	b003      	add	sp, #12
 8004952:	bd30      	pop	{r4, r5, pc}
 8004954:	200065c8 	.word	0x200065c8

08004958 <sbrk_aligned>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4e0e      	ldr	r6, [pc, #56]	; (8004994 <sbrk_aligned+0x3c>)
 800495c:	460c      	mov	r4, r1
 800495e:	6831      	ldr	r1, [r6, #0]
 8004960:	4605      	mov	r5, r0
 8004962:	b911      	cbnz	r1, 800496a <sbrk_aligned+0x12>
 8004964:	f000 fb7a 	bl	800505c <_sbrk_r>
 8004968:	6030      	str	r0, [r6, #0]
 800496a:	4621      	mov	r1, r4
 800496c:	4628      	mov	r0, r5
 800496e:	f000 fb75 	bl	800505c <_sbrk_r>
 8004972:	1c43      	adds	r3, r0, #1
 8004974:	d00a      	beq.n	800498c <sbrk_aligned+0x34>
 8004976:	1cc4      	adds	r4, r0, #3
 8004978:	f024 0403 	bic.w	r4, r4, #3
 800497c:	42a0      	cmp	r0, r4
 800497e:	d007      	beq.n	8004990 <sbrk_aligned+0x38>
 8004980:	1a21      	subs	r1, r4, r0
 8004982:	4628      	mov	r0, r5
 8004984:	f000 fb6a 	bl	800505c <_sbrk_r>
 8004988:	3001      	adds	r0, #1
 800498a:	d101      	bne.n	8004990 <sbrk_aligned+0x38>
 800498c:	f04f 34ff 	mov.w	r4, #4294967295
 8004990:	4620      	mov	r0, r4
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	200065cc 	.word	0x200065cc

08004998 <_malloc_r>:
 8004998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499c:	1ccd      	adds	r5, r1, #3
 800499e:	f025 0503 	bic.w	r5, r5, #3
 80049a2:	3508      	adds	r5, #8
 80049a4:	2d0c      	cmp	r5, #12
 80049a6:	bf38      	it	cc
 80049a8:	250c      	movcc	r5, #12
 80049aa:	2d00      	cmp	r5, #0
 80049ac:	4607      	mov	r7, r0
 80049ae:	db01      	blt.n	80049b4 <_malloc_r+0x1c>
 80049b0:	42a9      	cmp	r1, r5
 80049b2:	d905      	bls.n	80049c0 <_malloc_r+0x28>
 80049b4:	230c      	movs	r3, #12
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	2600      	movs	r6, #0
 80049ba:	4630      	mov	r0, r6
 80049bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049c0:	4e2e      	ldr	r6, [pc, #184]	; (8004a7c <_malloc_r+0xe4>)
 80049c2:	f000 fe43 	bl	800564c <__malloc_lock>
 80049c6:	6833      	ldr	r3, [r6, #0]
 80049c8:	461c      	mov	r4, r3
 80049ca:	bb34      	cbnz	r4, 8004a1a <_malloc_r+0x82>
 80049cc:	4629      	mov	r1, r5
 80049ce:	4638      	mov	r0, r7
 80049d0:	f7ff ffc2 	bl	8004958 <sbrk_aligned>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	4604      	mov	r4, r0
 80049d8:	d14d      	bne.n	8004a76 <_malloc_r+0xde>
 80049da:	6834      	ldr	r4, [r6, #0]
 80049dc:	4626      	mov	r6, r4
 80049de:	2e00      	cmp	r6, #0
 80049e0:	d140      	bne.n	8004a64 <_malloc_r+0xcc>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	4631      	mov	r1, r6
 80049e6:	4638      	mov	r0, r7
 80049e8:	eb04 0803 	add.w	r8, r4, r3
 80049ec:	f000 fb36 	bl	800505c <_sbrk_r>
 80049f0:	4580      	cmp	r8, r0
 80049f2:	d13a      	bne.n	8004a6a <_malloc_r+0xd2>
 80049f4:	6821      	ldr	r1, [r4, #0]
 80049f6:	3503      	adds	r5, #3
 80049f8:	1a6d      	subs	r5, r5, r1
 80049fa:	f025 0503 	bic.w	r5, r5, #3
 80049fe:	3508      	adds	r5, #8
 8004a00:	2d0c      	cmp	r5, #12
 8004a02:	bf38      	it	cc
 8004a04:	250c      	movcc	r5, #12
 8004a06:	4629      	mov	r1, r5
 8004a08:	4638      	mov	r0, r7
 8004a0a:	f7ff ffa5 	bl	8004958 <sbrk_aligned>
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d02b      	beq.n	8004a6a <_malloc_r+0xd2>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	442b      	add	r3, r5
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	e00e      	b.n	8004a38 <_malloc_r+0xa0>
 8004a1a:	6822      	ldr	r2, [r4, #0]
 8004a1c:	1b52      	subs	r2, r2, r5
 8004a1e:	d41e      	bmi.n	8004a5e <_malloc_r+0xc6>
 8004a20:	2a0b      	cmp	r2, #11
 8004a22:	d916      	bls.n	8004a52 <_malloc_r+0xba>
 8004a24:	1961      	adds	r1, r4, r5
 8004a26:	42a3      	cmp	r3, r4
 8004a28:	6025      	str	r5, [r4, #0]
 8004a2a:	bf18      	it	ne
 8004a2c:	6059      	strne	r1, [r3, #4]
 8004a2e:	6863      	ldr	r3, [r4, #4]
 8004a30:	bf08      	it	eq
 8004a32:	6031      	streq	r1, [r6, #0]
 8004a34:	5162      	str	r2, [r4, r5]
 8004a36:	604b      	str	r3, [r1, #4]
 8004a38:	4638      	mov	r0, r7
 8004a3a:	f104 060b 	add.w	r6, r4, #11
 8004a3e:	f000 fe0b 	bl	8005658 <__malloc_unlock>
 8004a42:	f026 0607 	bic.w	r6, r6, #7
 8004a46:	1d23      	adds	r3, r4, #4
 8004a48:	1af2      	subs	r2, r6, r3
 8004a4a:	d0b6      	beq.n	80049ba <_malloc_r+0x22>
 8004a4c:	1b9b      	subs	r3, r3, r6
 8004a4e:	50a3      	str	r3, [r4, r2]
 8004a50:	e7b3      	b.n	80049ba <_malloc_r+0x22>
 8004a52:	6862      	ldr	r2, [r4, #4]
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	bf0c      	ite	eq
 8004a58:	6032      	streq	r2, [r6, #0]
 8004a5a:	605a      	strne	r2, [r3, #4]
 8004a5c:	e7ec      	b.n	8004a38 <_malloc_r+0xa0>
 8004a5e:	4623      	mov	r3, r4
 8004a60:	6864      	ldr	r4, [r4, #4]
 8004a62:	e7b2      	b.n	80049ca <_malloc_r+0x32>
 8004a64:	4634      	mov	r4, r6
 8004a66:	6876      	ldr	r6, [r6, #4]
 8004a68:	e7b9      	b.n	80049de <_malloc_r+0x46>
 8004a6a:	230c      	movs	r3, #12
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4638      	mov	r0, r7
 8004a70:	f000 fdf2 	bl	8005658 <__malloc_unlock>
 8004a74:	e7a1      	b.n	80049ba <_malloc_r+0x22>
 8004a76:	6025      	str	r5, [r4, #0]
 8004a78:	e7de      	b.n	8004a38 <_malloc_r+0xa0>
 8004a7a:	bf00      	nop
 8004a7c:	200065c8 	.word	0x200065c8

08004a80 <__sfputc_r>:
 8004a80:	6893      	ldr	r3, [r2, #8]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	b410      	push	{r4}
 8004a88:	6093      	str	r3, [r2, #8]
 8004a8a:	da08      	bge.n	8004a9e <__sfputc_r+0x1e>
 8004a8c:	6994      	ldr	r4, [r2, #24]
 8004a8e:	42a3      	cmp	r3, r4
 8004a90:	db01      	blt.n	8004a96 <__sfputc_r+0x16>
 8004a92:	290a      	cmp	r1, #10
 8004a94:	d103      	bne.n	8004a9e <__sfputc_r+0x1e>
 8004a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a9a:	f000 baef 	b.w	800507c <__swbuf_r>
 8004a9e:	6813      	ldr	r3, [r2, #0]
 8004aa0:	1c58      	adds	r0, r3, #1
 8004aa2:	6010      	str	r0, [r2, #0]
 8004aa4:	7019      	strb	r1, [r3, #0]
 8004aa6:	4608      	mov	r0, r1
 8004aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <__sfputs_r>:
 8004aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	460f      	mov	r7, r1
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	18d5      	adds	r5, r2, r3
 8004ab8:	42ac      	cmp	r4, r5
 8004aba:	d101      	bne.n	8004ac0 <__sfputs_r+0x12>
 8004abc:	2000      	movs	r0, #0
 8004abe:	e007      	b.n	8004ad0 <__sfputs_r+0x22>
 8004ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac4:	463a      	mov	r2, r7
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f7ff ffda 	bl	8004a80 <__sfputc_r>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d1f3      	bne.n	8004ab8 <__sfputs_r+0xa>
 8004ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ad4 <_vfiprintf_r>:
 8004ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad8:	460d      	mov	r5, r1
 8004ada:	b09d      	sub	sp, #116	; 0x74
 8004adc:	4614      	mov	r4, r2
 8004ade:	4698      	mov	r8, r3
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	b118      	cbz	r0, 8004aec <_vfiprintf_r+0x18>
 8004ae4:	6983      	ldr	r3, [r0, #24]
 8004ae6:	b90b      	cbnz	r3, 8004aec <_vfiprintf_r+0x18>
 8004ae8:	f000 fcaa 	bl	8005440 <__sinit>
 8004aec:	4b89      	ldr	r3, [pc, #548]	; (8004d14 <_vfiprintf_r+0x240>)
 8004aee:	429d      	cmp	r5, r3
 8004af0:	d11b      	bne.n	8004b2a <_vfiprintf_r+0x56>
 8004af2:	6875      	ldr	r5, [r6, #4]
 8004af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004af6:	07d9      	lsls	r1, r3, #31
 8004af8:	d405      	bmi.n	8004b06 <_vfiprintf_r+0x32>
 8004afa:	89ab      	ldrh	r3, [r5, #12]
 8004afc:	059a      	lsls	r2, r3, #22
 8004afe:	d402      	bmi.n	8004b06 <_vfiprintf_r+0x32>
 8004b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b02:	f000 fd3b 	bl	800557c <__retarget_lock_acquire_recursive>
 8004b06:	89ab      	ldrh	r3, [r5, #12]
 8004b08:	071b      	lsls	r3, r3, #28
 8004b0a:	d501      	bpl.n	8004b10 <_vfiprintf_r+0x3c>
 8004b0c:	692b      	ldr	r3, [r5, #16]
 8004b0e:	b9eb      	cbnz	r3, 8004b4c <_vfiprintf_r+0x78>
 8004b10:	4629      	mov	r1, r5
 8004b12:	4630      	mov	r0, r6
 8004b14:	f000 fb04 	bl	8005120 <__swsetup_r>
 8004b18:	b1c0      	cbz	r0, 8004b4c <_vfiprintf_r+0x78>
 8004b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b1c:	07dc      	lsls	r4, r3, #31
 8004b1e:	d50e      	bpl.n	8004b3e <_vfiprintf_r+0x6a>
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	b01d      	add	sp, #116	; 0x74
 8004b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2a:	4b7b      	ldr	r3, [pc, #492]	; (8004d18 <_vfiprintf_r+0x244>)
 8004b2c:	429d      	cmp	r5, r3
 8004b2e:	d101      	bne.n	8004b34 <_vfiprintf_r+0x60>
 8004b30:	68b5      	ldr	r5, [r6, #8]
 8004b32:	e7df      	b.n	8004af4 <_vfiprintf_r+0x20>
 8004b34:	4b79      	ldr	r3, [pc, #484]	; (8004d1c <_vfiprintf_r+0x248>)
 8004b36:	429d      	cmp	r5, r3
 8004b38:	bf08      	it	eq
 8004b3a:	68f5      	ldreq	r5, [r6, #12]
 8004b3c:	e7da      	b.n	8004af4 <_vfiprintf_r+0x20>
 8004b3e:	89ab      	ldrh	r3, [r5, #12]
 8004b40:	0598      	lsls	r0, r3, #22
 8004b42:	d4ed      	bmi.n	8004b20 <_vfiprintf_r+0x4c>
 8004b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b46:	f000 fd1a 	bl	800557e <__retarget_lock_release_recursive>
 8004b4a:	e7e9      	b.n	8004b20 <_vfiprintf_r+0x4c>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b50:	2320      	movs	r3, #32
 8004b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b5a:	2330      	movs	r3, #48	; 0x30
 8004b5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d20 <_vfiprintf_r+0x24c>
 8004b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b64:	f04f 0901 	mov.w	r9, #1
 8004b68:	4623      	mov	r3, r4
 8004b6a:	469a      	mov	sl, r3
 8004b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b70:	b10a      	cbz	r2, 8004b76 <_vfiprintf_r+0xa2>
 8004b72:	2a25      	cmp	r2, #37	; 0x25
 8004b74:	d1f9      	bne.n	8004b6a <_vfiprintf_r+0x96>
 8004b76:	ebba 0b04 	subs.w	fp, sl, r4
 8004b7a:	d00b      	beq.n	8004b94 <_vfiprintf_r+0xc0>
 8004b7c:	465b      	mov	r3, fp
 8004b7e:	4622      	mov	r2, r4
 8004b80:	4629      	mov	r1, r5
 8004b82:	4630      	mov	r0, r6
 8004b84:	f7ff ff93 	bl	8004aae <__sfputs_r>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f000 80aa 	beq.w	8004ce2 <_vfiprintf_r+0x20e>
 8004b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b90:	445a      	add	r2, fp
 8004b92:	9209      	str	r2, [sp, #36]	; 0x24
 8004b94:	f89a 3000 	ldrb.w	r3, [sl]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80a2 	beq.w	8004ce2 <_vfiprintf_r+0x20e>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ba8:	f10a 0a01 	add.w	sl, sl, #1
 8004bac:	9304      	str	r3, [sp, #16]
 8004bae:	9307      	str	r3, [sp, #28]
 8004bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8004bb6:	4654      	mov	r4, sl
 8004bb8:	2205      	movs	r2, #5
 8004bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bbe:	4858      	ldr	r0, [pc, #352]	; (8004d20 <_vfiprintf_r+0x24c>)
 8004bc0:	f7fb fb3e 	bl	8000240 <memchr>
 8004bc4:	9a04      	ldr	r2, [sp, #16]
 8004bc6:	b9d8      	cbnz	r0, 8004c00 <_vfiprintf_r+0x12c>
 8004bc8:	06d1      	lsls	r1, r2, #27
 8004bca:	bf44      	itt	mi
 8004bcc:	2320      	movmi	r3, #32
 8004bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd2:	0713      	lsls	r3, r2, #28
 8004bd4:	bf44      	itt	mi
 8004bd6:	232b      	movmi	r3, #43	; 0x2b
 8004bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004be0:	2b2a      	cmp	r3, #42	; 0x2a
 8004be2:	d015      	beq.n	8004c10 <_vfiprintf_r+0x13c>
 8004be4:	9a07      	ldr	r2, [sp, #28]
 8004be6:	4654      	mov	r4, sl
 8004be8:	2000      	movs	r0, #0
 8004bea:	f04f 0c0a 	mov.w	ip, #10
 8004bee:	4621      	mov	r1, r4
 8004bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bf4:	3b30      	subs	r3, #48	; 0x30
 8004bf6:	2b09      	cmp	r3, #9
 8004bf8:	d94e      	bls.n	8004c98 <_vfiprintf_r+0x1c4>
 8004bfa:	b1b0      	cbz	r0, 8004c2a <_vfiprintf_r+0x156>
 8004bfc:	9207      	str	r2, [sp, #28]
 8004bfe:	e014      	b.n	8004c2a <_vfiprintf_r+0x156>
 8004c00:	eba0 0308 	sub.w	r3, r0, r8
 8004c04:	fa09 f303 	lsl.w	r3, r9, r3
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	9304      	str	r3, [sp, #16]
 8004c0c:	46a2      	mov	sl, r4
 8004c0e:	e7d2      	b.n	8004bb6 <_vfiprintf_r+0xe2>
 8004c10:	9b03      	ldr	r3, [sp, #12]
 8004c12:	1d19      	adds	r1, r3, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	9103      	str	r1, [sp, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bfbb      	ittet	lt
 8004c1c:	425b      	neglt	r3, r3
 8004c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c22:	9307      	strge	r3, [sp, #28]
 8004c24:	9307      	strlt	r3, [sp, #28]
 8004c26:	bfb8      	it	lt
 8004c28:	9204      	strlt	r2, [sp, #16]
 8004c2a:	7823      	ldrb	r3, [r4, #0]
 8004c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c2e:	d10c      	bne.n	8004c4a <_vfiprintf_r+0x176>
 8004c30:	7863      	ldrb	r3, [r4, #1]
 8004c32:	2b2a      	cmp	r3, #42	; 0x2a
 8004c34:	d135      	bne.n	8004ca2 <_vfiprintf_r+0x1ce>
 8004c36:	9b03      	ldr	r3, [sp, #12]
 8004c38:	1d1a      	adds	r2, r3, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	9203      	str	r2, [sp, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfb8      	it	lt
 8004c42:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c46:	3402      	adds	r4, #2
 8004c48:	9305      	str	r3, [sp, #20]
 8004c4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d30 <_vfiprintf_r+0x25c>
 8004c4e:	7821      	ldrb	r1, [r4, #0]
 8004c50:	2203      	movs	r2, #3
 8004c52:	4650      	mov	r0, sl
 8004c54:	f7fb faf4 	bl	8000240 <memchr>
 8004c58:	b140      	cbz	r0, 8004c6c <_vfiprintf_r+0x198>
 8004c5a:	2340      	movs	r3, #64	; 0x40
 8004c5c:	eba0 000a 	sub.w	r0, r0, sl
 8004c60:	fa03 f000 	lsl.w	r0, r3, r0
 8004c64:	9b04      	ldr	r3, [sp, #16]
 8004c66:	4303      	orrs	r3, r0
 8004c68:	3401      	adds	r4, #1
 8004c6a:	9304      	str	r3, [sp, #16]
 8004c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c70:	482c      	ldr	r0, [pc, #176]	; (8004d24 <_vfiprintf_r+0x250>)
 8004c72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c76:	2206      	movs	r2, #6
 8004c78:	f7fb fae2 	bl	8000240 <memchr>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d03f      	beq.n	8004d00 <_vfiprintf_r+0x22c>
 8004c80:	4b29      	ldr	r3, [pc, #164]	; (8004d28 <_vfiprintf_r+0x254>)
 8004c82:	bb1b      	cbnz	r3, 8004ccc <_vfiprintf_r+0x1f8>
 8004c84:	9b03      	ldr	r3, [sp, #12]
 8004c86:	3307      	adds	r3, #7
 8004c88:	f023 0307 	bic.w	r3, r3, #7
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	9303      	str	r3, [sp, #12]
 8004c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c92:	443b      	add	r3, r7
 8004c94:	9309      	str	r3, [sp, #36]	; 0x24
 8004c96:	e767      	b.n	8004b68 <_vfiprintf_r+0x94>
 8004c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	e7a5      	b.n	8004bee <_vfiprintf_r+0x11a>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	3401      	adds	r4, #1
 8004ca6:	9305      	str	r3, [sp, #20]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f04f 0c0a 	mov.w	ip, #10
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cb4:	3a30      	subs	r2, #48	; 0x30
 8004cb6:	2a09      	cmp	r2, #9
 8004cb8:	d903      	bls.n	8004cc2 <_vfiprintf_r+0x1ee>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0c5      	beq.n	8004c4a <_vfiprintf_r+0x176>
 8004cbe:	9105      	str	r1, [sp, #20]
 8004cc0:	e7c3      	b.n	8004c4a <_vfiprintf_r+0x176>
 8004cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e7f0      	b.n	8004cae <_vfiprintf_r+0x1da>
 8004ccc:	ab03      	add	r3, sp, #12
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	462a      	mov	r2, r5
 8004cd2:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <_vfiprintf_r+0x258>)
 8004cd4:	a904      	add	r1, sp, #16
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f3af 8000 	nop.w
 8004cdc:	4607      	mov	r7, r0
 8004cde:	1c78      	adds	r0, r7, #1
 8004ce0:	d1d6      	bne.n	8004c90 <_vfiprintf_r+0x1bc>
 8004ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ce4:	07d9      	lsls	r1, r3, #31
 8004ce6:	d405      	bmi.n	8004cf4 <_vfiprintf_r+0x220>
 8004ce8:	89ab      	ldrh	r3, [r5, #12]
 8004cea:	059a      	lsls	r2, r3, #22
 8004cec:	d402      	bmi.n	8004cf4 <_vfiprintf_r+0x220>
 8004cee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cf0:	f000 fc45 	bl	800557e <__retarget_lock_release_recursive>
 8004cf4:	89ab      	ldrh	r3, [r5, #12]
 8004cf6:	065b      	lsls	r3, r3, #25
 8004cf8:	f53f af12 	bmi.w	8004b20 <_vfiprintf_r+0x4c>
 8004cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cfe:	e711      	b.n	8004b24 <_vfiprintf_r+0x50>
 8004d00:	ab03      	add	r3, sp, #12
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	462a      	mov	r2, r5
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <_vfiprintf_r+0x258>)
 8004d08:	a904      	add	r1, sp, #16
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f000 f880 	bl	8004e10 <_printf_i>
 8004d10:	e7e4      	b.n	8004cdc <_vfiprintf_r+0x208>
 8004d12:	bf00      	nop
 8004d14:	08005d70 	.word	0x08005d70
 8004d18:	08005d90 	.word	0x08005d90
 8004d1c:	08005d50 	.word	0x08005d50
 8004d20:	08005d1c 	.word	0x08005d1c
 8004d24:	08005d26 	.word	0x08005d26
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	08004aaf 	.word	0x08004aaf
 8004d30:	08005d22 	.word	0x08005d22

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4699      	mov	r9, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bfb8      	it	lt
 8004d48:	4613      	movlt	r3, r2
 8004d4a:	6033      	str	r3, [r6, #0]
 8004d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d50:	4607      	mov	r7, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc26      	bgt.n	8004dca <_printf_common+0x96>
 8004d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d80:	1e13      	subs	r3, r2, #0
 8004d82:	6822      	ldr	r2, [r4, #0]
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d42b      	bmi.n	8004de4 <_printf_common+0xb0>
 8004d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d90:	4649      	mov	r1, r9
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d01e      	beq.n	8004dd8 <_printf_common+0xa4>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	68e5      	ldr	r5, [r4, #12]
 8004d9e:	6832      	ldr	r2, [r6, #0]
 8004da0:	f003 0306 	and.w	r3, r3, #6
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	bf08      	it	eq
 8004da8:	1aad      	subeq	r5, r5, r2
 8004daa:	68a3      	ldr	r3, [r4, #8]
 8004dac:	6922      	ldr	r2, [r4, #16]
 8004dae:	bf0c      	ite	eq
 8004db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db4:	2500      	movne	r5, #0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bfc4      	itt	gt
 8004dba:	1a9b      	subgt	r3, r3, r2
 8004dbc:	18ed      	addgt	r5, r5, r3
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	341a      	adds	r4, #26
 8004dc2:	42b5      	cmp	r5, r6
 8004dc4:	d11a      	bne.n	8004dfc <_printf_common+0xc8>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e008      	b.n	8004ddc <_printf_common+0xa8>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	47c0      	blx	r8
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d103      	bne.n	8004de0 <_printf_common+0xac>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	3501      	adds	r5, #1
 8004de2:	e7c6      	b.n	8004d72 <_printf_common+0x3e>
 8004de4:	18e1      	adds	r1, r4, r3
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	2030      	movs	r0, #48	; 0x30
 8004dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dee:	4422      	add	r2, r4
 8004df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df8:	3302      	adds	r3, #2
 8004dfa:	e7c7      	b.n	8004d8c <_printf_common+0x58>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4622      	mov	r2, r4
 8004e00:	4649      	mov	r1, r9
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c0      	blx	r8
 8004e06:	3001      	adds	r0, #1
 8004e08:	d0e6      	beq.n	8004dd8 <_printf_common+0xa4>
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7d9      	b.n	8004dc2 <_printf_common+0x8e>
	...

08004e10 <_printf_i>:
 8004e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	7e0f      	ldrb	r7, [r1, #24]
 8004e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e18:	2f78      	cmp	r7, #120	; 0x78
 8004e1a:	4691      	mov	r9, r2
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	469a      	mov	sl, r3
 8004e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e26:	d807      	bhi.n	8004e38 <_printf_i+0x28>
 8004e28:	2f62      	cmp	r7, #98	; 0x62
 8004e2a:	d80a      	bhi.n	8004e42 <_printf_i+0x32>
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	f000 80d8 	beq.w	8004fe2 <_printf_i+0x1d2>
 8004e32:	2f58      	cmp	r7, #88	; 0x58
 8004e34:	f000 80a3 	beq.w	8004f7e <_printf_i+0x16e>
 8004e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e40:	e03a      	b.n	8004eb8 <_printf_i+0xa8>
 8004e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e46:	2b15      	cmp	r3, #21
 8004e48:	d8f6      	bhi.n	8004e38 <_printf_i+0x28>
 8004e4a:	a101      	add	r1, pc, #4	; (adr r1, 8004e50 <_printf_i+0x40>)
 8004e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e50:	08004ea9 	.word	0x08004ea9
 8004e54:	08004ebd 	.word	0x08004ebd
 8004e58:	08004e39 	.word	0x08004e39
 8004e5c:	08004e39 	.word	0x08004e39
 8004e60:	08004e39 	.word	0x08004e39
 8004e64:	08004e39 	.word	0x08004e39
 8004e68:	08004ebd 	.word	0x08004ebd
 8004e6c:	08004e39 	.word	0x08004e39
 8004e70:	08004e39 	.word	0x08004e39
 8004e74:	08004e39 	.word	0x08004e39
 8004e78:	08004e39 	.word	0x08004e39
 8004e7c:	08004fc9 	.word	0x08004fc9
 8004e80:	08004eed 	.word	0x08004eed
 8004e84:	08004fab 	.word	0x08004fab
 8004e88:	08004e39 	.word	0x08004e39
 8004e8c:	08004e39 	.word	0x08004e39
 8004e90:	08004feb 	.word	0x08004feb
 8004e94:	08004e39 	.word	0x08004e39
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08004e39 	.word	0x08004e39
 8004ea0:	08004e39 	.word	0x08004e39
 8004ea4:	08004fb3 	.word	0x08004fb3
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	602a      	str	r2, [r5, #0]
 8004eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0a3      	b.n	8005004 <_printf_i+0x1f4>
 8004ebc:	6820      	ldr	r0, [r4, #0]
 8004ebe:	6829      	ldr	r1, [r5, #0]
 8004ec0:	0606      	lsls	r6, r0, #24
 8004ec2:	f101 0304 	add.w	r3, r1, #4
 8004ec6:	d50a      	bpl.n	8004ede <_printf_i+0xce>
 8004ec8:	680e      	ldr	r6, [r1, #0]
 8004eca:	602b      	str	r3, [r5, #0]
 8004ecc:	2e00      	cmp	r6, #0
 8004ece:	da03      	bge.n	8004ed8 <_printf_i+0xc8>
 8004ed0:	232d      	movs	r3, #45	; 0x2d
 8004ed2:	4276      	negs	r6, r6
 8004ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed8:	485e      	ldr	r0, [pc, #376]	; (8005054 <_printf_i+0x244>)
 8004eda:	230a      	movs	r3, #10
 8004edc:	e019      	b.n	8004f12 <_printf_i+0x102>
 8004ede:	680e      	ldr	r6, [r1, #0]
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ee6:	bf18      	it	ne
 8004ee8:	b236      	sxthne	r6, r6
 8004eea:	e7ef      	b.n	8004ecc <_printf_i+0xbc>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	6820      	ldr	r0, [r4, #0]
 8004ef0:	1d19      	adds	r1, r3, #4
 8004ef2:	6029      	str	r1, [r5, #0]
 8004ef4:	0601      	lsls	r1, r0, #24
 8004ef6:	d501      	bpl.n	8004efc <_printf_i+0xec>
 8004ef8:	681e      	ldr	r6, [r3, #0]
 8004efa:	e002      	b.n	8004f02 <_printf_i+0xf2>
 8004efc:	0646      	lsls	r6, r0, #25
 8004efe:	d5fb      	bpl.n	8004ef8 <_printf_i+0xe8>
 8004f00:	881e      	ldrh	r6, [r3, #0]
 8004f02:	4854      	ldr	r0, [pc, #336]	; (8005054 <_printf_i+0x244>)
 8004f04:	2f6f      	cmp	r7, #111	; 0x6f
 8004f06:	bf0c      	ite	eq
 8004f08:	2308      	moveq	r3, #8
 8004f0a:	230a      	movne	r3, #10
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f12:	6865      	ldr	r5, [r4, #4]
 8004f14:	60a5      	str	r5, [r4, #8]
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	bfa2      	ittt	ge
 8004f1a:	6821      	ldrge	r1, [r4, #0]
 8004f1c:	f021 0104 	bicge.w	r1, r1, #4
 8004f20:	6021      	strge	r1, [r4, #0]
 8004f22:	b90e      	cbnz	r6, 8004f28 <_printf_i+0x118>
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	d04d      	beq.n	8004fc4 <_printf_i+0x1b4>
 8004f28:	4615      	mov	r5, r2
 8004f2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f2e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f32:	5dc7      	ldrb	r7, [r0, r7]
 8004f34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f38:	4637      	mov	r7, r6
 8004f3a:	42bb      	cmp	r3, r7
 8004f3c:	460e      	mov	r6, r1
 8004f3e:	d9f4      	bls.n	8004f2a <_printf_i+0x11a>
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d10b      	bne.n	8004f5c <_printf_i+0x14c>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	07de      	lsls	r6, r3, #31
 8004f48:	d508      	bpl.n	8004f5c <_printf_i+0x14c>
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	6861      	ldr	r1, [r4, #4]
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	bfde      	ittt	le
 8004f52:	2330      	movle	r3, #48	; 0x30
 8004f54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f5c:	1b52      	subs	r2, r2, r5
 8004f5e:	6122      	str	r2, [r4, #16]
 8004f60:	f8cd a000 	str.w	sl, [sp]
 8004f64:	464b      	mov	r3, r9
 8004f66:	aa03      	add	r2, sp, #12
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	f7ff fee2 	bl	8004d34 <_printf_common>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d14c      	bne.n	800500e <_printf_i+0x1fe>
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	b004      	add	sp, #16
 8004f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7e:	4835      	ldr	r0, [pc, #212]	; (8005054 <_printf_i+0x244>)
 8004f80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f84:	6829      	ldr	r1, [r5, #0]
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f8c:	6029      	str	r1, [r5, #0]
 8004f8e:	061d      	lsls	r5, r3, #24
 8004f90:	d514      	bpl.n	8004fbc <_printf_i+0x1ac>
 8004f92:	07df      	lsls	r7, r3, #31
 8004f94:	bf44      	itt	mi
 8004f96:	f043 0320 	orrmi.w	r3, r3, #32
 8004f9a:	6023      	strmi	r3, [r4, #0]
 8004f9c:	b91e      	cbnz	r6, 8004fa6 <_printf_i+0x196>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	f023 0320 	bic.w	r3, r3, #32
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	e7b0      	b.n	8004f0c <_printf_i+0xfc>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	f043 0320 	orr.w	r3, r3, #32
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	2378      	movs	r3, #120	; 0x78
 8004fb4:	4828      	ldr	r0, [pc, #160]	; (8005058 <_printf_i+0x248>)
 8004fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fba:	e7e3      	b.n	8004f84 <_printf_i+0x174>
 8004fbc:	0659      	lsls	r1, r3, #25
 8004fbe:	bf48      	it	mi
 8004fc0:	b2b6      	uxthmi	r6, r6
 8004fc2:	e7e6      	b.n	8004f92 <_printf_i+0x182>
 8004fc4:	4615      	mov	r5, r2
 8004fc6:	e7bb      	b.n	8004f40 <_printf_i+0x130>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	6826      	ldr	r6, [r4, #0]
 8004fcc:	6961      	ldr	r1, [r4, #20]
 8004fce:	1d18      	adds	r0, r3, #4
 8004fd0:	6028      	str	r0, [r5, #0]
 8004fd2:	0635      	lsls	r5, r6, #24
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	d501      	bpl.n	8004fdc <_printf_i+0x1cc>
 8004fd8:	6019      	str	r1, [r3, #0]
 8004fda:	e002      	b.n	8004fe2 <_printf_i+0x1d2>
 8004fdc:	0670      	lsls	r0, r6, #25
 8004fde:	d5fb      	bpl.n	8004fd8 <_printf_i+0x1c8>
 8004fe0:	8019      	strh	r1, [r3, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6123      	str	r3, [r4, #16]
 8004fe6:	4615      	mov	r5, r2
 8004fe8:	e7ba      	b.n	8004f60 <_printf_i+0x150>
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	602a      	str	r2, [r5, #0]
 8004ff0:	681d      	ldr	r5, [r3, #0]
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f7fb f922 	bl	8000240 <memchr>
 8004ffc:	b108      	cbz	r0, 8005002 <_printf_i+0x1f2>
 8004ffe:	1b40      	subs	r0, r0, r5
 8005000:	6060      	str	r0, [r4, #4]
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	6123      	str	r3, [r4, #16]
 8005006:	2300      	movs	r3, #0
 8005008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500c:	e7a8      	b.n	8004f60 <_printf_i+0x150>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	462a      	mov	r2, r5
 8005012:	4649      	mov	r1, r9
 8005014:	4640      	mov	r0, r8
 8005016:	47d0      	blx	sl
 8005018:	3001      	adds	r0, #1
 800501a:	d0ab      	beq.n	8004f74 <_printf_i+0x164>
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	079b      	lsls	r3, r3, #30
 8005020:	d413      	bmi.n	800504a <_printf_i+0x23a>
 8005022:	68e0      	ldr	r0, [r4, #12]
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	4298      	cmp	r0, r3
 8005028:	bfb8      	it	lt
 800502a:	4618      	movlt	r0, r3
 800502c:	e7a4      	b.n	8004f78 <_printf_i+0x168>
 800502e:	2301      	movs	r3, #1
 8005030:	4632      	mov	r2, r6
 8005032:	4649      	mov	r1, r9
 8005034:	4640      	mov	r0, r8
 8005036:	47d0      	blx	sl
 8005038:	3001      	adds	r0, #1
 800503a:	d09b      	beq.n	8004f74 <_printf_i+0x164>
 800503c:	3501      	adds	r5, #1
 800503e:	68e3      	ldr	r3, [r4, #12]
 8005040:	9903      	ldr	r1, [sp, #12]
 8005042:	1a5b      	subs	r3, r3, r1
 8005044:	42ab      	cmp	r3, r5
 8005046:	dcf2      	bgt.n	800502e <_printf_i+0x21e>
 8005048:	e7eb      	b.n	8005022 <_printf_i+0x212>
 800504a:	2500      	movs	r5, #0
 800504c:	f104 0619 	add.w	r6, r4, #25
 8005050:	e7f5      	b.n	800503e <_printf_i+0x22e>
 8005052:	bf00      	nop
 8005054:	08005d2d 	.word	0x08005d2d
 8005058:	08005d3e 	.word	0x08005d3e

0800505c <_sbrk_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4d06      	ldr	r5, [pc, #24]	; (8005078 <_sbrk_r+0x1c>)
 8005060:	2300      	movs	r3, #0
 8005062:	4604      	mov	r4, r0
 8005064:	4608      	mov	r0, r1
 8005066:	602b      	str	r3, [r5, #0]
 8005068:	f7fc fdba 	bl	8001be0 <_sbrk>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_sbrk_r+0x1a>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_sbrk_r+0x1a>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	200065d4 	.word	0x200065d4

0800507c <__swbuf_r>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	460e      	mov	r6, r1
 8005080:	4614      	mov	r4, r2
 8005082:	4605      	mov	r5, r0
 8005084:	b118      	cbz	r0, 800508e <__swbuf_r+0x12>
 8005086:	6983      	ldr	r3, [r0, #24]
 8005088:	b90b      	cbnz	r3, 800508e <__swbuf_r+0x12>
 800508a:	f000 f9d9 	bl	8005440 <__sinit>
 800508e:	4b21      	ldr	r3, [pc, #132]	; (8005114 <__swbuf_r+0x98>)
 8005090:	429c      	cmp	r4, r3
 8005092:	d12b      	bne.n	80050ec <__swbuf_r+0x70>
 8005094:	686c      	ldr	r4, [r5, #4]
 8005096:	69a3      	ldr	r3, [r4, #24]
 8005098:	60a3      	str	r3, [r4, #8]
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	071a      	lsls	r2, r3, #28
 800509e:	d52f      	bpl.n	8005100 <__swbuf_r+0x84>
 80050a0:	6923      	ldr	r3, [r4, #16]
 80050a2:	b36b      	cbz	r3, 8005100 <__swbuf_r+0x84>
 80050a4:	6923      	ldr	r3, [r4, #16]
 80050a6:	6820      	ldr	r0, [r4, #0]
 80050a8:	1ac0      	subs	r0, r0, r3
 80050aa:	6963      	ldr	r3, [r4, #20]
 80050ac:	b2f6      	uxtb	r6, r6
 80050ae:	4283      	cmp	r3, r0
 80050b0:	4637      	mov	r7, r6
 80050b2:	dc04      	bgt.n	80050be <__swbuf_r+0x42>
 80050b4:	4621      	mov	r1, r4
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 f92e 	bl	8005318 <_fflush_r>
 80050bc:	bb30      	cbnz	r0, 800510c <__swbuf_r+0x90>
 80050be:	68a3      	ldr	r3, [r4, #8]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	60a3      	str	r3, [r4, #8]
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	6022      	str	r2, [r4, #0]
 80050ca:	701e      	strb	r6, [r3, #0]
 80050cc:	6963      	ldr	r3, [r4, #20]
 80050ce:	3001      	adds	r0, #1
 80050d0:	4283      	cmp	r3, r0
 80050d2:	d004      	beq.n	80050de <__swbuf_r+0x62>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	07db      	lsls	r3, r3, #31
 80050d8:	d506      	bpl.n	80050e8 <__swbuf_r+0x6c>
 80050da:	2e0a      	cmp	r6, #10
 80050dc:	d104      	bne.n	80050e8 <__swbuf_r+0x6c>
 80050de:	4621      	mov	r1, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 f919 	bl	8005318 <_fflush_r>
 80050e6:	b988      	cbnz	r0, 800510c <__swbuf_r+0x90>
 80050e8:	4638      	mov	r0, r7
 80050ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <__swbuf_r+0x9c>)
 80050ee:	429c      	cmp	r4, r3
 80050f0:	d101      	bne.n	80050f6 <__swbuf_r+0x7a>
 80050f2:	68ac      	ldr	r4, [r5, #8]
 80050f4:	e7cf      	b.n	8005096 <__swbuf_r+0x1a>
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <__swbuf_r+0xa0>)
 80050f8:	429c      	cmp	r4, r3
 80050fa:	bf08      	it	eq
 80050fc:	68ec      	ldreq	r4, [r5, #12]
 80050fe:	e7ca      	b.n	8005096 <__swbuf_r+0x1a>
 8005100:	4621      	mov	r1, r4
 8005102:	4628      	mov	r0, r5
 8005104:	f000 f80c 	bl	8005120 <__swsetup_r>
 8005108:	2800      	cmp	r0, #0
 800510a:	d0cb      	beq.n	80050a4 <__swbuf_r+0x28>
 800510c:	f04f 37ff 	mov.w	r7, #4294967295
 8005110:	e7ea      	b.n	80050e8 <__swbuf_r+0x6c>
 8005112:	bf00      	nop
 8005114:	08005d70 	.word	0x08005d70
 8005118:	08005d90 	.word	0x08005d90
 800511c:	08005d50 	.word	0x08005d50

08005120 <__swsetup_r>:
 8005120:	4b32      	ldr	r3, [pc, #200]	; (80051ec <__swsetup_r+0xcc>)
 8005122:	b570      	push	{r4, r5, r6, lr}
 8005124:	681d      	ldr	r5, [r3, #0]
 8005126:	4606      	mov	r6, r0
 8005128:	460c      	mov	r4, r1
 800512a:	b125      	cbz	r5, 8005136 <__swsetup_r+0x16>
 800512c:	69ab      	ldr	r3, [r5, #24]
 800512e:	b913      	cbnz	r3, 8005136 <__swsetup_r+0x16>
 8005130:	4628      	mov	r0, r5
 8005132:	f000 f985 	bl	8005440 <__sinit>
 8005136:	4b2e      	ldr	r3, [pc, #184]	; (80051f0 <__swsetup_r+0xd0>)
 8005138:	429c      	cmp	r4, r3
 800513a:	d10f      	bne.n	800515c <__swsetup_r+0x3c>
 800513c:	686c      	ldr	r4, [r5, #4]
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005144:	0719      	lsls	r1, r3, #28
 8005146:	d42c      	bmi.n	80051a2 <__swsetup_r+0x82>
 8005148:	06dd      	lsls	r5, r3, #27
 800514a:	d411      	bmi.n	8005170 <__swsetup_r+0x50>
 800514c:	2309      	movs	r3, #9
 800514e:	6033      	str	r3, [r6, #0]
 8005150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	f04f 30ff 	mov.w	r0, #4294967295
 800515a:	e03e      	b.n	80051da <__swsetup_r+0xba>
 800515c:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <__swsetup_r+0xd4>)
 800515e:	429c      	cmp	r4, r3
 8005160:	d101      	bne.n	8005166 <__swsetup_r+0x46>
 8005162:	68ac      	ldr	r4, [r5, #8]
 8005164:	e7eb      	b.n	800513e <__swsetup_r+0x1e>
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <__swsetup_r+0xd8>)
 8005168:	429c      	cmp	r4, r3
 800516a:	bf08      	it	eq
 800516c:	68ec      	ldreq	r4, [r5, #12]
 800516e:	e7e6      	b.n	800513e <__swsetup_r+0x1e>
 8005170:	0758      	lsls	r0, r3, #29
 8005172:	d512      	bpl.n	800519a <__swsetup_r+0x7a>
 8005174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005176:	b141      	cbz	r1, 800518a <__swsetup_r+0x6a>
 8005178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800517c:	4299      	cmp	r1, r3
 800517e:	d002      	beq.n	8005186 <__swsetup_r+0x66>
 8005180:	4630      	mov	r0, r6
 8005182:	f7ff fb9d 	bl	80048c0 <_free_r>
 8005186:	2300      	movs	r3, #0
 8005188:	6363      	str	r3, [r4, #52]	; 0x34
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005190:	81a3      	strh	r3, [r4, #12]
 8005192:	2300      	movs	r3, #0
 8005194:	6063      	str	r3, [r4, #4]
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	f043 0308 	orr.w	r3, r3, #8
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	b94b      	cbnz	r3, 80051ba <__swsetup_r+0x9a>
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b0:	d003      	beq.n	80051ba <__swsetup_r+0x9a>
 80051b2:	4621      	mov	r1, r4
 80051b4:	4630      	mov	r0, r6
 80051b6:	f000 fa09 	bl	80055cc <__smakebuf_r>
 80051ba:	89a0      	ldrh	r0, [r4, #12]
 80051bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051c0:	f010 0301 	ands.w	r3, r0, #1
 80051c4:	d00a      	beq.n	80051dc <__swsetup_r+0xbc>
 80051c6:	2300      	movs	r3, #0
 80051c8:	60a3      	str	r3, [r4, #8]
 80051ca:	6963      	ldr	r3, [r4, #20]
 80051cc:	425b      	negs	r3, r3
 80051ce:	61a3      	str	r3, [r4, #24]
 80051d0:	6923      	ldr	r3, [r4, #16]
 80051d2:	b943      	cbnz	r3, 80051e6 <__swsetup_r+0xc6>
 80051d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051d8:	d1ba      	bne.n	8005150 <__swsetup_r+0x30>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	0781      	lsls	r1, r0, #30
 80051de:	bf58      	it	pl
 80051e0:	6963      	ldrpl	r3, [r4, #20]
 80051e2:	60a3      	str	r3, [r4, #8]
 80051e4:	e7f4      	b.n	80051d0 <__swsetup_r+0xb0>
 80051e6:	2000      	movs	r0, #0
 80051e8:	e7f7      	b.n	80051da <__swsetup_r+0xba>
 80051ea:	bf00      	nop
 80051ec:	200000a0 	.word	0x200000a0
 80051f0:	08005d70 	.word	0x08005d70
 80051f4:	08005d90 	.word	0x08005d90
 80051f8:	08005d50 	.word	0x08005d50

080051fc <abort>:
 80051fc:	b508      	push	{r3, lr}
 80051fe:	2006      	movs	r0, #6
 8005200:	f000 fa58 	bl	80056b4 <raise>
 8005204:	2001      	movs	r0, #1
 8005206:	f7fc fc73 	bl	8001af0 <_exit>
	...

0800520c <__sflush_r>:
 800520c:	898a      	ldrh	r2, [r1, #12]
 800520e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005212:	4605      	mov	r5, r0
 8005214:	0710      	lsls	r0, r2, #28
 8005216:	460c      	mov	r4, r1
 8005218:	d458      	bmi.n	80052cc <__sflush_r+0xc0>
 800521a:	684b      	ldr	r3, [r1, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	dc05      	bgt.n	800522c <__sflush_r+0x20>
 8005220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	dc02      	bgt.n	800522c <__sflush_r+0x20>
 8005226:	2000      	movs	r0, #0
 8005228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800522c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800522e:	2e00      	cmp	r6, #0
 8005230:	d0f9      	beq.n	8005226 <__sflush_r+0x1a>
 8005232:	2300      	movs	r3, #0
 8005234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005238:	682f      	ldr	r7, [r5, #0]
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	d032      	beq.n	80052a4 <__sflush_r+0x98>
 800523e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005240:	89a3      	ldrh	r3, [r4, #12]
 8005242:	075a      	lsls	r2, r3, #29
 8005244:	d505      	bpl.n	8005252 <__sflush_r+0x46>
 8005246:	6863      	ldr	r3, [r4, #4]
 8005248:	1ac0      	subs	r0, r0, r3
 800524a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800524c:	b10b      	cbz	r3, 8005252 <__sflush_r+0x46>
 800524e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005250:	1ac0      	subs	r0, r0, r3
 8005252:	2300      	movs	r3, #0
 8005254:	4602      	mov	r2, r0
 8005256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005258:	6a21      	ldr	r1, [r4, #32]
 800525a:	4628      	mov	r0, r5
 800525c:	47b0      	blx	r6
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	d106      	bne.n	8005272 <__sflush_r+0x66>
 8005264:	6829      	ldr	r1, [r5, #0]
 8005266:	291d      	cmp	r1, #29
 8005268:	d82c      	bhi.n	80052c4 <__sflush_r+0xb8>
 800526a:	4a2a      	ldr	r2, [pc, #168]	; (8005314 <__sflush_r+0x108>)
 800526c:	40ca      	lsrs	r2, r1
 800526e:	07d6      	lsls	r6, r2, #31
 8005270:	d528      	bpl.n	80052c4 <__sflush_r+0xb8>
 8005272:	2200      	movs	r2, #0
 8005274:	6062      	str	r2, [r4, #4]
 8005276:	04d9      	lsls	r1, r3, #19
 8005278:	6922      	ldr	r2, [r4, #16]
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	d504      	bpl.n	8005288 <__sflush_r+0x7c>
 800527e:	1c42      	adds	r2, r0, #1
 8005280:	d101      	bne.n	8005286 <__sflush_r+0x7a>
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	b903      	cbnz	r3, 8005288 <__sflush_r+0x7c>
 8005286:	6560      	str	r0, [r4, #84]	; 0x54
 8005288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800528a:	602f      	str	r7, [r5, #0]
 800528c:	2900      	cmp	r1, #0
 800528e:	d0ca      	beq.n	8005226 <__sflush_r+0x1a>
 8005290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005294:	4299      	cmp	r1, r3
 8005296:	d002      	beq.n	800529e <__sflush_r+0x92>
 8005298:	4628      	mov	r0, r5
 800529a:	f7ff fb11 	bl	80048c0 <_free_r>
 800529e:	2000      	movs	r0, #0
 80052a0:	6360      	str	r0, [r4, #52]	; 0x34
 80052a2:	e7c1      	b.n	8005228 <__sflush_r+0x1c>
 80052a4:	6a21      	ldr	r1, [r4, #32]
 80052a6:	2301      	movs	r3, #1
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b0      	blx	r6
 80052ac:	1c41      	adds	r1, r0, #1
 80052ae:	d1c7      	bne.n	8005240 <__sflush_r+0x34>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0c4      	beq.n	8005240 <__sflush_r+0x34>
 80052b6:	2b1d      	cmp	r3, #29
 80052b8:	d001      	beq.n	80052be <__sflush_r+0xb2>
 80052ba:	2b16      	cmp	r3, #22
 80052bc:	d101      	bne.n	80052c2 <__sflush_r+0xb6>
 80052be:	602f      	str	r7, [r5, #0]
 80052c0:	e7b1      	b.n	8005226 <__sflush_r+0x1a>
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052c8:	81a3      	strh	r3, [r4, #12]
 80052ca:	e7ad      	b.n	8005228 <__sflush_r+0x1c>
 80052cc:	690f      	ldr	r7, [r1, #16]
 80052ce:	2f00      	cmp	r7, #0
 80052d0:	d0a9      	beq.n	8005226 <__sflush_r+0x1a>
 80052d2:	0793      	lsls	r3, r2, #30
 80052d4:	680e      	ldr	r6, [r1, #0]
 80052d6:	bf08      	it	eq
 80052d8:	694b      	ldreq	r3, [r1, #20]
 80052da:	600f      	str	r7, [r1, #0]
 80052dc:	bf18      	it	ne
 80052de:	2300      	movne	r3, #0
 80052e0:	eba6 0807 	sub.w	r8, r6, r7
 80052e4:	608b      	str	r3, [r1, #8]
 80052e6:	f1b8 0f00 	cmp.w	r8, #0
 80052ea:	dd9c      	ble.n	8005226 <__sflush_r+0x1a>
 80052ec:	6a21      	ldr	r1, [r4, #32]
 80052ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052f0:	4643      	mov	r3, r8
 80052f2:	463a      	mov	r2, r7
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b0      	blx	r6
 80052f8:	2800      	cmp	r0, #0
 80052fa:	dc06      	bgt.n	800530a <__sflush_r+0xfe>
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	e78e      	b.n	8005228 <__sflush_r+0x1c>
 800530a:	4407      	add	r7, r0
 800530c:	eba8 0800 	sub.w	r8, r8, r0
 8005310:	e7e9      	b.n	80052e6 <__sflush_r+0xda>
 8005312:	bf00      	nop
 8005314:	20400001 	.word	0x20400001

08005318 <_fflush_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	690b      	ldr	r3, [r1, #16]
 800531c:	4605      	mov	r5, r0
 800531e:	460c      	mov	r4, r1
 8005320:	b913      	cbnz	r3, 8005328 <_fflush_r+0x10>
 8005322:	2500      	movs	r5, #0
 8005324:	4628      	mov	r0, r5
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	b118      	cbz	r0, 8005332 <_fflush_r+0x1a>
 800532a:	6983      	ldr	r3, [r0, #24]
 800532c:	b90b      	cbnz	r3, 8005332 <_fflush_r+0x1a>
 800532e:	f000 f887 	bl	8005440 <__sinit>
 8005332:	4b14      	ldr	r3, [pc, #80]	; (8005384 <_fflush_r+0x6c>)
 8005334:	429c      	cmp	r4, r3
 8005336:	d11b      	bne.n	8005370 <_fflush_r+0x58>
 8005338:	686c      	ldr	r4, [r5, #4]
 800533a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0ef      	beq.n	8005322 <_fflush_r+0xa>
 8005342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005344:	07d0      	lsls	r0, r2, #31
 8005346:	d404      	bmi.n	8005352 <_fflush_r+0x3a>
 8005348:	0599      	lsls	r1, r3, #22
 800534a:	d402      	bmi.n	8005352 <_fflush_r+0x3a>
 800534c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800534e:	f000 f915 	bl	800557c <__retarget_lock_acquire_recursive>
 8005352:	4628      	mov	r0, r5
 8005354:	4621      	mov	r1, r4
 8005356:	f7ff ff59 	bl	800520c <__sflush_r>
 800535a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800535c:	07da      	lsls	r2, r3, #31
 800535e:	4605      	mov	r5, r0
 8005360:	d4e0      	bmi.n	8005324 <_fflush_r+0xc>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	059b      	lsls	r3, r3, #22
 8005366:	d4dd      	bmi.n	8005324 <_fflush_r+0xc>
 8005368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800536a:	f000 f908 	bl	800557e <__retarget_lock_release_recursive>
 800536e:	e7d9      	b.n	8005324 <_fflush_r+0xc>
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <_fflush_r+0x70>)
 8005372:	429c      	cmp	r4, r3
 8005374:	d101      	bne.n	800537a <_fflush_r+0x62>
 8005376:	68ac      	ldr	r4, [r5, #8]
 8005378:	e7df      	b.n	800533a <_fflush_r+0x22>
 800537a:	4b04      	ldr	r3, [pc, #16]	; (800538c <_fflush_r+0x74>)
 800537c:	429c      	cmp	r4, r3
 800537e:	bf08      	it	eq
 8005380:	68ec      	ldreq	r4, [r5, #12]
 8005382:	e7da      	b.n	800533a <_fflush_r+0x22>
 8005384:	08005d70 	.word	0x08005d70
 8005388:	08005d90 	.word	0x08005d90
 800538c:	08005d50 	.word	0x08005d50

08005390 <std>:
 8005390:	2300      	movs	r3, #0
 8005392:	b510      	push	{r4, lr}
 8005394:	4604      	mov	r4, r0
 8005396:	e9c0 3300 	strd	r3, r3, [r0]
 800539a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800539e:	6083      	str	r3, [r0, #8]
 80053a0:	8181      	strh	r1, [r0, #12]
 80053a2:	6643      	str	r3, [r0, #100]	; 0x64
 80053a4:	81c2      	strh	r2, [r0, #14]
 80053a6:	6183      	str	r3, [r0, #24]
 80053a8:	4619      	mov	r1, r3
 80053aa:	2208      	movs	r2, #8
 80053ac:	305c      	adds	r0, #92	; 0x5c
 80053ae:	f7ff f9b3 	bl	8004718 <memset>
 80053b2:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <std+0x38>)
 80053b4:	6263      	str	r3, [r4, #36]	; 0x24
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <std+0x3c>)
 80053b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <std+0x40>)
 80053bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <std+0x44>)
 80053c0:	6224      	str	r4, [r4, #32]
 80053c2:	6323      	str	r3, [r4, #48]	; 0x30
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	bf00      	nop
 80053c8:	080056ed 	.word	0x080056ed
 80053cc:	0800570f 	.word	0x0800570f
 80053d0:	08005747 	.word	0x08005747
 80053d4:	0800576b 	.word	0x0800576b

080053d8 <_cleanup_r>:
 80053d8:	4901      	ldr	r1, [pc, #4]	; (80053e0 <_cleanup_r+0x8>)
 80053da:	f000 b8af 	b.w	800553c <_fwalk_reent>
 80053de:	bf00      	nop
 80053e0:	08005319 	.word	0x08005319

080053e4 <__sfmoreglue>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	2268      	movs	r2, #104	; 0x68
 80053e8:	1e4d      	subs	r5, r1, #1
 80053ea:	4355      	muls	r5, r2
 80053ec:	460e      	mov	r6, r1
 80053ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053f2:	f7ff fad1 	bl	8004998 <_malloc_r>
 80053f6:	4604      	mov	r4, r0
 80053f8:	b140      	cbz	r0, 800540c <__sfmoreglue+0x28>
 80053fa:	2100      	movs	r1, #0
 80053fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005400:	300c      	adds	r0, #12
 8005402:	60a0      	str	r0, [r4, #8]
 8005404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005408:	f7ff f986 	bl	8004718 <memset>
 800540c:	4620      	mov	r0, r4
 800540e:	bd70      	pop	{r4, r5, r6, pc}

08005410 <__sfp_lock_acquire>:
 8005410:	4801      	ldr	r0, [pc, #4]	; (8005418 <__sfp_lock_acquire+0x8>)
 8005412:	f000 b8b3 	b.w	800557c <__retarget_lock_acquire_recursive>
 8005416:	bf00      	nop
 8005418:	200065d1 	.word	0x200065d1

0800541c <__sfp_lock_release>:
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <__sfp_lock_release+0x8>)
 800541e:	f000 b8ae 	b.w	800557e <__retarget_lock_release_recursive>
 8005422:	bf00      	nop
 8005424:	200065d1 	.word	0x200065d1

08005428 <__sinit_lock_acquire>:
 8005428:	4801      	ldr	r0, [pc, #4]	; (8005430 <__sinit_lock_acquire+0x8>)
 800542a:	f000 b8a7 	b.w	800557c <__retarget_lock_acquire_recursive>
 800542e:	bf00      	nop
 8005430:	200065d2 	.word	0x200065d2

08005434 <__sinit_lock_release>:
 8005434:	4801      	ldr	r0, [pc, #4]	; (800543c <__sinit_lock_release+0x8>)
 8005436:	f000 b8a2 	b.w	800557e <__retarget_lock_release_recursive>
 800543a:	bf00      	nop
 800543c:	200065d2 	.word	0x200065d2

08005440 <__sinit>:
 8005440:	b510      	push	{r4, lr}
 8005442:	4604      	mov	r4, r0
 8005444:	f7ff fff0 	bl	8005428 <__sinit_lock_acquire>
 8005448:	69a3      	ldr	r3, [r4, #24]
 800544a:	b11b      	cbz	r3, 8005454 <__sinit+0x14>
 800544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005450:	f7ff bff0 	b.w	8005434 <__sinit_lock_release>
 8005454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005458:	6523      	str	r3, [r4, #80]	; 0x50
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <__sinit+0x68>)
 800545c:	4a13      	ldr	r2, [pc, #76]	; (80054ac <__sinit+0x6c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	62a2      	str	r2, [r4, #40]	; 0x28
 8005462:	42a3      	cmp	r3, r4
 8005464:	bf04      	itt	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	61a3      	streq	r3, [r4, #24]
 800546a:	4620      	mov	r0, r4
 800546c:	f000 f820 	bl	80054b0 <__sfp>
 8005470:	6060      	str	r0, [r4, #4]
 8005472:	4620      	mov	r0, r4
 8005474:	f000 f81c 	bl	80054b0 <__sfp>
 8005478:	60a0      	str	r0, [r4, #8]
 800547a:	4620      	mov	r0, r4
 800547c:	f000 f818 	bl	80054b0 <__sfp>
 8005480:	2200      	movs	r2, #0
 8005482:	60e0      	str	r0, [r4, #12]
 8005484:	2104      	movs	r1, #4
 8005486:	6860      	ldr	r0, [r4, #4]
 8005488:	f7ff ff82 	bl	8005390 <std>
 800548c:	68a0      	ldr	r0, [r4, #8]
 800548e:	2201      	movs	r2, #1
 8005490:	2109      	movs	r1, #9
 8005492:	f7ff ff7d 	bl	8005390 <std>
 8005496:	68e0      	ldr	r0, [r4, #12]
 8005498:	2202      	movs	r2, #2
 800549a:	2112      	movs	r1, #18
 800549c:	f7ff ff78 	bl	8005390 <std>
 80054a0:	2301      	movs	r3, #1
 80054a2:	61a3      	str	r3, [r4, #24]
 80054a4:	e7d2      	b.n	800544c <__sinit+0xc>
 80054a6:	bf00      	nop
 80054a8:	08005c68 	.word	0x08005c68
 80054ac:	080053d9 	.word	0x080053d9

080054b0 <__sfp>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	4607      	mov	r7, r0
 80054b4:	f7ff ffac 	bl	8005410 <__sfp_lock_acquire>
 80054b8:	4b1e      	ldr	r3, [pc, #120]	; (8005534 <__sfp+0x84>)
 80054ba:	681e      	ldr	r6, [r3, #0]
 80054bc:	69b3      	ldr	r3, [r6, #24]
 80054be:	b913      	cbnz	r3, 80054c6 <__sfp+0x16>
 80054c0:	4630      	mov	r0, r6
 80054c2:	f7ff ffbd 	bl	8005440 <__sinit>
 80054c6:	3648      	adds	r6, #72	; 0x48
 80054c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	d503      	bpl.n	80054d8 <__sfp+0x28>
 80054d0:	6833      	ldr	r3, [r6, #0]
 80054d2:	b30b      	cbz	r3, 8005518 <__sfp+0x68>
 80054d4:	6836      	ldr	r6, [r6, #0]
 80054d6:	e7f7      	b.n	80054c8 <__sfp+0x18>
 80054d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054dc:	b9d5      	cbnz	r5, 8005514 <__sfp+0x64>
 80054de:	4b16      	ldr	r3, [pc, #88]	; (8005538 <__sfp+0x88>)
 80054e0:	60e3      	str	r3, [r4, #12]
 80054e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054e6:	6665      	str	r5, [r4, #100]	; 0x64
 80054e8:	f000 f847 	bl	800557a <__retarget_lock_init_recursive>
 80054ec:	f7ff ff96 	bl	800541c <__sfp_lock_release>
 80054f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054f8:	6025      	str	r5, [r4, #0]
 80054fa:	61a5      	str	r5, [r4, #24]
 80054fc:	2208      	movs	r2, #8
 80054fe:	4629      	mov	r1, r5
 8005500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005504:	f7ff f908 	bl	8004718 <memset>
 8005508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800550c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005510:	4620      	mov	r0, r4
 8005512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005514:	3468      	adds	r4, #104	; 0x68
 8005516:	e7d9      	b.n	80054cc <__sfp+0x1c>
 8005518:	2104      	movs	r1, #4
 800551a:	4638      	mov	r0, r7
 800551c:	f7ff ff62 	bl	80053e4 <__sfmoreglue>
 8005520:	4604      	mov	r4, r0
 8005522:	6030      	str	r0, [r6, #0]
 8005524:	2800      	cmp	r0, #0
 8005526:	d1d5      	bne.n	80054d4 <__sfp+0x24>
 8005528:	f7ff ff78 	bl	800541c <__sfp_lock_release>
 800552c:	230c      	movs	r3, #12
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	e7ee      	b.n	8005510 <__sfp+0x60>
 8005532:	bf00      	nop
 8005534:	08005c68 	.word	0x08005c68
 8005538:	ffff0001 	.word	0xffff0001

0800553c <_fwalk_reent>:
 800553c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005540:	4606      	mov	r6, r0
 8005542:	4688      	mov	r8, r1
 8005544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005548:	2700      	movs	r7, #0
 800554a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800554e:	f1b9 0901 	subs.w	r9, r9, #1
 8005552:	d505      	bpl.n	8005560 <_fwalk_reent+0x24>
 8005554:	6824      	ldr	r4, [r4, #0]
 8005556:	2c00      	cmp	r4, #0
 8005558:	d1f7      	bne.n	800554a <_fwalk_reent+0xe>
 800555a:	4638      	mov	r0, r7
 800555c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005560:	89ab      	ldrh	r3, [r5, #12]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d907      	bls.n	8005576 <_fwalk_reent+0x3a>
 8005566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800556a:	3301      	adds	r3, #1
 800556c:	d003      	beq.n	8005576 <_fwalk_reent+0x3a>
 800556e:	4629      	mov	r1, r5
 8005570:	4630      	mov	r0, r6
 8005572:	47c0      	blx	r8
 8005574:	4307      	orrs	r7, r0
 8005576:	3568      	adds	r5, #104	; 0x68
 8005578:	e7e9      	b.n	800554e <_fwalk_reent+0x12>

0800557a <__retarget_lock_init_recursive>:
 800557a:	4770      	bx	lr

0800557c <__retarget_lock_acquire_recursive>:
 800557c:	4770      	bx	lr

0800557e <__retarget_lock_release_recursive>:
 800557e:	4770      	bx	lr

08005580 <__swhatbuf_r>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	460e      	mov	r6, r1
 8005584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005588:	2900      	cmp	r1, #0
 800558a:	b096      	sub	sp, #88	; 0x58
 800558c:	4614      	mov	r4, r2
 800558e:	461d      	mov	r5, r3
 8005590:	da08      	bge.n	80055a4 <__swhatbuf_r+0x24>
 8005592:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	602a      	str	r2, [r5, #0]
 800559a:	061a      	lsls	r2, r3, #24
 800559c:	d410      	bmi.n	80055c0 <__swhatbuf_r+0x40>
 800559e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055a2:	e00e      	b.n	80055c2 <__swhatbuf_r+0x42>
 80055a4:	466a      	mov	r2, sp
 80055a6:	f000 f907 	bl	80057b8 <_fstat_r>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	dbf1      	blt.n	8005592 <__swhatbuf_r+0x12>
 80055ae:	9a01      	ldr	r2, [sp, #4]
 80055b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055b8:	425a      	negs	r2, r3
 80055ba:	415a      	adcs	r2, r3
 80055bc:	602a      	str	r2, [r5, #0]
 80055be:	e7ee      	b.n	800559e <__swhatbuf_r+0x1e>
 80055c0:	2340      	movs	r3, #64	; 0x40
 80055c2:	2000      	movs	r0, #0
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	b016      	add	sp, #88	; 0x58
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080055cc <__smakebuf_r>:
 80055cc:	898b      	ldrh	r3, [r1, #12]
 80055ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055d0:	079d      	lsls	r5, r3, #30
 80055d2:	4606      	mov	r6, r0
 80055d4:	460c      	mov	r4, r1
 80055d6:	d507      	bpl.n	80055e8 <__smakebuf_r+0x1c>
 80055d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	6123      	str	r3, [r4, #16]
 80055e0:	2301      	movs	r3, #1
 80055e2:	6163      	str	r3, [r4, #20]
 80055e4:	b002      	add	sp, #8
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	ab01      	add	r3, sp, #4
 80055ea:	466a      	mov	r2, sp
 80055ec:	f7ff ffc8 	bl	8005580 <__swhatbuf_r>
 80055f0:	9900      	ldr	r1, [sp, #0]
 80055f2:	4605      	mov	r5, r0
 80055f4:	4630      	mov	r0, r6
 80055f6:	f7ff f9cf 	bl	8004998 <_malloc_r>
 80055fa:	b948      	cbnz	r0, 8005610 <__smakebuf_r+0x44>
 80055fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005600:	059a      	lsls	r2, r3, #22
 8005602:	d4ef      	bmi.n	80055e4 <__smakebuf_r+0x18>
 8005604:	f023 0303 	bic.w	r3, r3, #3
 8005608:	f043 0302 	orr.w	r3, r3, #2
 800560c:	81a3      	strh	r3, [r4, #12]
 800560e:	e7e3      	b.n	80055d8 <__smakebuf_r+0xc>
 8005610:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <__smakebuf_r+0x7c>)
 8005612:	62b3      	str	r3, [r6, #40]	; 0x28
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	6020      	str	r0, [r4, #0]
 8005618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	9b00      	ldr	r3, [sp, #0]
 8005620:	6163      	str	r3, [r4, #20]
 8005622:	9b01      	ldr	r3, [sp, #4]
 8005624:	6120      	str	r0, [r4, #16]
 8005626:	b15b      	cbz	r3, 8005640 <__smakebuf_r+0x74>
 8005628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800562c:	4630      	mov	r0, r6
 800562e:	f000 f8d5 	bl	80057dc <_isatty_r>
 8005632:	b128      	cbz	r0, 8005640 <__smakebuf_r+0x74>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	89a0      	ldrh	r0, [r4, #12]
 8005642:	4305      	orrs	r5, r0
 8005644:	81a5      	strh	r5, [r4, #12]
 8005646:	e7cd      	b.n	80055e4 <__smakebuf_r+0x18>
 8005648:	080053d9 	.word	0x080053d9

0800564c <__malloc_lock>:
 800564c:	4801      	ldr	r0, [pc, #4]	; (8005654 <__malloc_lock+0x8>)
 800564e:	f7ff bf95 	b.w	800557c <__retarget_lock_acquire_recursive>
 8005652:	bf00      	nop
 8005654:	200065d0 	.word	0x200065d0

08005658 <__malloc_unlock>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__malloc_unlock+0x8>)
 800565a:	f7ff bf90 	b.w	800557e <__retarget_lock_release_recursive>
 800565e:	bf00      	nop
 8005660:	200065d0 	.word	0x200065d0

08005664 <_raise_r>:
 8005664:	291f      	cmp	r1, #31
 8005666:	b538      	push	{r3, r4, r5, lr}
 8005668:	4604      	mov	r4, r0
 800566a:	460d      	mov	r5, r1
 800566c:	d904      	bls.n	8005678 <_raise_r+0x14>
 800566e:	2316      	movs	r3, #22
 8005670:	6003      	str	r3, [r0, #0]
 8005672:	f04f 30ff 	mov.w	r0, #4294967295
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800567a:	b112      	cbz	r2, 8005682 <_raise_r+0x1e>
 800567c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005680:	b94b      	cbnz	r3, 8005696 <_raise_r+0x32>
 8005682:	4620      	mov	r0, r4
 8005684:	f000 f830 	bl	80056e8 <_getpid_r>
 8005688:	462a      	mov	r2, r5
 800568a:	4601      	mov	r1, r0
 800568c:	4620      	mov	r0, r4
 800568e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005692:	f000 b817 	b.w	80056c4 <_kill_r>
 8005696:	2b01      	cmp	r3, #1
 8005698:	d00a      	beq.n	80056b0 <_raise_r+0x4c>
 800569a:	1c59      	adds	r1, r3, #1
 800569c:	d103      	bne.n	80056a6 <_raise_r+0x42>
 800569e:	2316      	movs	r3, #22
 80056a0:	6003      	str	r3, [r0, #0]
 80056a2:	2001      	movs	r0, #1
 80056a4:	e7e7      	b.n	8005676 <_raise_r+0x12>
 80056a6:	2400      	movs	r4, #0
 80056a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80056ac:	4628      	mov	r0, r5
 80056ae:	4798      	blx	r3
 80056b0:	2000      	movs	r0, #0
 80056b2:	e7e0      	b.n	8005676 <_raise_r+0x12>

080056b4 <raise>:
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <raise+0xc>)
 80056b6:	4601      	mov	r1, r0
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	f7ff bfd3 	b.w	8005664 <_raise_r>
 80056be:	bf00      	nop
 80056c0:	200000a0 	.word	0x200000a0

080056c4 <_kill_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4d07      	ldr	r5, [pc, #28]	; (80056e4 <_kill_r+0x20>)
 80056c8:	2300      	movs	r3, #0
 80056ca:	4604      	mov	r4, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	f7fc f9fd 	bl	8001ad0 <_kill>
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	d102      	bne.n	80056e0 <_kill_r+0x1c>
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	b103      	cbz	r3, 80056e0 <_kill_r+0x1c>
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	bd38      	pop	{r3, r4, r5, pc}
 80056e2:	bf00      	nop
 80056e4:	200065d4 	.word	0x200065d4

080056e8 <_getpid_r>:
 80056e8:	f7fc b9ea 	b.w	8001ac0 <_getpid>

080056ec <__sread>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	460c      	mov	r4, r1
 80056f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f4:	f000 f894 	bl	8005820 <_read_r>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	bfab      	itete	ge
 80056fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005700:	181b      	addge	r3, r3, r0
 8005702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005706:	bfac      	ite	ge
 8005708:	6563      	strge	r3, [r4, #84]	; 0x54
 800570a:	81a3      	strhlt	r3, [r4, #12]
 800570c:	bd10      	pop	{r4, pc}

0800570e <__swrite>:
 800570e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005712:	461f      	mov	r7, r3
 8005714:	898b      	ldrh	r3, [r1, #12]
 8005716:	05db      	lsls	r3, r3, #23
 8005718:	4605      	mov	r5, r0
 800571a:	460c      	mov	r4, r1
 800571c:	4616      	mov	r6, r2
 800571e:	d505      	bpl.n	800572c <__swrite+0x1e>
 8005720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005724:	2302      	movs	r3, #2
 8005726:	2200      	movs	r2, #0
 8005728:	f000 f868 	bl	80057fc <_lseek_r>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	4632      	mov	r2, r6
 800573a:	463b      	mov	r3, r7
 800573c:	4628      	mov	r0, r5
 800573e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005742:	f000 b817 	b.w	8005774 <_write_r>

08005746 <__sseek>:
 8005746:	b510      	push	{r4, lr}
 8005748:	460c      	mov	r4, r1
 800574a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574e:	f000 f855 	bl	80057fc <_lseek_r>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	bf15      	itete	ne
 8005758:	6560      	strne	r0, [r4, #84]	; 0x54
 800575a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800575e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005762:	81a3      	strheq	r3, [r4, #12]
 8005764:	bf18      	it	ne
 8005766:	81a3      	strhne	r3, [r4, #12]
 8005768:	bd10      	pop	{r4, pc}

0800576a <__sclose>:
 800576a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576e:	f000 b813 	b.w	8005798 <_close_r>
	...

08005774 <_write_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4d07      	ldr	r5, [pc, #28]	; (8005794 <_write_r+0x20>)
 8005778:	4604      	mov	r4, r0
 800577a:	4608      	mov	r0, r1
 800577c:	4611      	mov	r1, r2
 800577e:	2200      	movs	r2, #0
 8005780:	602a      	str	r2, [r5, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	f7fc f9db 	bl	8001b3e <_write>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_write_r+0x1e>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_write_r+0x1e>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	200065d4 	.word	0x200065d4

08005798 <_close_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d06      	ldr	r5, [pc, #24]	; (80057b4 <_close_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	f7fc f9e7 	bl	8001b76 <_close>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_close_r+0x1a>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_close_r+0x1a>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	200065d4 	.word	0x200065d4

080057b8 <_fstat_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d07      	ldr	r5, [pc, #28]	; (80057d8 <_fstat_r+0x20>)
 80057bc:	2300      	movs	r3, #0
 80057be:	4604      	mov	r4, r0
 80057c0:	4608      	mov	r0, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	f7fc f9e2 	bl	8001b8e <_fstat>
 80057ca:	1c43      	adds	r3, r0, #1
 80057cc:	d102      	bne.n	80057d4 <_fstat_r+0x1c>
 80057ce:	682b      	ldr	r3, [r5, #0]
 80057d0:	b103      	cbz	r3, 80057d4 <_fstat_r+0x1c>
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	bd38      	pop	{r3, r4, r5, pc}
 80057d6:	bf00      	nop
 80057d8:	200065d4 	.word	0x200065d4

080057dc <_isatty_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4d06      	ldr	r5, [pc, #24]	; (80057f8 <_isatty_r+0x1c>)
 80057e0:	2300      	movs	r3, #0
 80057e2:	4604      	mov	r4, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	602b      	str	r3, [r5, #0]
 80057e8:	f7fc f9e1 	bl	8001bae <_isatty>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_isatty_r+0x1a>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_isatty_r+0x1a>
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	200065d4 	.word	0x200065d4

080057fc <_lseek_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4d07      	ldr	r5, [pc, #28]	; (800581c <_lseek_r+0x20>)
 8005800:	4604      	mov	r4, r0
 8005802:	4608      	mov	r0, r1
 8005804:	4611      	mov	r1, r2
 8005806:	2200      	movs	r2, #0
 8005808:	602a      	str	r2, [r5, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	f7fc f9da 	bl	8001bc4 <_lseek>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_lseek_r+0x1e>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_lseek_r+0x1e>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	200065d4 	.word	0x200065d4

08005820 <_read_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d07      	ldr	r5, [pc, #28]	; (8005840 <_read_r+0x20>)
 8005824:	4604      	mov	r4, r0
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	2200      	movs	r2, #0
 800582c:	602a      	str	r2, [r5, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f7fc f968 	bl	8001b04 <_read>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_read_r+0x1e>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_read_r+0x1e>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	200065d4 	.word	0x200065d4

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
