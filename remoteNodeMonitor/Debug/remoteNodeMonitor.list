
remoteNodeMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd4  08005dd4  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ddc  08005ddc  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064d4  20000104  08005ee8  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200065d8  08005ee8  000265d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b082  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4d  00000000  00000000  0002b1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002d108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d74  00000000  00000000  0002e280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e018  00000000  00000000  00050ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca290  00000000  00000000  0005f00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012929c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d80  00000000  00000000  001292ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000104 	.word	0x20000104
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005868 	.word	0x08005868

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000108 	.word	0x20000108
 800020c:	08005868 	.word	0x08005868

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <App_Init>:
* Description: 	Initializes application.
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void App_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UART_MUX_SELA_Port, UART_MUX_SELA_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <App_Init+0x20>)
 80005f0:	f002 fa00 	bl	80029f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UART_MUX_INH_Port, UART_MUX_INH_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4802      	ldr	r0, [pc, #8]	; (8000604 <App_Init+0x20>)
 80005fc:	f002 f9fa 	bl	80029f4 <HAL_GPIO_WritePin>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020800 	.word	0x40020800

08000608 <App_Update>:
* Description: 	Updates state of the application.
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void App_Update(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	switch(Get_Application_State())
 800060c:	f000 f9a8 	bl	8000960 <Get_Application_State>
 8000610:	4603      	mov	r3, r0
 8000612:	2b02      	cmp	r3, #2
 8000614:	d008      	beq.n	8000628 <App_Update+0x20>
 8000616:	2b02      	cmp	r3, #2
 8000618:	dc12      	bgt.n	8000640 <App_Update+0x38>
 800061a:	2b00      	cmp	r3, #0
 800061c:	d007      	beq.n	800062e <App_Update+0x26>
 800061e:	2b01      	cmp	r3, #1
 8000620:	d10e      	bne.n	8000640 <App_Update+0x38>
	{
		case MOLLY_SKYLA1:
			Skyla1_Molly_App();
 8000622:	f000 fbf1 	bl	8000e08 <Skyla1_Molly_App>
			break;
 8000626:	e00b      	b.n	8000640 <App_Update+0x38>

		case MOLLY_SKYLA2:
			Skyla2_Molly_App();
 8000628:	f000 fdba 	bl	80011a0 <Skyla2_Molly_App>
			break;
 800062c:	e008      	b.n	8000640 <App_Update+0x38>

		case MONITOR:
			Skyla1_Check_Flag();
 800062e:	f000 ff83 	bl	8001538 <Skyla1_Check_Flag>
			Creed1_Check_Flag();
 8000632:	f000 ffdb 	bl	80015ec <Creed1_Check_Flag>
			Skyla2_Check_Flag();
 8000636:	f001 f833 	bl	80016a0 <Skyla2_Check_Flag>
			Creed2_Check_Flag();
 800063a:	f001 f88b 	bl	8001754 <Creed2_Check_Flag>
			break;
 800063e:	bf00      	nop
	}
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <main>:

/**************************************************************************************************
* Main Program Loop
**************************************************************************************************/
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
   // Initialize the chip
   Chip_Init();
 8000648:	f000 f808 	bl	800065c <Chip_Init>

   // Initialize the application
   App_Init();
 800064c:	f7ff ffca 	bl	80005e4 <App_Init>

   /* Replace with your application code */
   while (1)
   {
      // call chip level routines that need updating
      Chip_Update();
 8000650:	f001 f8da 	bl	8001808 <Chip_Update>

      // call application
      App_Update();
 8000654:	f7ff ffd8 	bl	8000608 <App_Update>
      Chip_Update();
 8000658:	e7fa      	b.n	8000650 <main+0xc>
	...

0800065c <Chip_Init>:
* Description: 	This routine sets up the chip
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void Chip_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f001 fdfa 	bl	8002258 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f001 f8d8 	bl	8001818 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f001 f94a 	bl	8001900 <MX_GPIO_Init>
  MX_USART1_UART_Init();			// RASPBERRY PI
 800066c:	f001 fb66 	bl	8001d3c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000670:	f001 fb8e 	bl	8001d90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();			// SKYLA1
 8000674:	f001 fbb6 	bl	8001de4 <MX_USART3_UART_Init>
  MX_UART4_Init();					// CREED1
 8000678:	f001 fb0c 	bl	8001c94 <MX_UART4_Init>
  MX_UART5_Init();					// SKYLA2
 800067c:	f001 fb34 	bl	8001ce8 <MX_UART5_Init>
  MX_USART6_UART_Init();			// CREED2
 8000680:	f001 fbda 	bl	8001e38 <MX_USART6_UART_Init>

  HAL_UART_Receive_IT(&huart1, &pi_uart_rxData, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <Chip_Init+0x60>)
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <Chip_Init+0x64>)
 800068a:	f003 f894 	bl	80037b6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &skyla1_uart_rxData, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <Chip_Init+0x68>)
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <Chip_Init+0x6c>)
 8000694:	f003 f88f 	bl	80037b6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &creed1_uart_rxData, 1);
 8000698:	2201      	movs	r2, #1
 800069a:	490c      	ldr	r1, [pc, #48]	; (80006cc <Chip_Init+0x70>)
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <Chip_Init+0x74>)
 800069e:	f003 f88a 	bl	80037b6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, &skyla2_uart_rxData, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	490b      	ldr	r1, [pc, #44]	; (80006d4 <Chip_Init+0x78>)
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <Chip_Init+0x7c>)
 80006a8:	f003 f885 	bl	80037b6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &creed2_uart_rxData, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	490b      	ldr	r1, [pc, #44]	; (80006dc <Chip_Init+0x80>)
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <Chip_Init+0x84>)
 80006b2:	f003 f880 	bl	80037b6 <HAL_UART_Receive_IT>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200014ae 	.word	0x200014ae
 80006c0:	200064b4 	.word	0x200064b4
 80006c4:	20002972 	.word	0x20002972
 80006c8:	2000653c 	.word	0x2000653c
 80006cc:	20003d06 	.word	0x20003d06
 80006d0:	2000642c 	.word	0x2000642c
 80006d4:	20005096 	.word	0x20005096
 80006d8:	20006470 	.word	0x20006470
 80006dc:	20006426 	.word	0x20006426
 80006e0:	20006580 	.word	0x20006580

080006e4 <HAL_UART_RxCpltCallback>:
* 				stores RX data into buffers.
* Parameters:  	*huart --> the uart that triggered the interrupt
* Returns:     		(none)
******************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a7a      	ldr	r2, [pc, #488]	; (80008dc <HAL_UART_RxCpltCallback+0x1f8>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d12c      	bne.n	8000750 <HAL_UART_RxCpltCallback+0x6c>
	{
		pi_uart_rxBuffer[pi_array_end] = pi_uart_rxData;
 80006f6:	4b7a      	ldr	r3, [pc, #488]	; (80008e0 <HAL_UART_RxCpltCallback+0x1fc>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b79      	ldr	r3, [pc, #484]	; (80008e4 <HAL_UART_RxCpltCallback+0x200>)
 80006fe:	7819      	ldrb	r1, [r3, #0]
 8000700:	4b79      	ldr	r3, [pc, #484]	; (80008e8 <HAL_UART_RxCpltCallback+0x204>)
 8000702:	5499      	strb	r1, [r3, r2]
		if(pi_uart_rxData == 'p')
 8000704:	4b77      	ldr	r3, [pc, #476]	; (80008e4 <HAL_UART_RxCpltCallback+0x200>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b70      	cmp	r3, #112	; 0x70
 800070a:	d103      	bne.n	8000714 <HAL_UART_RxCpltCallback+0x30>
			application_state = MOLLY_SKYLA1;
 800070c:	4b77      	ldr	r3, [pc, #476]	; (80008ec <HAL_UART_RxCpltCallback+0x208>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e006      	b.n	8000722 <HAL_UART_RxCpltCallback+0x3e>
		else if(pi_uart_rxData == 'q')
 8000714:	4b73      	ldr	r3, [pc, #460]	; (80008e4 <HAL_UART_RxCpltCallback+0x200>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b71      	cmp	r3, #113	; 0x71
 800071a:	d102      	bne.n	8000722 <HAL_UART_RxCpltCallback+0x3e>
			application_state = MOLLY_SKYLA2;
 800071c:	4b73      	ldr	r3, [pc, #460]	; (80008ec <HAL_UART_RxCpltCallback+0x208>)
 800071e:	2202      	movs	r2, #2
 8000720:	701a      	strb	r2, [r3, #0]
		pi_array_end = (pi_array_end+1)%pi_buffer_size;
 8000722:	4b6f      	ldr	r3, [pc, #444]	; (80008e0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	4a71      	ldr	r2, [pc, #452]	; (80008f0 <HAL_UART_RxCpltCallback+0x20c>)
 800072a:	fb82 1203 	smull	r1, r2, r2, r3
 800072e:	12d1      	asrs	r1, r2, #11
 8000730:	17da      	asrs	r2, r3, #31
 8000732:	1a8a      	subs	r2, r1, r2
 8000734:	f241 3188 	movw	r1, #5000	; 0x1388
 8000738:	fb01 f202 	mul.w	r2, r1, r2
 800073c:	1a9a      	subs	r2, r3, r2
 800073e:	b292      	uxth	r2, r2
 8000740:	4b67      	ldr	r3, [pc, #412]	; (80008e0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000742:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &pi_uart_rxData, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	4967      	ldr	r1, [pc, #412]	; (80008e4 <HAL_UART_RxCpltCallback+0x200>)
 8000748:	486a      	ldr	r0, [pc, #424]	; (80008f4 <HAL_UART_RxCpltCallback+0x210>)
 800074a:	f003 f834 	bl	80037b6 <HAL_UART_Receive_IT>
		if(creed2_uart_rxData == '\n' || creed2_uart_rxData == '\r')
			creed2_send_flag = creed2_array_end;
		creed2_array_end = (creed2_array_end+1)%creed2_uart_buffer_size;
		HAL_UART_Receive_IT(&huart6, &creed2_uart_rxData, 1);
	}
}
 800074e:	e0c0      	b.n	80008d2 <HAL_UART_RxCpltCallback+0x1ee>
	else if(huart->Instance == USART3)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a68      	ldr	r2, [pc, #416]	; (80008f8 <HAL_UART_RxCpltCallback+0x214>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d12c      	bne.n	80007b4 <HAL_UART_RxCpltCallback+0xd0>
		skyla1_uart_rxBuffer[skyla1_array_end] = skyla1_uart_rxData;
 800075a:	4b68      	ldr	r3, [pc, #416]	; (80008fc <HAL_UART_RxCpltCallback+0x218>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	4b67      	ldr	r3, [pc, #412]	; (8000900 <HAL_UART_RxCpltCallback+0x21c>)
 8000762:	7819      	ldrb	r1, [r3, #0]
 8000764:	4b67      	ldr	r3, [pc, #412]	; (8000904 <HAL_UART_RxCpltCallback+0x220>)
 8000766:	5499      	strb	r1, [r3, r2]
		if(skyla1_uart_rxData == '\n' || skyla1_uart_rxData == '\r')
 8000768:	4b65      	ldr	r3, [pc, #404]	; (8000900 <HAL_UART_RxCpltCallback+0x21c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b0a      	cmp	r3, #10
 800076e:	d003      	beq.n	8000778 <HAL_UART_RxCpltCallback+0x94>
 8000770:	4b63      	ldr	r3, [pc, #396]	; (8000900 <HAL_UART_RxCpltCallback+0x21c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b0d      	cmp	r3, #13
 8000776:	d103      	bne.n	8000780 <HAL_UART_RxCpltCallback+0x9c>
			skyla1_send_flag = skyla1_array_end;
 8000778:	4b60      	ldr	r3, [pc, #384]	; (80008fc <HAL_UART_RxCpltCallback+0x218>)
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	4b62      	ldr	r3, [pc, #392]	; (8000908 <HAL_UART_RxCpltCallback+0x224>)
 800077e:	801a      	strh	r2, [r3, #0]
		skyla1_new_data = 1;
 8000780:	4b62      	ldr	r3, [pc, #392]	; (800090c <HAL_UART_RxCpltCallback+0x228>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
		skyla1_array_end = (skyla1_array_end+1)%skyla1_uart_buffer_size;
 8000786:	4b5d      	ldr	r3, [pc, #372]	; (80008fc <HAL_UART_RxCpltCallback+0x218>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a58      	ldr	r2, [pc, #352]	; (80008f0 <HAL_UART_RxCpltCallback+0x20c>)
 800078e:	fb82 1203 	smull	r1, r2, r2, r3
 8000792:	12d1      	asrs	r1, r2, #11
 8000794:	17da      	asrs	r2, r3, #31
 8000796:	1a8a      	subs	r2, r1, r2
 8000798:	f241 3188 	movw	r1, #5000	; 0x1388
 800079c:	fb01 f202 	mul.w	r2, r1, r2
 80007a0:	1a9a      	subs	r2, r3, r2
 80007a2:	b292      	uxth	r2, r2
 80007a4:	4b55      	ldr	r3, [pc, #340]	; (80008fc <HAL_UART_RxCpltCallback+0x218>)
 80007a6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &skyla1_uart_rxData, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	4955      	ldr	r1, [pc, #340]	; (8000900 <HAL_UART_RxCpltCallback+0x21c>)
 80007ac:	4858      	ldr	r0, [pc, #352]	; (8000910 <HAL_UART_RxCpltCallback+0x22c>)
 80007ae:	f003 f802 	bl	80037b6 <HAL_UART_Receive_IT>
}
 80007b2:	e08e      	b.n	80008d2 <HAL_UART_RxCpltCallback+0x1ee>
	else if(huart->Instance == UART4)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a56      	ldr	r2, [pc, #344]	; (8000914 <HAL_UART_RxCpltCallback+0x230>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d129      	bne.n	8000812 <HAL_UART_RxCpltCallback+0x12e>
		creed1_uart_rxBuffer[creed1_array_end] = creed1_uart_rxData;
 80007be:	4b56      	ldr	r3, [pc, #344]	; (8000918 <HAL_UART_RxCpltCallback+0x234>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b55      	ldr	r3, [pc, #340]	; (800091c <HAL_UART_RxCpltCallback+0x238>)
 80007c6:	7819      	ldrb	r1, [r3, #0]
 80007c8:	4b55      	ldr	r3, [pc, #340]	; (8000920 <HAL_UART_RxCpltCallback+0x23c>)
 80007ca:	5499      	strb	r1, [r3, r2]
		if(creed1_uart_rxData == '\n' || creed1_uart_rxData == '\r')
 80007cc:	4b53      	ldr	r3, [pc, #332]	; (800091c <HAL_UART_RxCpltCallback+0x238>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b0a      	cmp	r3, #10
 80007d2:	d003      	beq.n	80007dc <HAL_UART_RxCpltCallback+0xf8>
 80007d4:	4b51      	ldr	r3, [pc, #324]	; (800091c <HAL_UART_RxCpltCallback+0x238>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b0d      	cmp	r3, #13
 80007da:	d103      	bne.n	80007e4 <HAL_UART_RxCpltCallback+0x100>
			creed1_send_flag = creed1_array_end;
 80007dc:	4b4e      	ldr	r3, [pc, #312]	; (8000918 <HAL_UART_RxCpltCallback+0x234>)
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	4b50      	ldr	r3, [pc, #320]	; (8000924 <HAL_UART_RxCpltCallback+0x240>)
 80007e2:	801a      	strh	r2, [r3, #0]
		creed1_array_end = (creed1_array_end+1)%creed1_uart_buffer_size;
 80007e4:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <HAL_UART_RxCpltCallback+0x234>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a41      	ldr	r2, [pc, #260]	; (80008f0 <HAL_UART_RxCpltCallback+0x20c>)
 80007ec:	fb82 1203 	smull	r1, r2, r2, r3
 80007f0:	12d1      	asrs	r1, r2, #11
 80007f2:	17da      	asrs	r2, r3, #31
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80007fa:	fb01 f202 	mul.w	r2, r1, r2
 80007fe:	1a9a      	subs	r2, r3, r2
 8000800:	b292      	uxth	r2, r2
 8000802:	4b45      	ldr	r3, [pc, #276]	; (8000918 <HAL_UART_RxCpltCallback+0x234>)
 8000804:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &creed1_uart_rxData, 1);
 8000806:	2201      	movs	r2, #1
 8000808:	4944      	ldr	r1, [pc, #272]	; (800091c <HAL_UART_RxCpltCallback+0x238>)
 800080a:	4847      	ldr	r0, [pc, #284]	; (8000928 <HAL_UART_RxCpltCallback+0x244>)
 800080c:	f002 ffd3 	bl	80037b6 <HAL_UART_Receive_IT>
}
 8000810:	e05f      	b.n	80008d2 <HAL_UART_RxCpltCallback+0x1ee>
	else if(huart->Instance == UART5)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a45      	ldr	r2, [pc, #276]	; (800092c <HAL_UART_RxCpltCallback+0x248>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d12c      	bne.n	8000876 <HAL_UART_RxCpltCallback+0x192>
		skyla2_uart_rxBuffer[skyla2_array_end] = skyla2_uart_rxData;
 800081c:	4b44      	ldr	r3, [pc, #272]	; (8000930 <HAL_UART_RxCpltCallback+0x24c>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b44      	ldr	r3, [pc, #272]	; (8000934 <HAL_UART_RxCpltCallback+0x250>)
 8000824:	7819      	ldrb	r1, [r3, #0]
 8000826:	4b44      	ldr	r3, [pc, #272]	; (8000938 <HAL_UART_RxCpltCallback+0x254>)
 8000828:	5499      	strb	r1, [r3, r2]
		if(skyla2_uart_rxData == '\n' || skyla2_uart_rxData == '\r')
 800082a:	4b42      	ldr	r3, [pc, #264]	; (8000934 <HAL_UART_RxCpltCallback+0x250>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b0a      	cmp	r3, #10
 8000830:	d003      	beq.n	800083a <HAL_UART_RxCpltCallback+0x156>
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <HAL_UART_RxCpltCallback+0x250>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b0d      	cmp	r3, #13
 8000838:	d103      	bne.n	8000842 <HAL_UART_RxCpltCallback+0x15e>
			skyla2_send_flag = skyla2_array_end;
 800083a:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <HAL_UART_RxCpltCallback+0x24c>)
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	4b3f      	ldr	r3, [pc, #252]	; (800093c <HAL_UART_RxCpltCallback+0x258>)
 8000840:	801a      	strh	r2, [r3, #0]
		skyla2_new_data = 1;
 8000842:	4b3f      	ldr	r3, [pc, #252]	; (8000940 <HAL_UART_RxCpltCallback+0x25c>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
		skyla2_array_end = (skyla2_array_end+1)%skyla2_uart_buffer_size;
 8000848:	4b39      	ldr	r3, [pc, #228]	; (8000930 <HAL_UART_RxCpltCallback+0x24c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <HAL_UART_RxCpltCallback+0x20c>)
 8000850:	fb82 1203 	smull	r1, r2, r2, r3
 8000854:	12d1      	asrs	r1, r2, #11
 8000856:	17da      	asrs	r2, r3, #31
 8000858:	1a8a      	subs	r2, r1, r2
 800085a:	f241 3188 	movw	r1, #5000	; 0x1388
 800085e:	fb01 f202 	mul.w	r2, r1, r2
 8000862:	1a9a      	subs	r2, r3, r2
 8000864:	b292      	uxth	r2, r2
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <HAL_UART_RxCpltCallback+0x24c>)
 8000868:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, &skyla2_uart_rxData, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	4931      	ldr	r1, [pc, #196]	; (8000934 <HAL_UART_RxCpltCallback+0x250>)
 800086e:	4835      	ldr	r0, [pc, #212]	; (8000944 <HAL_UART_RxCpltCallback+0x260>)
 8000870:	f002 ffa1 	bl	80037b6 <HAL_UART_Receive_IT>
}
 8000874:	e02d      	b.n	80008d2 <HAL_UART_RxCpltCallback+0x1ee>
	else if(huart->Instance == USART6)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a33      	ldr	r2, [pc, #204]	; (8000948 <HAL_UART_RxCpltCallback+0x264>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d128      	bne.n	80008d2 <HAL_UART_RxCpltCallback+0x1ee>
		creed2_uart_rxBuffer[creed2_array_end] = creed2_uart_rxData;
 8000880:	4b32      	ldr	r3, [pc, #200]	; (800094c <HAL_UART_RxCpltCallback+0x268>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <HAL_UART_RxCpltCallback+0x26c>)
 8000888:	7819      	ldrb	r1, [r3, #0]
 800088a:	4b32      	ldr	r3, [pc, #200]	; (8000954 <HAL_UART_RxCpltCallback+0x270>)
 800088c:	5499      	strb	r1, [r3, r2]
		if(creed2_uart_rxData == '\n' || creed2_uart_rxData == '\r')
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <HAL_UART_RxCpltCallback+0x26c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b0a      	cmp	r3, #10
 8000894:	d003      	beq.n	800089e <HAL_UART_RxCpltCallback+0x1ba>
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <HAL_UART_RxCpltCallback+0x26c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b0d      	cmp	r3, #13
 800089c:	d103      	bne.n	80008a6 <HAL_UART_RxCpltCallback+0x1c2>
			creed2_send_flag = creed2_array_end;
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <HAL_UART_RxCpltCallback+0x268>)
 80008a0:	881a      	ldrh	r2, [r3, #0]
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <HAL_UART_RxCpltCallback+0x274>)
 80008a4:	801a      	strh	r2, [r3, #0]
		creed2_array_end = (creed2_array_end+1)%creed2_uart_buffer_size;
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <HAL_UART_RxCpltCallback+0x268>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_UART_RxCpltCallback+0x20c>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	12d1      	asrs	r1, r2, #11
 80008b4:	17da      	asrs	r2, r3, #31
 80008b6:	1a8a      	subs	r2, r1, r2
 80008b8:	f241 3188 	movw	r1, #5000	; 0x1388
 80008bc:	fb01 f202 	mul.w	r2, r1, r2
 80008c0:	1a9a      	subs	r2, r3, r2
 80008c2:	b292      	uxth	r2, r2
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_UART_RxCpltCallback+0x268>)
 80008c6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, &creed2_uart_rxData, 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	4921      	ldr	r1, [pc, #132]	; (8000950 <HAL_UART_RxCpltCallback+0x26c>)
 80008cc:	4823      	ldr	r0, [pc, #140]	; (800095c <HAL_UART_RxCpltCallback+0x278>)
 80008ce:	f002 ff72 	bl	80037b6 <HAL_UART_Receive_IT>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40011000 	.word	0x40011000
 80008e0:	200014ac 	.word	0x200014ac
 80008e4:	200014ae 	.word	0x200014ae
 80008e8:	20000124 	.word	0x20000124
 80008ec:	20000122 	.word	0x20000122
 80008f0:	68db8bad 	.word	0x68db8bad
 80008f4:	200064b4 	.word	0x200064b4
 80008f8:	40004800 	.word	0x40004800
 80008fc:	2000296e 	.word	0x2000296e
 8000900:	20002972 	.word	0x20002972
 8000904:	200015e4 	.word	0x200015e4
 8000908:	20002970 	.word	0x20002970
 800090c:	20002973 	.word	0x20002973
 8000910:	2000653c 	.word	0x2000653c
 8000914:	40004c00 	.word	0x40004c00
 8000918:	20003d02 	.word	0x20003d02
 800091c:	20003d06 	.word	0x20003d06
 8000920:	20002978 	.word	0x20002978
 8000924:	20003d04 	.word	0x20003d04
 8000928:	2000642c 	.word	0x2000642c
 800092c:	40005000 	.word	0x40005000
 8000930:	20005092 	.word	0x20005092
 8000934:	20005096 	.word	0x20005096
 8000938:	20003d08 	.word	0x20003d08
 800093c:	20005094 	.word	0x20005094
 8000940:	20005097 	.word	0x20005097
 8000944:	20006470 	.word	0x20006470
 8000948:	40011400 	.word	0x40011400
 800094c:	20006422 	.word	0x20006422
 8000950:	20006426 	.word	0x20006426
 8000954:	20005098 	.word	0x20005098
 8000958:	20006424 	.word	0x20006424
 800095c:	20006580 	.word	0x20006580

08000960 <Get_Application_State>:

uint8_t Get_Application_State(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	return application_state;
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <Get_Application_State+0x14>)
 8000966:	781b      	ldrb	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000122 	.word	0x20000122

08000978 <Skyla1_DataReady>:

uint8_t Skyla1_DataReady(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
	return skyla1_new_data;
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <Skyla1_DataReady+0x14>)
 800097e:	781b      	ldrb	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20002973 	.word	0x20002973

08000990 <Skyla2_DataReady>:

uint8_t Skyla2_DataReady(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	return skyla2_new_data;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <Skyla2_DataReady+0x14>)
 8000996:	781b      	ldrb	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20005097 	.word	0x20005097

080009a8 <Skyla1_GetData>:

uint8_t Skyla1_GetData(uint16_t head_subtracter)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
	skyla1_new_data = 0;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <Skyla1_GetData+0x44>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
	return skyla1_uart_rxBuffer[(skyla1_uart_buffer_size-1-head_subtracter+skyla1_array_end)%skyla1_uart_buffer_size];
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80009be:	3307      	adds	r3, #7
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <Skyla1_GetData+0x48>)
 80009c2:	8812      	ldrh	r2, [r2, #0]
 80009c4:	441a      	add	r2, r3
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <Skyla1_GetData+0x4c>)
 80009c8:	fb83 1302 	smull	r1, r3, r3, r2
 80009cc:	12d9      	asrs	r1, r3, #11
 80009ce:	17d3      	asrs	r3, r2, #31
 80009d0:	1acb      	subs	r3, r1, r3
 80009d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <Skyla1_GetData+0x50>)
 80009de:	5cd3      	ldrb	r3, [r2, r3]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20002973 	.word	0x20002973
 80009f0:	2000296e 	.word	0x2000296e
 80009f4:	68db8bad 	.word	0x68db8bad
 80009f8:	200015e4 	.word	0x200015e4

080009fc <Skyla2_GetData>:

uint8_t Skyla2_GetData(uint16_t head_subtracter)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
	skyla2_new_data = 0;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <Skyla2_GetData+0x44>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
	return skyla2_uart_rxBuffer[(skyla2_uart_buffer_size-1-head_subtracter+skyla2_array_end)%skyla2_uart_buffer_size];
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000a12:	3307      	adds	r3, #7
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <Skyla2_GetData+0x48>)
 8000a16:	8812      	ldrh	r2, [r2, #0]
 8000a18:	441a      	add	r2, r3
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <Skyla2_GetData+0x4c>)
 8000a1c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a20:	12d9      	asrs	r1, r3, #11
 8000a22:	17d3      	asrs	r3, r2, #31
 8000a24:	1acb      	subs	r3, r1, r3
 8000a26:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a2a:	fb01 f303 	mul.w	r3, r1, r3
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <Skyla2_GetData+0x50>)
 8000a32:	5cd3      	ldrb	r3, [r2, r3]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	20005097 	.word	0x20005097
 8000a44:	20005092 	.word	0x20005092
 8000a48:	68db8bad 	.word	0x68db8bad
 8000a4c:	20003d08 	.word	0x20003d08

08000a50 <Skyla1_Find_Word>:

uint8_t Skyla1_Find_Word(char* word)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b0c5      	sub	sp, #276	; 0x114
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a5e:	6018      	str	r0, [r3, #0]
	if(Skyla1_DataReady())
 8000a60:	f7ff ff8a 	bl	8000978 <Skyla1_DataReady>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d047      	beq.n	8000afa <Skyla1_Find_Word+0xaa>
	{
		uint16_t word_length = strlen(word);
 8000a6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	f7ff fbd6 	bl	8000224 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		char current_word[255] = {0};
 8000a7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	22fb      	movs	r2, #251	; 0xfb
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 fe53 	bl	800473c <memset>
		for(uint16_t i = 0; i<word_length; i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000a9c:	e016      	b.n	8000acc <Skyla1_Find_Word+0x7c>
			current_word[word_length-1-i] = Skyla1_GetData(i);
 8000a9e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000aa2:	1e5a      	subs	r2, r3, #1
 8000aa4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000aa8:	1ad4      	subs	r4, r2, r3
 8000aaa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff7a 	bl	80009a8 <Skyla1_GetData>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ac0:	551a      	strb	r2, [r3, r4]
		for(uint16_t i = 0; i<word_length; i++)
 8000ac2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000acc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000ad0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3e2      	bcc.n	8000a9e <Skyla1_Find_Word+0x4e>

		if(strcmp(current_word, word) == 0)
 8000ad8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000adc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ae0:	f107 020c 	add.w	r2, r7, #12
 8000ae4:	6819      	ldr	r1, [r3, #0]
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	f7ff fb92 	bl	8000210 <strcmp>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <Skyla1_Find_Word+0xa6>
			return 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e002      	b.n	8000afc <Skyla1_Find_Word+0xac>
		else
			return 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <Skyla1_Find_Word+0xac>
	}
	else
		return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd90      	pop	{r4, r7, pc}

08000b06 <Skyla2_Find_Word>:

uint8_t Skyla2_Find_Word(char* word)
{
 8000b06:	b590      	push	{r4, r7, lr}
 8000b08:	b0c5      	sub	sp, #276	; 0x114
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b14:	6018      	str	r0, [r3, #0]
	if(Skyla2_DataReady())
 8000b16:	f7ff ff3b 	bl	8000990 <Skyla2_DataReady>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d047      	beq.n	8000bb0 <Skyla2_Find_Word+0xaa>
	{
		uint16_t word_length = strlen(word);
 8000b20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	f7ff fb7b 	bl	8000224 <strlen>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		char current_word[255] = {0};
 8000b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	3304      	adds	r3, #4
 8000b42:	22fb      	movs	r2, #251	; 0xfb
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fdf8 	bl	800473c <memset>
		for(uint16_t i = 0; i<word_length; i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000b52:	e016      	b.n	8000b82 <Skyla2_Find_Word+0x7c>
			current_word[word_length-1-i] = Skyla2_GetData(i);
 8000b54:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000b5e:	1ad4      	subs	r4, r2, r3
 8000b60:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff49 	bl	80009fc <Skyla2_GetData>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b76:	551a      	strb	r2, [r3, r4]
		for(uint16_t i = 0; i<word_length; i++)
 8000b78:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000b82:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000b86:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d3e2      	bcc.n	8000b54 <Skyla2_Find_Word+0x4e>

		if(strcmp(current_word, word) == 0)
 8000b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b96:	f107 020c 	add.w	r2, r7, #12
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	4610      	mov	r0, r2
 8000b9e:	f7ff fb37 	bl	8000210 <strcmp>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <Skyla2_Find_Word+0xa6>
			return 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e002      	b.n	8000bb2 <Skyla2_Find_Word+0xac>
		else
			return 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	e000      	b.n	8000bb2 <Skyla2_Find_Word+0xac>
	}
	else
		return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd90      	pop	{r4, r7, pc}

08000bbc <Skyla1_GetInfo>:

uint8_t * Skyla1_GetInfo(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	if(Skyla1_DataReady())
 8000bc2:	f7ff fed9 	bl	8000978 <Skyla1_DataReady>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d037      	beq.n	8000c3c <Skyla1_GetInfo+0x80>
	{
		if(getinfo_find_fields)
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <Skyla1_GetInfo+0x8c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d021      	beq.n	8000c18 <Skyla1_GetInfo+0x5c>
		{
			char curr_char = Skyla1_GetData(0);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fee7 	bl	80009a8 <Skyla1_GetData>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
			getinfo_buffer[getinfo_buffer_head] = curr_char;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <Skyla1_GetInfo+0x90>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	4619      	mov	r1, r3
 8000be4:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <Skyla1_GetInfo+0x94>)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	5453      	strb	r3, [r2, r1]
			getinfo_buffer_head += 1;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <Skyla1_GetInfo+0x90>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <Skyla1_GetInfo+0x90>)
 8000bf4:	801a      	strh	r2, [r3, #0]

			if(curr_char == '|')
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b7c      	cmp	r3, #124	; 0x7c
 8000bfa:	d105      	bne.n	8000c08 <Skyla1_GetInfo+0x4c>
				getinfo_fields_found_count += 1;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <Skyla1_GetInfo+0x98>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <Skyla1_GetInfo+0x98>)
 8000c06:	701a      	strb	r2, [r3, #0]

			if(getinfo_fields_found_count == num_machine_readable_fields)
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <Skyla1_GetInfo+0x98>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b25      	cmp	r3, #37	; 0x25
 8000c0e:	d115      	bne.n	8000c3c <Skyla1_GetInfo+0x80>
				getinfo_buffer[0] = '1';
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <Skyla1_GetInfo+0x94>)
 8000c12:	2231      	movs	r2, #49	; 0x31
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e011      	b.n	8000c3c <Skyla1_GetInfo+0x80>
		}
		else
		{
			if(Skyla1_Find_Word("1."))
 8000c18:	480f      	ldr	r0, [pc, #60]	; (8000c58 <Skyla1_GetInfo+0x9c>)
 8000c1a:	f7ff ff19 	bl	8000a50 <Skyla1_Find_Word>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00b      	beq.n	8000c3c <Skyla1_GetInfo+0x80>
			{
				getinfo_buffer[1] = '.';
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <Skyla1_GetInfo+0x94>)
 8000c26:	222e      	movs	r2, #46	; 0x2e
 8000c28:	705a      	strb	r2, [r3, #1]
				getinfo_buffer_head = getinfo_buffer_head + 1;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <Skyla1_GetInfo+0x90>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <Skyla1_GetInfo+0x90>)
 8000c34:	801a      	strh	r2, [r3, #0]
				getinfo_find_fields = 1;
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <Skyla1_GetInfo+0x8c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return getinfo_buffer;
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <Skyla1_GetInfo+0x94>)
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200015dd 	.word	0x200015dd
 8000c4c:	200015de 	.word	0x200015de
 8000c50:	200014b0 	.word	0x200014b0
 8000c54:	200015dc 	.word	0x200015dc
 8000c58:	08005880 	.word	0x08005880

08000c5c <Skyla2_GetInfo>:

uint8_t * Skyla2_GetInfo(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
	if(Skyla2_DataReady())
 8000c62:	f7ff fe95 	bl	8000990 <Skyla2_DataReady>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d037      	beq.n	8000cdc <Skyla2_GetInfo+0x80>
	{
		if(getinfo_find_fields)
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <Skyla2_GetInfo+0x8c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d021      	beq.n	8000cb8 <Skyla2_GetInfo+0x5c>
		{
			char curr_char = Skyla2_GetData(0);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fec1 	bl	80009fc <Skyla2_GetData>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
			getinfo_buffer[getinfo_buffer_head] = curr_char;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <Skyla2_GetInfo+0x90>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	4619      	mov	r1, r3
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <Skyla2_GetInfo+0x94>)
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	5453      	strb	r3, [r2, r1]
			getinfo_buffer_head += 1;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <Skyla2_GetInfo+0x90>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <Skyla2_GetInfo+0x90>)
 8000c94:	801a      	strh	r2, [r3, #0]

			if(curr_char == '|')
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b7c      	cmp	r3, #124	; 0x7c
 8000c9a:	d105      	bne.n	8000ca8 <Skyla2_GetInfo+0x4c>
				getinfo_fields_found_count += 1;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <Skyla2_GetInfo+0x98>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <Skyla2_GetInfo+0x98>)
 8000ca6:	701a      	strb	r2, [r3, #0]

			if(getinfo_fields_found_count == num_machine_readable_fields)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <Skyla2_GetInfo+0x98>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b25      	cmp	r3, #37	; 0x25
 8000cae:	d115      	bne.n	8000cdc <Skyla2_GetInfo+0x80>
				getinfo_buffer[0] = '1';
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <Skyla2_GetInfo+0x94>)
 8000cb2:	2231      	movs	r2, #49	; 0x31
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e011      	b.n	8000cdc <Skyla2_GetInfo+0x80>
		}
		else
		{
			if(Skyla2_Find_Word("1."))
 8000cb8:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <Skyla2_GetInfo+0x9c>)
 8000cba:	f7ff ff24 	bl	8000b06 <Skyla2_Find_Word>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00b      	beq.n	8000cdc <Skyla2_GetInfo+0x80>
			{
				getinfo_buffer[1] = '.';
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <Skyla2_GetInfo+0x94>)
 8000cc6:	222e      	movs	r2, #46	; 0x2e
 8000cc8:	705a      	strb	r2, [r3, #1]
				getinfo_buffer_head = getinfo_buffer_head + 1;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <Skyla2_GetInfo+0x90>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <Skyla2_GetInfo+0x90>)
 8000cd4:	801a      	strh	r2, [r3, #0]
				getinfo_find_fields = 1;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <Skyla2_GetInfo+0x8c>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return getinfo_buffer;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <Skyla2_GetInfo+0x94>)
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200015dd 	.word	0x200015dd
 8000cec:	200015de 	.word	0x200015de
 8000cf0:	200014b0 	.word	0x200014b0
 8000cf4:	200015dc 	.word	0x200015dc
 8000cf8:	08005880 	.word	0x08005880

08000cfc <PrettySend_Skyla_Info_toPi>:
			"Network Key",								"Fuse Settings",						"Creed Transmit Frequency",		"RTCC Trim Value",						"Data Logger Send Pointer",
			"Build Version",								"Creed Settings",						"RTCC Control Value",				"Data Logger Next Sector",			"Data Logger Read Sector",
			"Data Logger Origin Sector",			"Data Logger Send Sector"
};
void PrettySend_Skyla_Info_toPi(uint8_t *payload, uint8_t skyla_num, uint8_t before_bool)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	70bb      	strb	r3, [r7, #2]
	char* tokens = strtok((char*) payload, "|");
 8000d0c:	4935      	ldr	r1, [pc, #212]	; (8000de4 <PrettySend_Skyla_Info_toPi+0xe8>)
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f003 fd54 	bl	80047bc <strtok>
 8000d14:	60f8      	str	r0, [r7, #12]
	uint8_t counter = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	72fb      	strb	r3, [r7, #11]

	while( tokens != NULL )
 8000d1a:	e05a      	b.n	8000dd2 <PrettySend_Skyla_Info_toPi+0xd6>
	{
		if(skyla_num == 1)
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d107      	bne.n	8000d32 <PrettySend_Skyla_Info_toPi+0x36>
			HAL_UART_Transmit(&huart1, (uint8_t*)"S1|", 3, 1000);
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	2203      	movs	r2, #3
 8000d28:	492f      	ldr	r1, [pc, #188]	; (8000de8 <PrettySend_Skyla_Info_toPi+0xec>)
 8000d2a:	4830      	ldr	r0, [pc, #192]	; (8000dec <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d2c:	f002 fcb1 	bl	8003692 <HAL_UART_Transmit>
 8000d30:	e006      	b.n	8000d40 <PrettySend_Skyla_Info_toPi+0x44>
		else
			HAL_UART_Transmit(&huart1, (uint8_t*)"S2|", 3, 1000);
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	2203      	movs	r2, #3
 8000d38:	492d      	ldr	r1, [pc, #180]	; (8000df0 <PrettySend_Skyla_Info_toPi+0xf4>)
 8000d3a:	482c      	ldr	r0, [pc, #176]	; (8000dec <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d3c:	f002 fca9 	bl	8003692 <HAL_UART_Transmit>

		if(before_bool)
 8000d40:	78bb      	ldrb	r3, [r7, #2]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d007      	beq.n	8000d56 <PrettySend_Skyla_Info_toPi+0x5a>
			HAL_UART_Transmit(&huart1, (uint8_t*)"B|", 2, 1000);
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4929      	ldr	r1, [pc, #164]	; (8000df4 <PrettySend_Skyla_Info_toPi+0xf8>)
 8000d4e:	4827      	ldr	r0, [pc, #156]	; (8000dec <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d50:	f002 fc9f 	bl	8003692 <HAL_UART_Transmit>
 8000d54:	e006      	b.n	8000d64 <PrettySend_Skyla_Info_toPi+0x68>
		else
			HAL_UART_Transmit(&huart1, (uint8_t*)"A|", 2, 1000);
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	4926      	ldr	r1, [pc, #152]	; (8000df8 <PrettySend_Skyla_Info_toPi+0xfc>)
 8000d5e:	4823      	ldr	r0, [pc, #140]	; (8000dec <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d60:	f002 fc97 	bl	8003692 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, (uint8_t*)titles[counter], strlen(titles[counter]), 1000);
 8000d64:	7afb      	ldrb	r3, [r7, #11]
 8000d66:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <PrettySend_Skyla_Info_toPi+0x100>)
 8000d68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <PrettySend_Skyla_Info_toPi+0x100>)
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa55 	bl	8000224 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	4621      	mov	r1, r4
 8000d84:	4819      	ldr	r0, [pc, #100]	; (8000dec <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d86:	f002 fc84 	bl	8003692 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"| ", 2, 1000);
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	2202      	movs	r2, #2
 8000d90:	491b      	ldr	r1, [pc, #108]	; (8000e00 <PrettySend_Skyla_Info_toPi+0x104>)
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <PrettySend_Skyla_Info_toPi+0xf0>)
 8000d94:	f002 fc7d 	bl	8003692 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)tokens, strlen(tokens), 1000);
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fa43 	bl	8000224 <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	68f9      	ldr	r1, [r7, #12]
 8000da8:	4810      	ldr	r0, [pc, #64]	; (8000dec <PrettySend_Skyla_Info_toPi+0xf0>)
 8000daa:	f002 fc72 	bl	8003692 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	2201      	movs	r2, #1
 8000db4:	4913      	ldr	r1, [pc, #76]	; (8000e04 <PrettySend_Skyla_Info_toPi+0x108>)
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <PrettySend_Skyla_Info_toPi+0xf0>)
 8000db8:	f002 fc6b 	bl	8003692 <HAL_UART_Transmit>

		tokens = strtok(NULL, "|");
 8000dbc:	4909      	ldr	r1, [pc, #36]	; (8000de4 <PrettySend_Skyla_Info_toPi+0xe8>)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f003 fcfc 	bl	80047bc <strtok>
 8000dc4:	60f8      	str	r0, [r7, #12]
		counter += 1;
 8000dc6:	7afb      	ldrb	r3, [r7, #11]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(10);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f001 fab5 	bl	800233c <HAL_Delay>
	while( tokens != NULL )
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1a1      	bne.n	8000d1c <PrettySend_Skyla_Info_toPi+0x20>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	bf00      	nop
 8000de4:	08005b74 	.word	0x08005b74
 8000de8:	08005b78 	.word	0x08005b78
 8000dec:	200064b4 	.word	0x200064b4
 8000df0:	08005b7c 	.word	0x08005b7c
 8000df4:	08005b80 	.word	0x08005b80
 8000df8:	08005b84 	.word	0x08005b84
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	08005b88 	.word	0x08005b88
 8000e04:	08005b8c 	.word	0x08005b8c

08000e08 <Skyla1_Molly_App>:

void Skyla1_Molly_App(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e0e:	af00      	add	r7, sp, #0
	switch(molly_skyla1_state)
 8000e10:	4bbd      	ldr	r3, [pc, #756]	; (8001108 <Skyla1_Molly_App+0x300>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	2b07      	cmp	r3, #7
 8000e18:	f200 8159 	bhi.w	80010ce <Skyla1_Molly_App+0x2c6>
 8000e1c:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <Skyla1_Molly_App+0x1c>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e45 	.word	0x08000e45
 8000e28:	08000e77 	.word	0x08000e77
 8000e2c:	08000eeb 	.word	0x08000eeb
 8000e30:	08000f2d 	.word	0x08000f2d
 8000e34:	08000f59 	.word	0x08000f59
 8000e38:	08000fb7 	.word	0x08000fb7
 8000e3c:	0800106f 	.word	0x0800106f
 8000e40:	0800109b 	.word	0x0800109b
	{
		case FIND_DEBUG:
			if(Skyla1_Find_Word("DEBUG"))
 8000e44:	48b1      	ldr	r0, [pc, #708]	; (800110c <Skyla1_Molly_App+0x304>)
 8000e46:	f7ff fe03 	bl	8000a50 <Skyla1_Find_Word>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 8155 	beq.w	80010fc <Skyla1_Molly_App+0x2f4>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L|Found debug\n", 14, 1000);
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	220e      	movs	r2, #14
 8000e58:	49ad      	ldr	r1, [pc, #692]	; (8001110 <Skyla1_Molly_App+0x308>)
 8000e5a:	48ae      	ldr	r0, [pc, #696]	; (8001114 <Skyla1_Molly_App+0x30c>)
 8000e5c:	f002 fc19 	bl	8003692 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*)"DEBUG", 5, 1000);
 8000e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e64:	2205      	movs	r2, #5
 8000e66:	49a9      	ldr	r1, [pc, #676]	; (800110c <Skyla1_Molly_App+0x304>)
 8000e68:	48ab      	ldr	r0, [pc, #684]	; (8001118 <Skyla1_Molly_App+0x310>)
 8000e6a:	f002 fc12 	bl	8003692 <HAL_UART_Transmit>
				molly_skyla1_state = GET_SETTINGS;
 8000e6e:	4ba6      	ldr	r3, [pc, #664]	; (8001108 <Skyla1_Molly_App+0x300>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e74:	e142      	b.n	80010fc <Skyla1_Molly_App+0x2f4>

		case GET_SETTINGS:
			memset(pi_uart_rxBuffer, 0, pi_buffer_size);
 8000e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	48a7      	ldr	r0, [pc, #668]	; (800111c <Skyla1_Molly_App+0x314>)
 8000e7e:	f003 fc5d 	bl	800473c <memset>
			pi_array_end = 0;
 8000e82:	4ba7      	ldr	r3, [pc, #668]	; (8001120 <Skyla1_Molly_App+0x318>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"send payload \r\n", 15, 1000);
 8000e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	49a5      	ldr	r1, [pc, #660]	; (8001124 <Skyla1_Molly_App+0x31c>)
 8000e90:	48a0      	ldr	r0, [pc, #640]	; (8001114 <Skyla1_Molly_App+0x30c>)
 8000e92:	f002 fbfe 	bl	8003692 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000e96:	2064      	movs	r0, #100	; 0x64
 8000e98:	f001 fa50 	bl	800233c <HAL_Delay>

			HAL_UART_Transmit(&huart1, (uint8_t*)"L| PL:", 6, 1000);
 8000e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea0:	2206      	movs	r2, #6
 8000ea2:	49a1      	ldr	r1, [pc, #644]	; (8001128 <Skyla1_Molly_App+0x320>)
 8000ea4:	489b      	ldr	r0, [pc, #620]	; (8001114 <Skyla1_Molly_App+0x30c>)
 8000ea6:	f002 fbf4 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)(char*)pi_uart_rxBuffer, strlen((char*)pi_uart_rxBuffer), 1000);
 8000eaa:	489c      	ldr	r0, [pc, #624]	; (800111c <Skyla1_Molly_App+0x314>)
 8000eac:	f7ff f9ba 	bl	8000224 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb8:	4998      	ldr	r1, [pc, #608]	; (800111c <Skyla1_Molly_App+0x314>)
 8000eba:	4896      	ldr	r0, [pc, #600]	; (8001114 <Skyla1_Molly_App+0x30c>)
 8000ebc:	f002 fbe9 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8000ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4999      	ldr	r1, [pc, #612]	; (800112c <Skyla1_Molly_App+0x324>)
 8000ec8:	4892      	ldr	r0, [pc, #584]	; (8001114 <Skyla1_Molly_App+0x30c>)
 8000eca:	f002 fbe2 	bl	8003692 <HAL_UART_Transmit>

			payload = pi_uart_rxBuffer;
 8000ece:	4b98      	ldr	r3, [pc, #608]	; (8001130 <Skyla1_Molly_App+0x328>)
 8000ed0:	4a92      	ldr	r2, [pc, #584]	; (800111c <Skyla1_Molly_App+0x314>)
 8000ed2:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*)"$", 1, 500);
 8000ed4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4996      	ldr	r1, [pc, #600]	; (8001134 <Skyla1_Molly_App+0x32c>)
 8000edc:	488e      	ldr	r0, [pc, #568]	; (8001118 <Skyla1_Molly_App+0x310>)
 8000ede:	f002 fbd8 	bl	8003692 <HAL_UART_Transmit>
			molly_skyla1_state = GET_MSG_P1;
 8000ee2:	4b89      	ldr	r3, [pc, #548]	; (8001108 <Skyla1_Molly_App+0x300>)
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	701a      	strb	r2, [r3, #0]
			break;
 8000ee8:	e155      	b.n	8001196 <Skyla1_Molly_App+0x38e>

		case GET_MSG_P1:
			if(Skyla1_Find_Word("NACK"))
 8000eea:	4893      	ldr	r0, [pc, #588]	; (8001138 <Skyla1_Molly_App+0x330>)
 8000eec:	f7ff fdb0 	bl	8000a50 <Skyla1_Find_Word>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 8104 	beq.w	8001100 <Skyla1_Molly_App+0x2f8>
			{
				memset(getinfo_buffer, 0, getinfo_buffer_size);
 8000ef8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000efc:	2100      	movs	r1, #0
 8000efe:	488f      	ldr	r0, [pc, #572]	; (800113c <Skyla1_Molly_App+0x334>)
 8000f00:	f003 fc1c 	bl	800473c <memset>
				getinfo_buffer_head = 1;
 8000f04:	4b8e      	ldr	r3, [pc, #568]	; (8001140 <Skyla1_Molly_App+0x338>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	801a      	strh	r2, [r3, #0]
				getinfo_fields_found_count = 0;
 8000f0a:	4b8e      	ldr	r3, [pc, #568]	; (8001144 <Skyla1_Molly_App+0x33c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
				getinfo_find_fields = 0;
 8000f10:	4b8d      	ldr	r3, [pc, #564]	; (8001148 <Skyla1_Molly_App+0x340>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)"#", 1, 500);
 8000f16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	498b      	ldr	r1, [pc, #556]	; (800114c <Skyla1_Molly_App+0x344>)
 8000f1e:	487e      	ldr	r0, [pc, #504]	; (8001118 <Skyla1_Molly_App+0x310>)
 8000f20:	f002 fbb7 	bl	8003692 <HAL_UART_Transmit>
				molly_skyla1_state = GET_MSG_P2;
 8000f24:	4b78      	ldr	r3, [pc, #480]	; (8001108 <Skyla1_Molly_App+0x300>)
 8000f26:	2204      	movs	r2, #4
 8000f28:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f2a:	e0e9      	b.n	8001100 <Skyla1_Molly_App+0x2f8>

		case GET_MSG_P2:
			brd_msg = Skyla1_GetInfo();
 8000f2c:	f7ff fe46 	bl	8000bbc <Skyla1_GetInfo>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a87      	ldr	r2, [pc, #540]	; (8001150 <Skyla1_Molly_App+0x348>)
 8000f34:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 8000f36:	4b86      	ldr	r3, [pc, #536]	; (8001150 <Skyla1_Molly_App+0x348>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b31      	cmp	r3, #49	; 0x31
 8000f3e:	f040 80e1 	bne.w	8001104 <Skyla1_Molly_App+0x2fc>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 1, 1);
 8000f42:	4b83      	ldr	r3, [pc, #524]	; (8001150 <Skyla1_Molly_App+0x348>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2201      	movs	r2, #1
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fed6 	bl	8000cfc <PrettySend_Skyla_Info_toPi>
				molly_skyla1_state = MOLLY_P1;
 8000f50:	4b6d      	ldr	r3, [pc, #436]	; (8001108 <Skyla1_Molly_App+0x300>)
 8000f52:	2205      	movs	r2, #5
 8000f54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f56:	e0d5      	b.n	8001104 <Skyla1_Molly_App+0x2fc>

		case MOLLY_P1:
			if(Skyla1_Find_Word("N"))
 8000f58:	487e      	ldr	r0, [pc, #504]	; (8001154 <Skyla1_Molly_App+0x34c>)
 8000f5a:	f7ff fd79 	bl	8000a50 <Skyla1_Find_Word>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <Skyla1_Molly_App+0x162>
					skyla1_new_data = 0;
 8000f64:	4b7c      	ldr	r3, [pc, #496]	; (8001158 <Skyla1_Molly_App+0x350>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
			char strC[500];
			char * settings_char = "$$";
 8000f6a:	4b7c      	ldr	r3, [pc, #496]	; (800115c <Skyla1_Molly_App+0x354>)
 8000f6c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			strncpy(strC, settings_char, 1);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2201      	movs	r2, #1
 8000f74:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fbf6 	bl	800476a <strncpy>
			strC[1] = '\0';
 8000f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f86:	2200      	movs	r2, #0
 8000f88:	705a      	strb	r2, [r3, #1]
			strcat(strC, (char*)payload);
 8000f8a:	4b69      	ldr	r3, [pc, #420]	; (8001130 <Skyla1_Molly_App+0x328>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f003 fbda 	bl	800474c <strcat>
			HAL_UART_Transmit(&huart3, (uint8_t*) strC, strlen(strC), 50);
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff f942 	bl	8000224 <strlen>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	1d39      	adds	r1, r7, #4
 8000fa6:	2332      	movs	r3, #50	; 0x32
 8000fa8:	485b      	ldr	r0, [pc, #364]	; (8001118 <Skyla1_Molly_App+0x310>)
 8000faa:	f002 fb72 	bl	8003692 <HAL_UART_Transmit>
			molly_skyla1_state = MOLLY_P2;
 8000fae:	4b56      	ldr	r3, [pc, #344]	; (8001108 <Skyla1_Molly_App+0x300>)
 8000fb0:	2206      	movs	r2, #6
 8000fb2:	701a      	strb	r2, [r3, #0]
			break;
 8000fb4:	e0ef      	b.n	8001196 <Skyla1_Molly_App+0x38e>

		case MOLLY_P2:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| in molly \n", 13, 500);
 8000fb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fba:	220d      	movs	r2, #13
 8000fbc:	4968      	ldr	r1, [pc, #416]	; (8001160 <Skyla1_Molly_App+0x358>)
 8000fbe:	4855      	ldr	r0, [pc, #340]	; (8001114 <Skyla1_Molly_App+0x30c>)
 8000fc0:	f002 fb67 	bl	8003692 <HAL_UART_Transmit>
			while(1)
			{
				if(Skyla1_Find_Word(":"))
 8000fc4:	4867      	ldr	r0, [pc, #412]	; (8001164 <Skyla1_Molly_App+0x35c>)
 8000fc6:	f7ff fd43 	bl	8000a50 <Skyla1_Find_Word>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f9      	beq.n	8000fc4 <Skyla1_Molly_App+0x1bc>
				{
					char * curr_string = (char*)&skyla1_uart_rxBuffer[skyla1_array_start+1];
 8000fd0:	4b65      	ldr	r3, [pc, #404]	; (8001168 <Skyla1_Molly_App+0x360>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4a65      	ldr	r2, [pc, #404]	; (800116c <Skyla1_Molly_App+0x364>)
 8000fd8:	4413      	add	r3, r2
 8000fda:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
					char * find_pass = strstr(curr_string, "PASS");
 8000fde:	4964      	ldr	r1, [pc, #400]	; (8001170 <Skyla1_Molly_App+0x368>)
 8000fe0:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8000fe4:	f003 fbd4 	bl	8004790 <strstr>
 8000fe8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					char * find_fail = strstr(curr_string, "FAIL");
 8000fec:	4961      	ldr	r1, [pc, #388]	; (8001174 <Skyla1_Molly_App+0x36c>)
 8000fee:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8000ff2:	f003 fbcd 	bl	8004790 <strstr>
 8000ff6:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
					if(find_pass != NULL)
 8000ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d020      	beq.n	8001044 <Skyla1_Molly_App+0x23c>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD PASS \n", 15, 500);
 8001002:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001006:	220f      	movs	r2, #15
 8001008:	495b      	ldr	r1, [pc, #364]	; (8001178 <Skyla1_Molly_App+0x370>)
 800100a:	4842      	ldr	r0, [pc, #264]	; (8001114 <Skyla1_Molly_App+0x30c>)
 800100c:	f002 fb41 	bl	8003692 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t*)"#", 1, 500);
 8001010:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001014:	2201      	movs	r2, #1
 8001016:	494d      	ldr	r1, [pc, #308]	; (800114c <Skyla1_Molly_App+0x344>)
 8001018:	483f      	ldr	r0, [pc, #252]	; (8001118 <Skyla1_Molly_App+0x310>)
 800101a:	f002 fb3a 	bl	8003692 <HAL_UART_Transmit>
						memset(getinfo_buffer, 0, getinfo_buffer_size);
 800101e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001022:	2100      	movs	r1, #0
 8001024:	4845      	ldr	r0, [pc, #276]	; (800113c <Skyla1_Molly_App+0x334>)
 8001026:	f003 fb89 	bl	800473c <memset>
						getinfo_buffer_head = 1;
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <Skyla1_Molly_App+0x338>)
 800102c:	2201      	movs	r2, #1
 800102e:	801a      	strh	r2, [r3, #0]
						getinfo_fields_found_count = 0;
 8001030:	4b44      	ldr	r3, [pc, #272]	; (8001144 <Skyla1_Molly_App+0x33c>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
						getinfo_find_fields = 0;
 8001036:	4b44      	ldr	r3, [pc, #272]	; (8001148 <Skyla1_Molly_App+0x340>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
						molly_skyla1_state = GET_MSG_P3;
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <Skyla1_Molly_App+0x300>)
 800103e:	2207      	movs	r2, #7
 8001040:	701a      	strb	r2, [r3, #0]
						break;
 8001042:	e013      	b.n	800106c <Skyla1_Molly_App+0x264>
					}
					else if(find_fail != NULL)
 8001044:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00a      	beq.n	8001062 <Skyla1_Molly_App+0x25a>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD FAIL!!! \n", 18, 500);
 800104c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001050:	2212      	movs	r2, #18
 8001052:	494a      	ldr	r1, [pc, #296]	; (800117c <Skyla1_Molly_App+0x374>)
 8001054:	482f      	ldr	r0, [pc, #188]	; (8001114 <Skyla1_Molly_App+0x30c>)
 8001056:	f002 fb1c 	bl	8003692 <HAL_UART_Transmit>
						molly_skyla1_state = FINISH_MOLLY;
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <Skyla1_Molly_App+0x300>)
 800105c:	2208      	movs	r2, #8
 800105e:	701a      	strb	r2, [r3, #0]
						break;
 8001060:	e004      	b.n	800106c <Skyla1_Molly_App+0x264>
					}
					skyla1_array_start = skyla1_array_end;
 8001062:	4b47      	ldr	r3, [pc, #284]	; (8001180 <Skyla1_Molly_App+0x378>)
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <Skyla1_Molly_App+0x360>)
 8001068:	801a      	strh	r2, [r3, #0]
				if(Skyla1_Find_Word(":"))
 800106a:	e7ab      	b.n	8000fc4 <Skyla1_Molly_App+0x1bc>
				}
			}
			break;
 800106c:	e093      	b.n	8001196 <Skyla1_Molly_App+0x38e>

		case GET_MSG_P3:
			brd_msg = Skyla1_GetInfo();
 800106e:	f7ff fda5 	bl	8000bbc <Skyla1_GetInfo>
 8001072:	4603      	mov	r3, r0
 8001074:	4a36      	ldr	r2, [pc, #216]	; (8001150 <Skyla1_Molly_App+0x348>)
 8001076:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 8001078:	4b35      	ldr	r3, [pc, #212]	; (8001150 <Skyla1_Molly_App+0x348>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b31      	cmp	r3, #49	; 0x31
 8001080:	f040 8088 	bne.w	8001194 <Skyla1_Molly_App+0x38c>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 1, 0);
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <Skyla1_Molly_App+0x348>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	2101      	movs	r1, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fe35 	bl	8000cfc <PrettySend_Skyla_Info_toPi>
				molly_skyla1_state = FINISH_MOLLY;
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <Skyla1_Molly_App+0x300>)
 8001094:	2208      	movs	r2, #8
 8001096:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001098:	e07c      	b.n	8001194 <Skyla1_Molly_App+0x38c>

		case FINISH_MOLLY:
			HAL_GPIO_WritePin(UART_MUX_SELA_Port, UART_MUX_SELA_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	4838      	ldr	r0, [pc, #224]	; (8001184 <Skyla1_Molly_App+0x37c>)
 80010a2:	f001 fca7 	bl	80029f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UART_MUX_INH_Port, UART_MUX_INH_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	4835      	ldr	r0, [pc, #212]	; (8001184 <Skyla1_Molly_App+0x37c>)
 80010ae:	f001 fca1 	bl	80029f4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, (uint8_t*)"molly complete \r\n", 17, 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	2211      	movs	r2, #17
 80010b8:	4933      	ldr	r1, [pc, #204]	; (8001188 <Skyla1_Molly_App+0x380>)
 80010ba:	4816      	ldr	r0, [pc, #88]	; (8001114 <Skyla1_Molly_App+0x30c>)
 80010bc:	f002 fae9 	bl	8003692 <HAL_UART_Transmit>
			molly_skyla1_state = DEFAULT;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <Skyla1_Molly_App+0x300>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <Skyla1_Molly_App+0x384>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
			break;
 80010cc:	e063      	b.n	8001196 <Skyla1_Molly_App+0x38e>

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| Received molly command. \r\n", 29, 1000);
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	221d      	movs	r2, #29
 80010d4:	492e      	ldr	r1, [pc, #184]	; (8001190 <Skyla1_Molly_App+0x388>)
 80010d6:	480f      	ldr	r0, [pc, #60]	; (8001114 <Skyla1_Molly_App+0x30c>)
 80010d8:	f002 fadb 	bl	8003692 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(UART_MUX_SELA_Port, UART_MUX_SELA_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e2:	4828      	ldr	r0, [pc, #160]	; (8001184 <Skyla1_Molly_App+0x37c>)
 80010e4:	f001 fc86 	bl	80029f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UART_MUX_INH_Port, UART_MUX_INH_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ee:	4825      	ldr	r0, [pc, #148]	; (8001184 <Skyla1_Molly_App+0x37c>)
 80010f0:	f001 fc80 	bl	80029f4 <HAL_GPIO_WritePin>
			molly_skyla1_state = FIND_DEBUG;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <Skyla1_Molly_App+0x300>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
			break;
 80010fa:	e04c      	b.n	8001196 <Skyla1_Molly_App+0x38e>
			break;
 80010fc:	bf00      	nop
 80010fe:	e04a      	b.n	8001196 <Skyla1_Molly_App+0x38e>
			break;
 8001100:	bf00      	nop
 8001102:	e048      	b.n	8001196 <Skyla1_Molly_App+0x38e>
			break;
 8001104:	bf00      	nop
 8001106:	e046      	b.n	8001196 <Skyla1_Molly_App+0x38e>
 8001108:	20000120 	.word	0x20000120
 800110c:	08005b90 	.word	0x08005b90
 8001110:	08005b98 	.word	0x08005b98
 8001114:	200064b4 	.word	0x200064b4
 8001118:	2000653c 	.word	0x2000653c
 800111c:	20000124 	.word	0x20000124
 8001120:	200014ac 	.word	0x200014ac
 8001124:	08005ba8 	.word	0x08005ba8
 8001128:	08005bb8 	.word	0x08005bb8
 800112c:	08005b8c 	.word	0x08005b8c
 8001130:	20002974 	.word	0x20002974
 8001134:	08005bc0 	.word	0x08005bc0
 8001138:	08005bc4 	.word	0x08005bc4
 800113c:	200014b0 	.word	0x200014b0
 8001140:	200015de 	.word	0x200015de
 8001144:	200015dc 	.word	0x200015dc
 8001148:	200015dd 	.word	0x200015dd
 800114c:	08005bcc 	.word	0x08005bcc
 8001150:	200015e0 	.word	0x200015e0
 8001154:	08005bd0 	.word	0x08005bd0
 8001158:	20002973 	.word	0x20002973
 800115c:	08005bd4 	.word	0x08005bd4
 8001160:	08005bd8 	.word	0x08005bd8
 8001164:	08005be8 	.word	0x08005be8
 8001168:	2000296c 	.word	0x2000296c
 800116c:	200015e4 	.word	0x200015e4
 8001170:	08005bec 	.word	0x08005bec
 8001174:	08005bf4 	.word	0x08005bf4
 8001178:	08005bfc 	.word	0x08005bfc
 800117c:	08005c0c 	.word	0x08005c0c
 8001180:	2000296e 	.word	0x2000296e
 8001184:	40020800 	.word	0x40020800
 8001188:	08005c20 	.word	0x08005c20
 800118c:	20000122 	.word	0x20000122
 8001190:	08005c34 	.word	0x08005c34
			break;
 8001194:	bf00      	nop
	}
}
 8001196:	bf00      	nop
 8001198:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Skyla2_Molly_App>:

void Skyla2_Molly_App(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80011a6:	af00      	add	r7, sp, #0
	switch(molly_skyla2_state)
 80011a8:	4bbd      	ldr	r3, [pc, #756]	; (80014a0 <Skyla2_Molly_App+0x300>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	f200 8159 	bhi.w	8001466 <Skyla2_Molly_App+0x2c6>
 80011b4:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <Skyla2_Molly_App+0x1c>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011dd 	.word	0x080011dd
 80011c0:	0800120f 	.word	0x0800120f
 80011c4:	08001283 	.word	0x08001283
 80011c8:	080012c5 	.word	0x080012c5
 80011cc:	080012f1 	.word	0x080012f1
 80011d0:	0800134f 	.word	0x0800134f
 80011d4:	08001407 	.word	0x08001407
 80011d8:	08001433 	.word	0x08001433
	{
		case FIND_DEBUG:
			if(Skyla2_Find_Word("DEBUG"))
 80011dc:	48b1      	ldr	r0, [pc, #708]	; (80014a4 <Skyla2_Molly_App+0x304>)
 80011de:	f7ff fc92 	bl	8000b06 <Skyla2_Find_Word>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 8155 	beq.w	8001494 <Skyla2_Molly_App+0x2f4>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L|Found debug\n", 14, 1000);
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	220e      	movs	r2, #14
 80011f0:	49ad      	ldr	r1, [pc, #692]	; (80014a8 <Skyla2_Molly_App+0x308>)
 80011f2:	48ae      	ldr	r0, [pc, #696]	; (80014ac <Skyla2_Molly_App+0x30c>)
 80011f4:	f002 fa4d 	bl	8003692 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart5, (uint8_t*)"DEBUG", 5, 1000);
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	2205      	movs	r2, #5
 80011fe:	49a9      	ldr	r1, [pc, #676]	; (80014a4 <Skyla2_Molly_App+0x304>)
 8001200:	48ab      	ldr	r0, [pc, #684]	; (80014b0 <Skyla2_Molly_App+0x310>)
 8001202:	f002 fa46 	bl	8003692 <HAL_UART_Transmit>
				molly_skyla2_state = GET_SETTINGS;
 8001206:	4ba6      	ldr	r3, [pc, #664]	; (80014a0 <Skyla2_Molly_App+0x300>)
 8001208:	2202      	movs	r2, #2
 800120a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800120c:	e142      	b.n	8001494 <Skyla2_Molly_App+0x2f4>

		case GET_SETTINGS:
			memset(pi_uart_rxBuffer, 0, pi_buffer_size);
 800120e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001212:	2100      	movs	r1, #0
 8001214:	48a7      	ldr	r0, [pc, #668]	; (80014b4 <Skyla2_Molly_App+0x314>)
 8001216:	f003 fa91 	bl	800473c <memset>
			pi_array_end = 0;
 800121a:	4ba7      	ldr	r3, [pc, #668]	; (80014b8 <Skyla2_Molly_App+0x318>)
 800121c:	2200      	movs	r2, #0
 800121e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"send payload \r\n", 15, 1000);
 8001220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001224:	220f      	movs	r2, #15
 8001226:	49a5      	ldr	r1, [pc, #660]	; (80014bc <Skyla2_Molly_App+0x31c>)
 8001228:	48a0      	ldr	r0, [pc, #640]	; (80014ac <Skyla2_Molly_App+0x30c>)
 800122a:	f002 fa32 	bl	8003692 <HAL_UART_Transmit>
			HAL_Delay(100);
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f001 f884 	bl	800233c <HAL_Delay>

			HAL_UART_Transmit(&huart1, (uint8_t*)"L| PL:", 6, 1000);
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	2206      	movs	r2, #6
 800123a:	49a1      	ldr	r1, [pc, #644]	; (80014c0 <Skyla2_Molly_App+0x320>)
 800123c:	489b      	ldr	r0, [pc, #620]	; (80014ac <Skyla2_Molly_App+0x30c>)
 800123e:	f002 fa28 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)(char*)pi_uart_rxBuffer, strlen((char*)pi_uart_rxBuffer), 1000);
 8001242:	489c      	ldr	r0, [pc, #624]	; (80014b4 <Skyla2_Molly_App+0x314>)
 8001244:	f7fe ffee 	bl	8000224 <strlen>
 8001248:	4603      	mov	r3, r0
 800124a:	b29a      	uxth	r2, r3
 800124c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001250:	4998      	ldr	r1, [pc, #608]	; (80014b4 <Skyla2_Molly_App+0x314>)
 8001252:	4896      	ldr	r0, [pc, #600]	; (80014ac <Skyla2_Molly_App+0x30c>)
 8001254:	f002 fa1d 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8001258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125c:	2201      	movs	r2, #1
 800125e:	4999      	ldr	r1, [pc, #612]	; (80014c4 <Skyla2_Molly_App+0x324>)
 8001260:	4892      	ldr	r0, [pc, #584]	; (80014ac <Skyla2_Molly_App+0x30c>)
 8001262:	f002 fa16 	bl	8003692 <HAL_UART_Transmit>

			payload = pi_uart_rxBuffer;
 8001266:	4b98      	ldr	r3, [pc, #608]	; (80014c8 <Skyla2_Molly_App+0x328>)
 8001268:	4a92      	ldr	r2, [pc, #584]	; (80014b4 <Skyla2_Molly_App+0x314>)
 800126a:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart5, (uint8_t*)"$", 1, 500);
 800126c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001270:	2201      	movs	r2, #1
 8001272:	4996      	ldr	r1, [pc, #600]	; (80014cc <Skyla2_Molly_App+0x32c>)
 8001274:	488e      	ldr	r0, [pc, #568]	; (80014b0 <Skyla2_Molly_App+0x310>)
 8001276:	f002 fa0c 	bl	8003692 <HAL_UART_Transmit>
			molly_skyla2_state = GET_MSG_P1;
 800127a:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <Skyla2_Molly_App+0x300>)
 800127c:	2203      	movs	r2, #3
 800127e:	701a      	strb	r2, [r3, #0]
			break;
 8001280:	e155      	b.n	800152e <Skyla2_Molly_App+0x38e>

		case GET_MSG_P1:
			if(Skyla2_Find_Word("NACK"))
 8001282:	4893      	ldr	r0, [pc, #588]	; (80014d0 <Skyla2_Molly_App+0x330>)
 8001284:	f7ff fc3f 	bl	8000b06 <Skyla2_Find_Word>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8104 	beq.w	8001498 <Skyla2_Molly_App+0x2f8>
			{
				memset(getinfo_buffer, 0, getinfo_buffer_size);
 8001290:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001294:	2100      	movs	r1, #0
 8001296:	488f      	ldr	r0, [pc, #572]	; (80014d4 <Skyla2_Molly_App+0x334>)
 8001298:	f003 fa50 	bl	800473c <memset>
				getinfo_buffer_head = 1;
 800129c:	4b8e      	ldr	r3, [pc, #568]	; (80014d8 <Skyla2_Molly_App+0x338>)
 800129e:	2201      	movs	r2, #1
 80012a0:	801a      	strh	r2, [r3, #0]
				getinfo_fields_found_count = 0;
 80012a2:	4b8e      	ldr	r3, [pc, #568]	; (80014dc <Skyla2_Molly_App+0x33c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
				getinfo_find_fields = 0;
 80012a8:	4b8d      	ldr	r3, [pc, #564]	; (80014e0 <Skyla2_Molly_App+0x340>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart5, (uint8_t*)"#", 1, 500);
 80012ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012b2:	2201      	movs	r2, #1
 80012b4:	498b      	ldr	r1, [pc, #556]	; (80014e4 <Skyla2_Molly_App+0x344>)
 80012b6:	487e      	ldr	r0, [pc, #504]	; (80014b0 <Skyla2_Molly_App+0x310>)
 80012b8:	f002 f9eb 	bl	8003692 <HAL_UART_Transmit>
				molly_skyla2_state = GET_MSG_P2;
 80012bc:	4b78      	ldr	r3, [pc, #480]	; (80014a0 <Skyla2_Molly_App+0x300>)
 80012be:	2204      	movs	r2, #4
 80012c0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80012c2:	e0e9      	b.n	8001498 <Skyla2_Molly_App+0x2f8>

		case GET_MSG_P2:
			brd_msg = Skyla2_GetInfo();
 80012c4:	f7ff fcca 	bl	8000c5c <Skyla2_GetInfo>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a87      	ldr	r2, [pc, #540]	; (80014e8 <Skyla2_Molly_App+0x348>)
 80012cc:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 80012ce:	4b86      	ldr	r3, [pc, #536]	; (80014e8 <Skyla2_Molly_App+0x348>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b31      	cmp	r3, #49	; 0x31
 80012d6:	f040 80e1 	bne.w	800149c <Skyla2_Molly_App+0x2fc>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 2, 1);
 80012da:	4b83      	ldr	r3, [pc, #524]	; (80014e8 <Skyla2_Molly_App+0x348>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	2102      	movs	r1, #2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd0a 	bl	8000cfc <PrettySend_Skyla_Info_toPi>
				molly_skyla2_state = MOLLY_P1;
 80012e8:	4b6d      	ldr	r3, [pc, #436]	; (80014a0 <Skyla2_Molly_App+0x300>)
 80012ea:	2205      	movs	r2, #5
 80012ec:	701a      	strb	r2, [r3, #0]
			}
			break;
 80012ee:	e0d5      	b.n	800149c <Skyla2_Molly_App+0x2fc>

		case MOLLY_P1:
			if(Skyla2_Find_Word("N"))
 80012f0:	487e      	ldr	r0, [pc, #504]	; (80014ec <Skyla2_Molly_App+0x34c>)
 80012f2:	f7ff fc08 	bl	8000b06 <Skyla2_Find_Word>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <Skyla2_Molly_App+0x162>
					skyla1_new_data = 0;
 80012fc:	4b7c      	ldr	r3, [pc, #496]	; (80014f0 <Skyla2_Molly_App+0x350>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
			char strC[500];
			char * settings_char = "$$";
 8001302:	4b7c      	ldr	r3, [pc, #496]	; (80014f4 <Skyla2_Molly_App+0x354>)
 8001304:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			strncpy(strC, settings_char, 1);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2201      	movs	r2, #1
 800130c:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fa2a 	bl	800476a <strncpy>
			strC[1] = '\0';
 8001316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800131e:	2200      	movs	r2, #0
 8001320:	705a      	strb	r2, [r3, #1]
			strcat(strC, (char*)payload);
 8001322:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <Skyla2_Molly_App+0x328>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f003 fa0e 	bl	800474c <strcat>
			HAL_UART_Transmit(&huart5, (uint8_t*) strC, strlen(strC), 50);
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ff76 	bl	8000224 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	1d39      	adds	r1, r7, #4
 800133e:	2332      	movs	r3, #50	; 0x32
 8001340:	485b      	ldr	r0, [pc, #364]	; (80014b0 <Skyla2_Molly_App+0x310>)
 8001342:	f002 f9a6 	bl	8003692 <HAL_UART_Transmit>
			molly_skyla2_state = MOLLY_P2;
 8001346:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <Skyla2_Molly_App+0x300>)
 8001348:	2206      	movs	r2, #6
 800134a:	701a      	strb	r2, [r3, #0]
			break;
 800134c:	e0ef      	b.n	800152e <Skyla2_Molly_App+0x38e>

		case MOLLY_P2:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| in molly \n", 13, 500);
 800134e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001352:	220d      	movs	r2, #13
 8001354:	4968      	ldr	r1, [pc, #416]	; (80014f8 <Skyla2_Molly_App+0x358>)
 8001356:	4855      	ldr	r0, [pc, #340]	; (80014ac <Skyla2_Molly_App+0x30c>)
 8001358:	f002 f99b 	bl	8003692 <HAL_UART_Transmit>
			while(1)
			{
				if(Skyla2_Find_Word(":"))
 800135c:	4867      	ldr	r0, [pc, #412]	; (80014fc <Skyla2_Molly_App+0x35c>)
 800135e:	f7ff fbd2 	bl	8000b06 <Skyla2_Find_Word>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f9      	beq.n	800135c <Skyla2_Molly_App+0x1bc>
				{
					char * curr_string = (char*)&skyla2_uart_rxBuffer[skyla2_array_start+1];
 8001368:	4b65      	ldr	r3, [pc, #404]	; (8001500 <Skyla2_Molly_App+0x360>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a65      	ldr	r2, [pc, #404]	; (8001504 <Skyla2_Molly_App+0x364>)
 8001370:	4413      	add	r3, r2
 8001372:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
					char * find_pass = strstr(curr_string, "PASS");
 8001376:	4964      	ldr	r1, [pc, #400]	; (8001508 <Skyla2_Molly_App+0x368>)
 8001378:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800137c:	f003 fa08 	bl	8004790 <strstr>
 8001380:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					char * find_fail = strstr(curr_string, "FAIL");
 8001384:	4961      	ldr	r1, [pc, #388]	; (800150c <Skyla2_Molly_App+0x36c>)
 8001386:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800138a:	f003 fa01 	bl	8004790 <strstr>
 800138e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
					if(find_pass != NULL)
 8001392:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001396:	2b00      	cmp	r3, #0
 8001398:	d020      	beq.n	80013dc <Skyla2_Molly_App+0x23c>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD PASS \n", 15, 500);
 800139a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800139e:	220f      	movs	r2, #15
 80013a0:	495b      	ldr	r1, [pc, #364]	; (8001510 <Skyla2_Molly_App+0x370>)
 80013a2:	4842      	ldr	r0, [pc, #264]	; (80014ac <Skyla2_Molly_App+0x30c>)
 80013a4:	f002 f975 	bl	8003692 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart5, (uint8_t*)"#", 1, 500);
 80013a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013ac:	2201      	movs	r2, #1
 80013ae:	494d      	ldr	r1, [pc, #308]	; (80014e4 <Skyla2_Molly_App+0x344>)
 80013b0:	483f      	ldr	r0, [pc, #252]	; (80014b0 <Skyla2_Molly_App+0x310>)
 80013b2:	f002 f96e 	bl	8003692 <HAL_UART_Transmit>
						memset(getinfo_buffer, 0, getinfo_buffer_size);
 80013b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013ba:	2100      	movs	r1, #0
 80013bc:	4845      	ldr	r0, [pc, #276]	; (80014d4 <Skyla2_Molly_App+0x334>)
 80013be:	f003 f9bd 	bl	800473c <memset>
						getinfo_buffer_head = 1;
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <Skyla2_Molly_App+0x338>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	801a      	strh	r2, [r3, #0]
						getinfo_fields_found_count = 0;
 80013c8:	4b44      	ldr	r3, [pc, #272]	; (80014dc <Skyla2_Molly_App+0x33c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
						getinfo_find_fields = 0;
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <Skyla2_Molly_App+0x340>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
						molly_skyla2_state = GET_MSG_P3;
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <Skyla2_Molly_App+0x300>)
 80013d6:	2207      	movs	r2, #7
 80013d8:	701a      	strb	r2, [r3, #0]
						break;
 80013da:	e013      	b.n	8001404 <Skyla2_Molly_App+0x264>
					}
					else if(find_fail != NULL)
 80013dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00a      	beq.n	80013fa <Skyla2_Molly_App+0x25a>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD FAIL!!! \n", 18, 500);
 80013e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e8:	2212      	movs	r2, #18
 80013ea:	494a      	ldr	r1, [pc, #296]	; (8001514 <Skyla2_Molly_App+0x374>)
 80013ec:	482f      	ldr	r0, [pc, #188]	; (80014ac <Skyla2_Molly_App+0x30c>)
 80013ee:	f002 f950 	bl	8003692 <HAL_UART_Transmit>
						molly_skyla2_state = FINISH_MOLLY;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <Skyla2_Molly_App+0x300>)
 80013f4:	2208      	movs	r2, #8
 80013f6:	701a      	strb	r2, [r3, #0]
						break;
 80013f8:	e004      	b.n	8001404 <Skyla2_Molly_App+0x264>
					}
					skyla2_array_start = skyla2_array_end;
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <Skyla2_Molly_App+0x378>)
 80013fc:	881a      	ldrh	r2, [r3, #0]
 80013fe:	4b40      	ldr	r3, [pc, #256]	; (8001500 <Skyla2_Molly_App+0x360>)
 8001400:	801a      	strh	r2, [r3, #0]
				if(Skyla2_Find_Word(":"))
 8001402:	e7ab      	b.n	800135c <Skyla2_Molly_App+0x1bc>
				}
			}
			break;
 8001404:	e093      	b.n	800152e <Skyla2_Molly_App+0x38e>

		case GET_MSG_P3:
			brd_msg = Skyla2_GetInfo();
 8001406:	f7ff fc29 	bl	8000c5c <Skyla2_GetInfo>
 800140a:	4603      	mov	r3, r0
 800140c:	4a36      	ldr	r2, [pc, #216]	; (80014e8 <Skyla2_Molly_App+0x348>)
 800140e:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 8001410:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <Skyla2_Molly_App+0x348>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b31      	cmp	r3, #49	; 0x31
 8001418:	f040 8088 	bne.w	800152c <Skyla2_Molly_App+0x38c>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 2, 0);
 800141c:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <Skyla2_Molly_App+0x348>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	2102      	movs	r1, #2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fc69 	bl	8000cfc <PrettySend_Skyla_Info_toPi>
				molly_skyla2_state = FINISH_MOLLY;
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <Skyla2_Molly_App+0x300>)
 800142c:	2208      	movs	r2, #8
 800142e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001430:	e07c      	b.n	800152c <Skyla2_Molly_App+0x38c>

		case FINISH_MOLLY:
			HAL_GPIO_WritePin(UART_MUX_SELA_Port, UART_MUX_SELA_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001438:	4838      	ldr	r0, [pc, #224]	; (800151c <Skyla2_Molly_App+0x37c>)
 800143a:	f001 fadb 	bl	80029f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UART_MUX_INH_Port, UART_MUX_INH_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001444:	4835      	ldr	r0, [pc, #212]	; (800151c <Skyla2_Molly_App+0x37c>)
 8001446:	f001 fad5 	bl	80029f4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, (uint8_t*)"molly complete \r\n", 17, 1000);
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	2211      	movs	r2, #17
 8001450:	4933      	ldr	r1, [pc, #204]	; (8001520 <Skyla2_Molly_App+0x380>)
 8001452:	4816      	ldr	r0, [pc, #88]	; (80014ac <Skyla2_Molly_App+0x30c>)
 8001454:	f002 f91d 	bl	8003692 <HAL_UART_Transmit>
			molly_skyla2_state = DEFAULT;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <Skyla2_Molly_App+0x300>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 800145e:	4b31      	ldr	r3, [pc, #196]	; (8001524 <Skyla2_Molly_App+0x384>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
			break;
 8001464:	e063      	b.n	800152e <Skyla2_Molly_App+0x38e>

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| Received molly command. \r\n", 29, 1000);
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	221d      	movs	r2, #29
 800146c:	492e      	ldr	r1, [pc, #184]	; (8001528 <Skyla2_Molly_App+0x388>)
 800146e:	480f      	ldr	r0, [pc, #60]	; (80014ac <Skyla2_Molly_App+0x30c>)
 8001470:	f002 f90f 	bl	8003692 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(UART_MUX_SELA_Port, UART_MUX_SELA_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800147a:	4828      	ldr	r0, [pc, #160]	; (800151c <Skyla2_Molly_App+0x37c>)
 800147c:	f001 faba 	bl	80029f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(UART_MUX_INH_Port, UART_MUX_INH_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001486:	4825      	ldr	r0, [pc, #148]	; (800151c <Skyla2_Molly_App+0x37c>)
 8001488:	f001 fab4 	bl	80029f4 <HAL_GPIO_WritePin>
			molly_skyla2_state = FIND_DEBUG;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <Skyla2_Molly_App+0x300>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
			break;
 8001492:	e04c      	b.n	800152e <Skyla2_Molly_App+0x38e>
			break;
 8001494:	bf00      	nop
 8001496:	e04a      	b.n	800152e <Skyla2_Molly_App+0x38e>
			break;
 8001498:	bf00      	nop
 800149a:	e048      	b.n	800152e <Skyla2_Molly_App+0x38e>
			break;
 800149c:	bf00      	nop
 800149e:	e046      	b.n	800152e <Skyla2_Molly_App+0x38e>
 80014a0:	20000121 	.word	0x20000121
 80014a4:	08005b90 	.word	0x08005b90
 80014a8:	08005b98 	.word	0x08005b98
 80014ac:	200064b4 	.word	0x200064b4
 80014b0:	20006470 	.word	0x20006470
 80014b4:	20000124 	.word	0x20000124
 80014b8:	200014ac 	.word	0x200014ac
 80014bc:	08005ba8 	.word	0x08005ba8
 80014c0:	08005bb8 	.word	0x08005bb8
 80014c4:	08005b8c 	.word	0x08005b8c
 80014c8:	20002974 	.word	0x20002974
 80014cc:	08005bc0 	.word	0x08005bc0
 80014d0:	08005bc4 	.word	0x08005bc4
 80014d4:	200014b0 	.word	0x200014b0
 80014d8:	200015de 	.word	0x200015de
 80014dc:	200015dc 	.word	0x200015dc
 80014e0:	200015dd 	.word	0x200015dd
 80014e4:	08005bcc 	.word	0x08005bcc
 80014e8:	200015e0 	.word	0x200015e0
 80014ec:	08005bd0 	.word	0x08005bd0
 80014f0:	20002973 	.word	0x20002973
 80014f4:	08005bd4 	.word	0x08005bd4
 80014f8:	08005bd8 	.word	0x08005bd8
 80014fc:	08005be8 	.word	0x08005be8
 8001500:	20005090 	.word	0x20005090
 8001504:	20003d08 	.word	0x20003d08
 8001508:	08005bec 	.word	0x08005bec
 800150c:	08005bf4 	.word	0x08005bf4
 8001510:	08005bfc 	.word	0x08005bfc
 8001514:	08005c0c 	.word	0x08005c0c
 8001518:	20005092 	.word	0x20005092
 800151c:	40020800 	.word	0x40020800
 8001520:	08005c20 	.word	0x08005c20
 8001524:	20000122 	.word	0x20000122
 8001528:	08005c34 	.word	0x08005c34
			break;
 800152c:	bf00      	nop
	}
}
 800152e:	bf00      	nop
 8001530:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <Skyla1_Check_Flag>:

void Skyla1_Check_Flag(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	if(skyla1_send_flag != skyla1_array_start){
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <Skyla1_Check_Flag+0xa0>)
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <Skyla1_Check_Flag+0xa4>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d042      	beq.n	80015d0 <Skyla1_Check_Flag+0x98>
		uint16_t num_bytes;
		if(skyla1_send_flag > skyla1_array_start){
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <Skyla1_Check_Flag+0xa0>)
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <Skyla1_Check_Flag+0xa4>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d918      	bls.n	8001588 <Skyla1_Check_Flag+0x50>
			num_bytes = skyla1_send_flag - skyla1_array_start;
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <Skyla1_Check_Flag+0xa0>)
 8001558:	881a      	ldrh	r2, [r3, #0]
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <Skyla1_Check_Flag+0xa4>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS1|", 4, 500);
 8001562:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001566:	2204      	movs	r2, #4
 8001568:	491d      	ldr	r1, [pc, #116]	; (80015e0 <Skyla1_Check_Flag+0xa8>)
 800156a:	481e      	ldr	r0, [pc, #120]	; (80015e4 <Skyla1_Check_Flag+0xac>)
 800156c:	f002 f891 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla1_uart_rxBuffer[skyla1_array_start+1], num_bytes, 500);
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <Skyla1_Check_Flag+0xa4>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <Skyla1_Check_Flag+0xb0>)
 8001578:	1899      	adds	r1, r3, r2
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001580:	4818      	ldr	r0, [pc, #96]	; (80015e4 <Skyla1_Check_Flag+0xac>)
 8001582:	f002 f886 	bl	8003692 <HAL_UART_Transmit>
 8001586:	e01f      	b.n	80015c8 <Skyla1_Check_Flag+0x90>
		}
		else
		{
			num_bytes = skyla1_uart_buffer_size - skyla1_array_start;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <Skyla1_Check_Flag+0xa4>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8001590:	3308      	adds	r3, #8
 8001592:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS1|", 4, 500);
 8001594:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001598:	2204      	movs	r2, #4
 800159a:	4911      	ldr	r1, [pc, #68]	; (80015e0 <Skyla1_Check_Flag+0xa8>)
 800159c:	4811      	ldr	r0, [pc, #68]	; (80015e4 <Skyla1_Check_Flag+0xac>)
 800159e:	f002 f878 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla1_uart_rxBuffer[skyla1_array_start+1], num_bytes, 500);
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <Skyla1_Check_Flag+0xa4>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <Skyla1_Check_Flag+0xb0>)
 80015aa:	1899      	adds	r1, r3, r2
 80015ac:	88fa      	ldrh	r2, [r7, #6]
 80015ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015b2:	480c      	ldr	r0, [pc, #48]	; (80015e4 <Skyla1_Check_Flag+0xac>)
 80015b4:	f002 f86d 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla1_uart_rxBuffer[0], skyla1_send_flag, 500);
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <Skyla1_Check_Flag+0xa0>)
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015c0:	4909      	ldr	r1, [pc, #36]	; (80015e8 <Skyla1_Check_Flag+0xb0>)
 80015c2:	4808      	ldr	r0, [pc, #32]	; (80015e4 <Skyla1_Check_Flag+0xac>)
 80015c4:	f002 f865 	bl	8003692 <HAL_UART_Transmit>
		}
		skyla1_array_start = skyla1_send_flag;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <Skyla1_Check_Flag+0xa0>)
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <Skyla1_Check_Flag+0xa4>)
 80015ce:	801a      	strh	r2, [r3, #0]
	}
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20002970 	.word	0x20002970
 80015dc:	2000296c 	.word	0x2000296c
 80015e0:	08005c54 	.word	0x08005c54
 80015e4:	200064b4 	.word	0x200064b4
 80015e8:	200015e4 	.word	0x200015e4

080015ec <Creed1_Check_Flag>:

void Creed1_Check_Flag(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
	if(creed1_send_flag != creed1_array_start){
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <Creed1_Check_Flag+0xa0>)
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <Creed1_Check_Flag+0xa4>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d042      	beq.n	8001684 <Creed1_Check_Flag+0x98>
		uint16_t num_bytes;
		if(creed1_send_flag > creed1_array_start){
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <Creed1_Check_Flag+0xa0>)
 8001600:	881a      	ldrh	r2, [r3, #0]
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <Creed1_Check_Flag+0xa4>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d918      	bls.n	800163c <Creed1_Check_Flag+0x50>
			num_bytes = creed1_send_flag - creed1_array_start;
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <Creed1_Check_Flag+0xa0>)
 800160c:	881a      	ldrh	r2, [r3, #0]
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <Creed1_Check_Flag+0xa4>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC1|", 4, 500);
 8001616:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800161a:	2204      	movs	r2, #4
 800161c:	491d      	ldr	r1, [pc, #116]	; (8001694 <Creed1_Check_Flag+0xa8>)
 800161e:	481e      	ldr	r0, [pc, #120]	; (8001698 <Creed1_Check_Flag+0xac>)
 8001620:	f002 f837 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed1_uart_rxBuffer[creed1_array_start+1], num_bytes, 500);
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <Creed1_Check_Flag+0xa4>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <Creed1_Check_Flag+0xb0>)
 800162c:	1899      	adds	r1, r3, r2
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001634:	4818      	ldr	r0, [pc, #96]	; (8001698 <Creed1_Check_Flag+0xac>)
 8001636:	f002 f82c 	bl	8003692 <HAL_UART_Transmit>
 800163a:	e01f      	b.n	800167c <Creed1_Check_Flag+0x90>
		}
		else
		{
			num_bytes = creed1_uart_buffer_size - creed1_array_start;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <Creed1_Check_Flag+0xa4>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8001644:	3308      	adds	r3, #8
 8001646:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC1|", 4, 500);
 8001648:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800164c:	2204      	movs	r2, #4
 800164e:	4911      	ldr	r1, [pc, #68]	; (8001694 <Creed1_Check_Flag+0xa8>)
 8001650:	4811      	ldr	r0, [pc, #68]	; (8001698 <Creed1_Check_Flag+0xac>)
 8001652:	f002 f81e 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed1_uart_rxBuffer[creed1_array_start+1], num_bytes, 500);
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <Creed1_Check_Flag+0xa4>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	4a0f      	ldr	r2, [pc, #60]	; (800169c <Creed1_Check_Flag+0xb0>)
 800165e:	1899      	adds	r1, r3, r2
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001666:	480c      	ldr	r0, [pc, #48]	; (8001698 <Creed1_Check_Flag+0xac>)
 8001668:	f002 f813 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed1_uart_rxBuffer[0], creed1_send_flag, 500);
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <Creed1_Check_Flag+0xa0>)
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001674:	4909      	ldr	r1, [pc, #36]	; (800169c <Creed1_Check_Flag+0xb0>)
 8001676:	4808      	ldr	r0, [pc, #32]	; (8001698 <Creed1_Check_Flag+0xac>)
 8001678:	f002 f80b 	bl	8003692 <HAL_UART_Transmit>
		}
		creed1_array_start = creed1_send_flag;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <Creed1_Check_Flag+0xa0>)
 800167e:	881a      	ldrh	r2, [r3, #0]
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <Creed1_Check_Flag+0xa4>)
 8001682:	801a      	strh	r2, [r3, #0]
	}
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20003d04 	.word	0x20003d04
 8001690:	20003d00 	.word	0x20003d00
 8001694:	08005c5c 	.word	0x08005c5c
 8001698:	200064b4 	.word	0x200064b4
 800169c:	20002978 	.word	0x20002978

080016a0 <Skyla2_Check_Flag>:

void Skyla2_Check_Flag(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
	if(skyla2_send_flag != skyla2_array_start){
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <Skyla2_Check_Flag+0xa0>)
 80016a8:	881a      	ldrh	r2, [r3, #0]
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <Skyla2_Check_Flag+0xa4>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d042      	beq.n	8001738 <Skyla2_Check_Flag+0x98>
		uint16_t num_bytes;
		if(skyla2_send_flag > skyla2_array_start){
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <Skyla2_Check_Flag+0xa0>)
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <Skyla2_Check_Flag+0xa4>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d918      	bls.n	80016f0 <Skyla2_Check_Flag+0x50>
			num_bytes = skyla2_send_flag - skyla2_array_start;
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <Skyla2_Check_Flag+0xa0>)
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <Skyla2_Check_Flag+0xa4>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS2|", 4, 500);
 80016ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016ce:	2204      	movs	r2, #4
 80016d0:	491d      	ldr	r1, [pc, #116]	; (8001748 <Skyla2_Check_Flag+0xa8>)
 80016d2:	481e      	ldr	r0, [pc, #120]	; (800174c <Skyla2_Check_Flag+0xac>)
 80016d4:	f001 ffdd 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla2_uart_rxBuffer[skyla2_array_start+1], num_bytes, 500);
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <Skyla2_Check_Flag+0xa4>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <Skyla2_Check_Flag+0xb0>)
 80016e0:	1899      	adds	r1, r3, r2
 80016e2:	88fa      	ldrh	r2, [r7, #6]
 80016e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <Skyla2_Check_Flag+0xac>)
 80016ea:	f001 ffd2 	bl	8003692 <HAL_UART_Transmit>
 80016ee:	e01f      	b.n	8001730 <Skyla2_Check_Flag+0x90>
		}
		else
		{
			num_bytes = skyla2_uart_buffer_size - skyla2_array_start;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <Skyla2_Check_Flag+0xa4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80016f8:	3308      	adds	r3, #8
 80016fa:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS2|", 4, 500);
 80016fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001700:	2204      	movs	r2, #4
 8001702:	4911      	ldr	r1, [pc, #68]	; (8001748 <Skyla2_Check_Flag+0xa8>)
 8001704:	4811      	ldr	r0, [pc, #68]	; (800174c <Skyla2_Check_Flag+0xac>)
 8001706:	f001 ffc4 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla2_uart_rxBuffer[skyla2_array_start+1], num_bytes, 500);
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <Skyla2_Check_Flag+0xa4>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <Skyla2_Check_Flag+0xb0>)
 8001712:	1899      	adds	r1, r3, r2
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800171a:	480c      	ldr	r0, [pc, #48]	; (800174c <Skyla2_Check_Flag+0xac>)
 800171c:	f001 ffb9 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &skyla2_uart_rxBuffer[0], skyla2_send_flag, 500);
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <Skyla2_Check_Flag+0xa0>)
 8001722:	881a      	ldrh	r2, [r3, #0]
 8001724:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001728:	4909      	ldr	r1, [pc, #36]	; (8001750 <Skyla2_Check_Flag+0xb0>)
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <Skyla2_Check_Flag+0xac>)
 800172c:	f001 ffb1 	bl	8003692 <HAL_UART_Transmit>
		}
		skyla2_array_start = skyla2_send_flag;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <Skyla2_Check_Flag+0xa0>)
 8001732:	881a      	ldrh	r2, [r3, #0]
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <Skyla2_Check_Flag+0xa4>)
 8001736:	801a      	strh	r2, [r3, #0]
	}
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20005094 	.word	0x20005094
 8001744:	20005090 	.word	0x20005090
 8001748:	08005c64 	.word	0x08005c64
 800174c:	200064b4 	.word	0x200064b4
 8001750:	20003d08 	.word	0x20003d08

08001754 <Creed2_Check_Flag>:

void Creed2_Check_Flag(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	if(creed2_send_flag != creed2_array_start){
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <Creed2_Check_Flag+0xa0>)
 800175c:	881a      	ldrh	r2, [r3, #0]
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <Creed2_Check_Flag+0xa4>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d042      	beq.n	80017ec <Creed2_Check_Flag+0x98>
		uint16_t num_bytes;
		if(creed2_send_flag > creed2_array_start){
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <Creed2_Check_Flag+0xa0>)
 8001768:	881a      	ldrh	r2, [r3, #0]
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <Creed2_Check_Flag+0xa4>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d918      	bls.n	80017a4 <Creed2_Check_Flag+0x50>
			num_bytes = creed2_send_flag - creed2_array_start;
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <Creed2_Check_Flag+0xa0>)
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <Creed2_Check_Flag+0xa4>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC2|", 4, 500);
 800177e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001782:	2204      	movs	r2, #4
 8001784:	491d      	ldr	r1, [pc, #116]	; (80017fc <Creed2_Check_Flag+0xa8>)
 8001786:	481e      	ldr	r0, [pc, #120]	; (8001800 <Creed2_Check_Flag+0xac>)
 8001788:	f001 ff83 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed2_uart_rxBuffer[creed2_array_start+1], num_bytes, 500);
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <Creed2_Check_Flag+0xa4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <Creed2_Check_Flag+0xb0>)
 8001794:	1899      	adds	r1, r3, r2
 8001796:	88fa      	ldrh	r2, [r7, #6]
 8001798:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800179c:	4818      	ldr	r0, [pc, #96]	; (8001800 <Creed2_Check_Flag+0xac>)
 800179e:	f001 ff78 	bl	8003692 <HAL_UART_Transmit>
 80017a2:	e01f      	b.n	80017e4 <Creed2_Check_Flag+0x90>
		}
		else
		{
			num_bytes = creed2_uart_buffer_size - creed2_array_start;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <Creed2_Check_Flag+0xa4>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80017ac:	3308      	adds	r3, #8
 80017ae:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC2|", 4, 500);
 80017b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b4:	2204      	movs	r2, #4
 80017b6:	4911      	ldr	r1, [pc, #68]	; (80017fc <Creed2_Check_Flag+0xa8>)
 80017b8:	4811      	ldr	r0, [pc, #68]	; (8001800 <Creed2_Check_Flag+0xac>)
 80017ba:	f001 ff6a 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed2_uart_rxBuffer[creed2_array_start+1], num_bytes, 500);
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <Creed2_Check_Flag+0xa4>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <Creed2_Check_Flag+0xb0>)
 80017c6:	1899      	adds	r1, r3, r2
 80017c8:	88fa      	ldrh	r2, [r7, #6]
 80017ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <Creed2_Check_Flag+0xac>)
 80017d0:	f001 ff5f 	bl	8003692 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &creed2_uart_rxBuffer[0], creed2_send_flag, 500);
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <Creed2_Check_Flag+0xa0>)
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017dc:	4909      	ldr	r1, [pc, #36]	; (8001804 <Creed2_Check_Flag+0xb0>)
 80017de:	4808      	ldr	r0, [pc, #32]	; (8001800 <Creed2_Check_Flag+0xac>)
 80017e0:	f001 ff57 	bl	8003692 <HAL_UART_Transmit>
		}
		creed2_array_start = creed2_send_flag;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <Creed2_Check_Flag+0xa0>)
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <Creed2_Check_Flag+0xa4>)
 80017ea:	801a      	strh	r2, [r3, #0]
	}
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20006424 	.word	0x20006424
 80017f8:	20006420 	.word	0x20006420
 80017fc:	08005c6c 	.word	0x08005c6c
 8001800:	200064b4 	.word	0x200064b4
 8001804:	20005098 	.word	0x20005098

08001808 <Chip_Update>:
* Description: 	This routine update any low level chip functions
* Parameters:  	(none)
* Returns:    	 	(none)
******************************************************************************/
void Chip_Update(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <SystemClock_Config>:
* 				files by STM32CubeIDE.
* Parameters:  	(none)
* Returns:     	(none)
******************************************************************************/
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b094      	sub	sp, #80	; 0x50
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	2234      	movs	r2, #52	; 0x34
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f002 ff88 	bl	800473c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <SystemClock_Config+0xd4>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a29      	ldr	r2, [pc, #164]	; (80018ec <SystemClock_Config+0xd4>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <SystemClock_Config+0xd4>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <SystemClock_Config+0xd8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001864:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <SystemClock_Config+0xd8>)
 8001866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <SystemClock_Config+0xd8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001878:	2302      	movs	r3, #2
 800187a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187c:	2301      	movs	r3, #1
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001880:	2310      	movs	r3, #16
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001884:	2302      	movs	r3, #2
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001888:	2300      	movs	r3, #0
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800188c:	2310      	movs	r3, #16
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001890:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001894:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001896:	2304      	movs	r3, #4
 8001898:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800189a:	2302      	movs	r3, #2
 800189c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800189e:	2302      	movs	r3, #2
 80018a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 fc08 	bl	80030bc <HAL_RCC_OscConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80018b2:	f000 f81f 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b6:	230f      	movs	r3, #15
 80018b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ba:	2302      	movs	r3, #2
 80018bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	2102      	movs	r1, #2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 f8a8 	bl	8002a28 <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80018de:	f000 f809 	bl	80018f4 <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	; 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <Error_Handler>:
* 				in to main.c of generated files by STM32CubeIDE.
* Parameters:  	(none)
* Returns:     	(none)
******************************************************************************/
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  __disable_irq();
  while (1)
 80018fc:	e7fe      	b.n	80018fc <Error_Handler+0x8>
	...

08001900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <MX_GPIO_Init+0xd4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <MX_GPIO_Init+0xd4>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <MX_GPIO_Init+0xd4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_GPIO_Init+0xd4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_GPIO_Init+0xd4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <MX_GPIO_Init+0xd8>)
 80019aa:	f001 f823 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4804      	ldr	r0, [pc, #16]	; (80019d8 <MX_GPIO_Init+0xd8>)
 80019c8:	f000 fe80 	bl	80026cc <HAL_GPIO_Init>

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020800 	.word	0x40020800

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_MspInit+0x4c>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a1a:	2007      	movs	r0, #7
 8001a1c:	f000 fd82 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 fc40 	bl	80022fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <USART1_IRQHandler+0x10>)
 8001a86:	f001 fec7 	bl	8003818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200064b4 	.word	0x200064b4

08001a94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <USART3_IRQHandler+0x10>)
 8001a9a:	f001 febd 	bl	8003818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000653c 	.word	0x2000653c

08001aa8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <UART4_IRQHandler+0x10>)
 8001aae:	f001 feb3 	bl	8003818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000642c 	.word	0x2000642c

08001abc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <UART5_IRQHandler+0x10>)
 8001ac2:	f001 fea9 	bl	8003818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20006470 	.word	0x20006470

08001ad0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <USART6_IRQHandler+0x10>)
 8001ad6:	f001 fe9f 	bl	8003818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20006580 	.word	0x20006580

08001ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
	return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_kill>:

int _kill(int pid, int sig)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001afe:	f002 fdf3 	bl	80046e8 <__errno>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2216      	movs	r2, #22
 8001b06:	601a      	str	r2, [r3, #0]
	return -1;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_exit>:

void _exit (int status)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ffe7 	bl	8001af4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b26:	e7fe      	b.n	8001b26 <_exit+0x12>

08001b28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e00a      	b.n	8001b50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b3a:	f3af 8000 	nop.w
 8001b3e:	4601      	mov	r1, r0
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	60ba      	str	r2, [r7, #8]
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dbf0      	blt.n	8001b3a <_read+0x12>
	}

return len;
 8001b58:	687b      	ldr	r3, [r7, #4]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e009      	b.n	8001b88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbf1      	blt.n	8001b74 <_write+0x12>
	}
	return len;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_close>:

int _close(int file)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_isatty>:

int _isatty(int file)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f002 fd58 	bl	80046e8 <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20020000 	.word	0x20020000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	20006428 	.word	0x20006428
 8001c6c:	200065d8 	.word	0x200065d8

08001c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <SystemInit+0x20>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <SystemInit+0x20>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_UART4_Init+0x4c>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <MX_UART4_Init+0x50>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_UART4_Init+0x4c>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_UART4_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_UART4_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_UART4_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_UART4_Init+0x4c>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_UART4_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_UART4_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_UART4_Init+0x4c>)
 8001ccc:	f001 fc94 	bl	80035f8 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001cd6:	f7ff fe0d 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000642c 	.word	0x2000642c
 8001ce4:	40004c00 	.word	0x40004c00

08001ce8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_UART5_Init+0x4c>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <MX_UART5_Init+0x50>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_UART5_Init+0x4c>)
 8001cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_UART5_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_UART5_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_UART5_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_UART5_Init+0x4c>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_UART5_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_UART5_Init+0x4c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_UART5_Init+0x4c>)
 8001d20:	f001 fc6a 	bl	80035f8 <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001d2a:	f7ff fde3 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20006470 	.word	0x20006470
 8001d38:	40005000 	.word	0x40005000

08001d3c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <MX_USART1_UART_Init+0x50>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d74:	f001 fc40 	bl	80035f8 <HAL_UART_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d7e:	f7ff fdb9 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200064b4 	.word	0x200064b4
 8001d8c:	40011000 	.word	0x40011000

08001d90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <MX_USART2_UART_Init+0x50>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001dc8:	f001 fc16 	bl	80035f8 <HAL_UART_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dd2:	f7ff fd8f 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200064f8 	.word	0x200064f8
 8001de0:	40004400 	.word	0x40004400

08001de4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_USART3_UART_Init+0x4c>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <MX_USART3_UART_Init+0x50>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_USART3_UART_Init+0x4c>)
 8001df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_USART3_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_USART3_UART_Init+0x4c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_USART3_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_USART3_UART_Init+0x4c>)
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_USART3_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_USART3_UART_Init+0x4c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_USART3_UART_Init+0x4c>)
 8001e1c:	f001 fbec 	bl	80035f8 <HAL_UART_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e26:	f7ff fd65 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000653c 	.word	0x2000653c
 8001e34:	40004800 	.word	0x40004800

08001e38 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_USART6_UART_Init+0x4c>)
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <MX_USART6_UART_Init+0x50>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_USART6_UART_Init+0x4c>)
 8001e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_USART6_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_USART6_UART_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <MX_USART6_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_USART6_UART_Init+0x4c>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <MX_USART6_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_USART6_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_USART6_UART_Init+0x4c>)
 8001e70:	f001 fbc2 	bl	80035f8 <HAL_UART_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e7a:	f7ff fd3b 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20006580 	.word	0x20006580
 8001e88:	40011400 	.word	0x40011400

08001e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b096      	sub	sp, #88	; 0x58
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a7e      	ldr	r2, [pc, #504]	; (80020a4 <HAL_UART_MspInit+0x218>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d134      	bne.n	8001f18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb2:	4b7d      	ldr	r3, [pc, #500]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a7c      	ldr	r2, [pc, #496]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b7a      	ldr	r3, [pc, #488]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a75      	ldr	r2, [pc, #468]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001efe:	4619      	mov	r1, r3
 8001f00:	486a      	ldr	r0, [pc, #424]	; (80020ac <HAL_UART_MspInit+0x220>)
 8001f02:	f000 fbe3 	bl	80026cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2034      	movs	r0, #52	; 0x34
 8001f0c:	f000 fb15 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f10:	2034      	movs	r0, #52	; 0x34
 8001f12:	f000 fb2e 	bl	8002572 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001f16:	e167      	b.n	80021e8 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==UART5)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a64      	ldr	r2, [pc, #400]	; (80020b0 <HAL_UART_MspInit+0x224>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d153      	bne.n	8001fca <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f26:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a5f      	ldr	r2, [pc, #380]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
 8001f42:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f5e:	4b52      	ldr	r3, [pc, #328]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a51      	ldr	r2, [pc, #324]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f88:	2308      	movs	r3, #8
 8001f8a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f90:	4619      	mov	r1, r3
 8001f92:	4848      	ldr	r0, [pc, #288]	; (80020b4 <HAL_UART_MspInit+0x228>)
 8001f94:	f000 fb9a 	bl	80026cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4841      	ldr	r0, [pc, #260]	; (80020b8 <HAL_UART_MspInit+0x22c>)
 8001fb4:	f000 fb8a 	bl	80026cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2035      	movs	r0, #53	; 0x35
 8001fbe:	f000 fabc 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001fc2:	2035      	movs	r0, #53	; 0x35
 8001fc4:	f000 fad5 	bl	8002572 <HAL_NVIC_EnableIRQ>
}
 8001fc8:	e10e      	b.n	80021e8 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a3b      	ldr	r2, [pc, #236]	; (80020bc <HAL_UART_MspInit+0x230>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d135      	bne.n	8002040 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd8:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800200c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800201e:	2307      	movs	r3, #7
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002026:	4619      	mov	r1, r3
 8002028:	4820      	ldr	r0, [pc, #128]	; (80020ac <HAL_UART_MspInit+0x220>)
 800202a:	f000 fb4f 	bl	80026cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2025      	movs	r0, #37	; 0x25
 8002034:	f000 fa81 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002038:	2025      	movs	r0, #37	; 0x25
 800203a:	f000 fa9a 	bl	8002572 <HAL_NVIC_EnableIRQ>
}
 800203e:	e0d3      	b.n	80021e8 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_UART_MspInit+0x234>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d13c      	bne.n	80020c4 <HAL_UART_MspInit+0x238>
    __HAL_RCC_USART2_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_UART_MspInit+0x21c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	623b      	str	r3, [r7, #32]
 8002080:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002082:	230c      	movs	r3, #12
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002092:	2307      	movs	r3, #7
 8002094:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800209a:	4619      	mov	r1, r3
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <HAL_UART_MspInit+0x220>)
 800209e:	f000 fb15 	bl	80026cc <HAL_GPIO_Init>
}
 80020a2:	e0a1      	b.n	80021e8 <HAL_UART_MspInit+0x35c>
 80020a4:	40004c00 	.word	0x40004c00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40005000 	.word	0x40005000
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40011000 	.word	0x40011000
 80020c0:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_UART_MspInit+0x364>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d153      	bne.n	8002176 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <HAL_UART_MspInit+0x368>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a47      	ldr	r2, [pc, #284]	; (80021f4 <HAL_UART_MspInit+0x368>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b45      	ldr	r3, [pc, #276]	; (80021f4 <HAL_UART_MspInit+0x368>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_UART_MspInit+0x368>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a40      	ldr	r2, [pc, #256]	; (80021f4 <HAL_UART_MspInit+0x368>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <HAL_UART_MspInit+0x368>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	4b3a      	ldr	r3, [pc, #232]	; (80021f4 <HAL_UART_MspInit+0x368>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a39      	ldr	r2, [pc, #228]	; (80021f4 <HAL_UART_MspInit+0x368>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <HAL_UART_MspInit+0x368>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002122:	2320      	movs	r3, #32
 8002124:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002132:	2307      	movs	r3, #7
 8002134:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800213a:	4619      	mov	r1, r3
 800213c:	482e      	ldr	r0, [pc, #184]	; (80021f8 <HAL_UART_MspInit+0x36c>)
 800213e:	f000 fac5 	bl	80026cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002146:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002154:	2307      	movs	r3, #7
 8002156:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800215c:	4619      	mov	r1, r3
 800215e:	4827      	ldr	r0, [pc, #156]	; (80021fc <HAL_UART_MspInit+0x370>)
 8002160:	f000 fab4 	bl	80026cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	2027      	movs	r0, #39	; 0x27
 800216a:	f000 f9e6 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800216e:	2027      	movs	r0, #39	; 0x27
 8002170:	f000 f9ff 	bl	8002572 <HAL_NVIC_EnableIRQ>
}
 8002174:	e038      	b.n	80021e8 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART6)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a21      	ldr	r2, [pc, #132]	; (8002200 <HAL_UART_MspInit+0x374>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d133      	bne.n	80021e8 <HAL_UART_MspInit+0x35c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_UART_MspInit+0x368>)
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_UART_MspInit+0x368>)
 800218a:	f043 0320 	orr.w	r3, r3, #32
 800218e:	6453      	str	r3, [r2, #68]	; 0x44
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_UART_MspInit+0x368>)
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_UART_MspInit+0x368>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <HAL_UART_MspInit+0x368>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_UART_MspInit+0x368>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b8:	23c0      	movs	r3, #192	; 0xc0
 80021ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021c8:	2308      	movs	r3, #8
 80021ca:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021d0:	4619      	mov	r1, r3
 80021d2:	4809      	ldr	r0, [pc, #36]	; (80021f8 <HAL_UART_MspInit+0x36c>)
 80021d4:	f000 fa7a 	bl	80026cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2047      	movs	r0, #71	; 0x47
 80021de:	f000 f9ac 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80021e2:	2047      	movs	r0, #71	; 0x47
 80021e4:	f000 f9c5 	bl	8002572 <HAL_NVIC_EnableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3758      	adds	r7, #88	; 0x58
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40004800 	.word	0x40004800
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40020400 	.word	0x40020400
 8002200:	40011400 	.word	0x40011400

08002204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800223c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800220a:	490e      	ldr	r1, [pc, #56]	; (8002244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002210:	e002      	b.n	8002218 <LoopCopyDataInit>

08002212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002216:	3304      	adds	r3, #4

08002218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800221c:	d3f9      	bcc.n	8002212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221e:	4a0b      	ldr	r2, [pc, #44]	; (800224c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002220:	4c0b      	ldr	r4, [pc, #44]	; (8002250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002224:	e001      	b.n	800222a <LoopFillZerobss>

08002226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002228:	3204      	adds	r2, #4

0800222a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800222c:	d3fb      	bcc.n	8002226 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800222e:	f7ff fd1f 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002232:	f002 fa5f 	bl	80046f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002236:	f7fe fa05 	bl	8000644 <main>
  bx  lr    
 800223a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800223c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002244:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002248:	08005de4 	.word	0x08005de4
  ldr r2, =_sbss
 800224c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8002250:	200065d8 	.word	0x200065d8

08002254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC_IRQHandler>
	...

08002258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <HAL_Init+0x40>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_Init+0x40>)
 8002262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_Init+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <HAL_Init+0x40>)
 800226e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a07      	ldr	r2, [pc, #28]	; (8002298 <HAL_Init+0x40>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002280:	2003      	movs	r0, #3
 8002282:	f000 f94f 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002286:	2000      	movs	r0, #0
 8002288:	f000 f808 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800228c:	f7ff fba6 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023c00 	.word	0x40023c00

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_InitTick+0x54>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_InitTick+0x58>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f967 	bl	800258e <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00e      	b.n	80022e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d80a      	bhi.n	80022e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f000 f92f 	bl	800253a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <HAL_InitTick+0x5c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000094 	.word	0x20000094
 80022f4:	2000009c 	.word	0x2000009c
 80022f8:	20000098 	.word	0x20000098

080022fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x20>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x24>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_IncTick+0x24>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	2000009c 	.word	0x2000009c
 8002320:	200065c4 	.word	0x200065c4

08002324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return uwTick;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_GetTick+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	200065c4 	.word	0x200065c4

0800233c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff ffee 	bl	8002324 <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d005      	beq.n	8002362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_Delay+0x44>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002362:	bf00      	nop
 8002364:	f7ff ffde 	bl	8002324 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f7      	bhi.n	8002364 <HAL_Delay+0x28>
  {
  }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000009c 	.word	0x2000009c

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	; (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	; (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff29 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff3e 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff8e 	bl	8002478 <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5d 	bl	8002424 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff31 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffa2 	bl	80024e0 <SysTick_Config>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff feb6 	bl	8002324 <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d008      	beq.n	80025d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e052      	b.n	800267e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0216 	bic.w	r2, r2, #22
 80025e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <HAL_DMA_Abort+0x62>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0208 	bic.w	r2, r2, #8
 8002616:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002628:	e013      	b.n	8002652 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800262a:	f7ff fe7b 	bl	8002324 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b05      	cmp	r3, #5
 8002636:	d90c      	bls.n	8002652 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2203      	movs	r2, #3
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e015      	b.n	800267e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1e4      	bne.n	800262a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	223f      	movs	r2, #63	; 0x3f
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d004      	beq.n	80026a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e00c      	b.n	80026be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2205      	movs	r2, #5
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e165      	b.n	80029b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 8154 	bne.w	80029ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	2b02      	cmp	r3, #2
 800271c:	d130      	bne.n	8002780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 0201 	and.w	r2, r3, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d017      	beq.n	80027bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d123      	bne.n	8002810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80ae 	beq.w	80029ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <HAL_GPIO_Init+0x300>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a5c      	ldr	r2, [pc, #368]	; (80029cc <HAL_GPIO_Init+0x300>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <HAL_GPIO_Init+0x300>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286e:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <HAL_GPIO_Init+0x304>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	220f      	movs	r2, #15
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4f      	ldr	r2, [pc, #316]	; (80029d4 <HAL_GPIO_Init+0x308>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d025      	beq.n	80028e6 <HAL_GPIO_Init+0x21a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4e      	ldr	r2, [pc, #312]	; (80029d8 <HAL_GPIO_Init+0x30c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01f      	beq.n	80028e2 <HAL_GPIO_Init+0x216>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4d      	ldr	r2, [pc, #308]	; (80029dc <HAL_GPIO_Init+0x310>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <HAL_GPIO_Init+0x212>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_GPIO_Init+0x314>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_Init+0x20e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4b      	ldr	r2, [pc, #300]	; (80029e4 <HAL_GPIO_Init+0x318>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00d      	beq.n	80028d6 <HAL_GPIO_Init+0x20a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <HAL_GPIO_Init+0x31c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <HAL_GPIO_Init+0x206>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a49      	ldr	r2, [pc, #292]	; (80029ec <HAL_GPIO_Init+0x320>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_GPIO_Init+0x202>
 80028ca:	2306      	movs	r3, #6
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028ce:	2307      	movs	r3, #7
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f8:	4935      	ldr	r1, [pc, #212]	; (80029d0 <HAL_GPIO_Init+0x304>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002906:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <HAL_GPIO_Init+0x324>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292a:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <HAL_GPIO_Init+0x324>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002930:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <HAL_GPIO_Init+0x324>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002954:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <HAL_GPIO_Init+0x324>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800295a:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <HAL_GPIO_Init+0x324>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297e:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_GPIO_Init+0x324>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_GPIO_Init+0x324>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a8:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_GPIO_Init+0x324>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f ae96 	bls.w	80026e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40013800 	.word	0x40013800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40021400 	.word	0x40021400
 80029ec:	40021800 	.word	0x40021800
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a10:	e003      	b.n	8002a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	041a      	lsls	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	619a      	str	r2, [r3, #24]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0cc      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d90c      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a58      	ldr	r2, [pc, #352]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	494d      	ldr	r1, [pc, #308]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d044      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d119      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e067      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4934      	ldr	r1, [pc, #208]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7ff fc04 	bl	8002324 <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7ff fc00 	bl	8002324 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e04f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d20c      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4916      	ldr	r1, [pc, #88]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 f855 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490a      	ldr	r1, [pc, #40]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fb64 	bl	800229c <HAL_InitTick>

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023c00 	.word	0x40023c00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08005c74 	.word	0x08005c74
 8002bec:	20000094 	.word	0x20000094
 8002bf0:	20000098 	.word	0x20000098

08002bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000094 	.word	0x20000094

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f7ff fff0 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0a9b      	lsrs	r3, r3, #10
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08005c84 	.word	0x08005c84

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f7ff ffdc 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0b5b      	lsrs	r3, r3, #13
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08005c84 	.word	0x08005c84

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c60:	b0ae      	sub	sp, #184	; 0xb8
 8002c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c82:	4bcb      	ldr	r3, [pc, #812]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	f200 8206 	bhi.w	800309c <HAL_RCC_GetSysClockFreq+0x440>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ccd 	.word	0x08002ccd
 8002c9c:	0800309d 	.word	0x0800309d
 8002ca0:	0800309d 	.word	0x0800309d
 8002ca4:	0800309d 	.word	0x0800309d
 8002ca8:	08002cd5 	.word	0x08002cd5
 8002cac:	0800309d 	.word	0x0800309d
 8002cb0:	0800309d 	.word	0x0800309d
 8002cb4:	0800309d 	.word	0x0800309d
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	0800309d 	.word	0x0800309d
 8002cc0:	0800309d 	.word	0x0800309d
 8002cc4:	0800309d 	.word	0x0800309d
 8002cc8:	08002ecd 	.word	0x08002ecd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4bb9      	ldr	r3, [pc, #740]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cd2:	e1e7      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd4:	4bb8      	ldr	r3, [pc, #736]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cda:	e1e3      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cdc:	4bb4      	ldr	r3, [pc, #720]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce8:	4bb1      	ldr	r3, [pc, #708]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d071      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf4:	4bae      	ldr	r3, [pc, #696]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	f04f 0000 	mov.w	r0, #0
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	0159      	lsls	r1, r3, #5
 8002d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2c:	0150      	lsls	r0, r2, #5
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4621      	mov	r1, r4
 8002d34:	1a51      	subs	r1, r2, r1
 8002d36:	6439      	str	r1, [r7, #64]	; 0x40
 8002d38:	4629      	mov	r1, r5
 8002d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	018b      	lsls	r3, r1, #6
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d56:	4641      	mov	r1, r8
 8002d58:	018a      	lsls	r2, r1, #6
 8002d5a:	4641      	mov	r1, r8
 8002d5c:	1a51      	subs	r1, r2, r1
 8002d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d60:	4649      	mov	r1, r9
 8002d62:	eb63 0301 	sbc.w	r3, r3, r1
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d74:	4649      	mov	r1, r9
 8002d76:	00cb      	lsls	r3, r1, #3
 8002d78:	4641      	mov	r1, r8
 8002d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7e:	4641      	mov	r1, r8
 8002d80:	00ca      	lsls	r2, r1, #3
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	4622      	mov	r2, r4
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d8e:	462b      	mov	r3, r5
 8002d90:	460a      	mov	r2, r1
 8002d92:	eb42 0303 	adc.w	r3, r2, r3
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002da4:	4629      	mov	r1, r5
 8002da6:	024b      	lsls	r3, r1, #9
 8002da8:	4621      	mov	r1, r4
 8002daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dae:	4621      	mov	r1, r4
 8002db0:	024a      	lsls	r2, r1, #9
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002dc8:	f7fd fa8a 	bl	80002e0 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dd6:	e067      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd8:	4b75      	ldr	r3, [pc, #468]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002de4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002df2:	2300      	movs	r3, #0
 8002df4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002df6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0c:	0150      	lsls	r0, r2, #5
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4621      	mov	r1, r4
 8002e14:	1a51      	subs	r1, r2, r1
 8002e16:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e18:	4629      	mov	r1, r5
 8002e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	4641      	mov	r1, r8
 8002e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e36:	4641      	mov	r1, r8
 8002e38:	018a      	lsls	r2, r1, #6
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e5a:	4692      	mov	sl, r2
 8002e5c:	469b      	mov	fp, r3
 8002e5e:	4623      	mov	r3, r4
 8002e60:	eb1a 0303 	adds.w	r3, sl, r3
 8002e64:	623b      	str	r3, [r7, #32]
 8002e66:	462b      	mov	r3, r5
 8002e68:	eb4b 0303 	adc.w	r3, fp, r3
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	028b      	lsls	r3, r1, #10
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e84:	4621      	mov	r1, r4
 8002e86:	028a      	lsls	r2, r1, #10
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e90:	2200      	movs	r2, #0
 8002e92:	673b      	str	r3, [r7, #112]	; 0x70
 8002e94:	677a      	str	r2, [r7, #116]	; 0x74
 8002e96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e9a:	f7fd fa21 	bl	80002e0 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea8:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eca:	e0eb      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ecc:	4b38      	ldr	r3, [pc, #224]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d06b      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee4:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	2200      	movs	r2, #0
 8002eec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef8:	2300      	movs	r3, #0
 8002efa:	667b      	str	r3, [r7, #100]	; 0x64
 8002efc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f00:	4622      	mov	r2, r4
 8002f02:	462b      	mov	r3, r5
 8002f04:	f04f 0000 	mov.w	r0, #0
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	0159      	lsls	r1, r3, #5
 8002f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f12:	0150      	lsls	r0, r2, #5
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4621      	mov	r1, r4
 8002f1a:	1a51      	subs	r1, r2, r1
 8002f1c:	61b9      	str	r1, [r7, #24]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	eb63 0301 	sbc.w	r3, r3, r1
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f32:	4659      	mov	r1, fp
 8002f34:	018b      	lsls	r3, r1, #6
 8002f36:	4651      	mov	r1, sl
 8002f38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3c:	4651      	mov	r1, sl
 8002f3e:	018a      	lsls	r2, r1, #6
 8002f40:	4651      	mov	r1, sl
 8002f42:	ebb2 0801 	subs.w	r8, r2, r1
 8002f46:	4659      	mov	r1, fp
 8002f48:	eb63 0901 	sbc.w	r9, r3, r1
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f60:	4690      	mov	r8, r2
 8002f62:	4699      	mov	r9, r3
 8002f64:	4623      	mov	r3, r4
 8002f66:	eb18 0303 	adds.w	r3, r8, r3
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	eb49 0303 	adc.w	r3, r9, r3
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f80:	4629      	mov	r1, r5
 8002f82:	024b      	lsls	r3, r1, #9
 8002f84:	4621      	mov	r1, r4
 8002f86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	024a      	lsls	r2, r1, #9
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f96:	2200      	movs	r2, #0
 8002f98:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fa0:	f7fd f99e 	bl	80002e0 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fae:	e065      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x420>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	00f42400 	.word	0x00f42400
 8002fb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbc:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8002fce:	2300      	movs	r3, #0
 8002fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8002fd2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002fd6:	4642      	mov	r2, r8
 8002fd8:	464b      	mov	r3, r9
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe8:	0150      	lsls	r0, r2, #5
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4641      	mov	r1, r8
 8002ff0:	1a51      	subs	r1, r2, r1
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003008:	4659      	mov	r1, fp
 800300a:	018b      	lsls	r3, r1, #6
 800300c:	4651      	mov	r1, sl
 800300e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003012:	4651      	mov	r1, sl
 8003014:	018a      	lsls	r2, r1, #6
 8003016:	4651      	mov	r1, sl
 8003018:	1a54      	subs	r4, r2, r1
 800301a:	4659      	mov	r1, fp
 800301c:	eb63 0501 	sbc.w	r5, r3, r1
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	00eb      	lsls	r3, r5, #3
 800302a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800302e:	00e2      	lsls	r2, r4, #3
 8003030:	4614      	mov	r4, r2
 8003032:	461d      	mov	r5, r3
 8003034:	4643      	mov	r3, r8
 8003036:	18e3      	adds	r3, r4, r3
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	464b      	mov	r3, r9
 800303c:	eb45 0303 	adc.w	r3, r5, r3
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800304e:	4629      	mov	r1, r5
 8003050:	028b      	lsls	r3, r1, #10
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003058:	4621      	mov	r1, r4
 800305a:	028a      	lsls	r2, r1, #10
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003064:	2200      	movs	r2, #0
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48
 8003068:	64fa      	str	r2, [r7, #76]	; 0x4c
 800306a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800306e:	f7fd f937 	bl	80002e0 <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4613      	mov	r3, r2
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0f1b      	lsrs	r3, r3, #28
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800308a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800308e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800309a:	e003      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800309e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	37b8      	adds	r7, #184	; 0xb8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	00f42400 	.word	0x00f42400

080030bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e28d      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8083 	beq.w	80031e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030dc:	4b94      	ldr	r3, [pc, #592]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d019      	beq.n	800311c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030e8:	4b91      	ldr	r3, [pc, #580]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030f4:	4b8e      	ldr	r3, [pc, #568]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003100:	d00c      	beq.n	800311c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b8b      	ldr	r3, [pc, #556]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d112      	bne.n	8003134 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310e:	4b88      	ldr	r3, [pc, #544]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311a:	d10b      	bne.n	8003134 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	4b84      	ldr	r3, [pc, #528]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05b      	beq.n	80031e0 <HAL_RCC_OscConfig+0x124>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d157      	bne.n	80031e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e25a      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d106      	bne.n	800314c <HAL_RCC_OscConfig+0x90>
 800313e:	4b7c      	ldr	r3, [pc, #496]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7b      	ldr	r2, [pc, #492]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e01d      	b.n	8003188 <HAL_RCC_OscConfig+0xcc>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0xb4>
 8003156:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a75      	ldr	r2, [pc, #468]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b73      	ldr	r3, [pc, #460]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a72      	ldr	r2, [pc, #456]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0xcc>
 8003170:	4b6f      	ldr	r3, [pc, #444]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6e      	ldr	r2, [pc, #440]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b6c      	ldr	r3, [pc, #432]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6b      	ldr	r2, [pc, #428]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7ff f8c8 	bl	8002324 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003198:	f7ff f8c4 	bl	8002324 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e21f      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b61      	ldr	r3, [pc, #388]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0xdc>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7ff f8b4 	bl	8002324 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c0:	f7ff f8b0 	bl	8002324 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e20b      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b57      	ldr	r3, [pc, #348]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x104>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06f      	beq.n	80032ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ee:	4b50      	ldr	r3, [pc, #320]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d017      	beq.n	800322a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031fa:	4b4d      	ldr	r3, [pc, #308]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003202:	2b08      	cmp	r3, #8
 8003204:	d105      	bne.n	8003212 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003206:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003212:	4b47      	ldr	r3, [pc, #284]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d11c      	bne.n	8003258 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321e:	4b44      	ldr	r3, [pc, #272]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	4b41      	ldr	r3, [pc, #260]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x186>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e1d3      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4937      	ldr	r1, [pc, #220]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	e03a      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003260:	4b34      	ldr	r3, [pc, #208]	; (8003334 <HAL_RCC_OscConfig+0x278>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7ff f85d 	bl	8002324 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326e:	f7ff f859 	bl	8002324 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1b4      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4925      	ldr	r1, [pc, #148]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
 80032a0:	e015      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_OscConfig+0x278>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7ff f83c 	bl	8002324 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b0:	f7ff f838 	bl	8002324 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e193      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d036      	beq.n	8003348 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_RCC_OscConfig+0x27c>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7ff f81c 	bl	8002324 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f0:	f7ff f818 	bl	8002324 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e173      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x234>
 800330e:	e01b      	b.n	8003348 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003316:	f7ff f805 	bl	8002324 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331c:	e00e      	b.n	800333c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331e:	f7ff f801 	bl	8002324 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d907      	bls.n	800333c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e15c      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
 8003330:	40023800 	.word	0x40023800
 8003334:	42470000 	.word	0x42470000
 8003338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800333e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ea      	bne.n	800331e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8097 	beq.w	8003484 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b83      	ldr	r3, [pc, #524]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	4b7f      	ldr	r3, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a7e      	ldr	r2, [pc, #504]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b7c      	ldr	r3, [pc, #496]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003382:	2301      	movs	r3, #1
 8003384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003386:	4b79      	ldr	r3, [pc, #484]	; (800356c <HAL_RCC_OscConfig+0x4b0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d118      	bne.n	80033c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x4b0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a75      	ldr	r2, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x4b0>)
 8003398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339e:	f7fe ffc1 	bl	8002324 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a6:	f7fe ffbd 	bl	8002324 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e118      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	4b6c      	ldr	r3, [pc, #432]	; (800356c <HAL_RCC_OscConfig+0x4b0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d106      	bne.n	80033da <HAL_RCC_OscConfig+0x31e>
 80033cc:	4b66      	ldr	r3, [pc, #408]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a65      	ldr	r2, [pc, #404]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	e01c      	b.n	8003414 <HAL_RCC_OscConfig+0x358>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x340>
 80033e2:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a60      	ldr	r2, [pc, #384]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b5e      	ldr	r3, [pc, #376]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a5d      	ldr	r2, [pc, #372]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0x358>
 80033fc:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a59      	ldr	r2, [pc, #356]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
 8003408:	4b57      	ldr	r3, [pc, #348]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a56      	ldr	r2, [pc, #344]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800340e:	f023 0304 	bic.w	r3, r3, #4
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe ff82 	bl	8002324 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fe ff7e 	bl	8002324 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0d7      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343a:	4b4b      	ldr	r3, [pc, #300]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ee      	beq.n	8003424 <HAL_RCC_OscConfig+0x368>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fe ff6c 	bl	8002324 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344e:	e00a      	b.n	8003466 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fe ff68 	bl	8002324 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e0c1      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003466:	4b40      	ldr	r3, [pc, #256]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ee      	bne.n	8003450 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80ad 	beq.w	80035e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b08      	cmp	r3, #8
 8003498:	d060      	beq.n	800355c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d145      	bne.n	800352e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_RCC_OscConfig+0x4b4>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe ff3c 	bl	8002324 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe ff38 	bl	8002324 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e093      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	3b01      	subs	r3, #1
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	071b      	lsls	r3, r3, #28
 80034fa:	491b      	ldr	r1, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_RCC_OscConfig+0x4b4>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe ff0d 	bl	8002324 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe ff09 	bl	8002324 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e064      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x452>
 800352c:	e05c      	b.n	80035e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <HAL_RCC_OscConfig+0x4b4>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fef6 	bl	8002324 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353c:	f7fe fef2 	bl	8002324 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e04d      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x480>
 800355a:	e045      	b.n	80035e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e040      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
 8003568:	40023800 	.word	0x40023800
 800356c:	40007000 	.word	0x40007000
 8003570:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003574:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <HAL_RCC_OscConfig+0x538>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d030      	beq.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d129      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d122      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035a4:	4013      	ands	r3, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d119      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	085b      	lsrs	r3, r3, #1
 80035bc:	3b01      	subs	r3, #1
 80035be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d10f      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800

080035f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e03f      	b.n	800368a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe fc34 	bl	8001e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fddf 	bl	8004200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b08a      	sub	sp, #40	; 0x28
 8003696:	af02      	add	r7, sp, #8
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d17c      	bne.n	80037ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_UART_Transmit+0x2c>
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e075      	b.n	80037ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_UART_Transmit+0x3e>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e06e      	b.n	80037ae <HAL_UART_Transmit+0x11c>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2221      	movs	r2, #33	; 0x21
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e6:	f7fe fe1d 	bl	8002324 <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	d108      	bne.n	8003714 <HAL_UART_Transmit+0x82>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d104      	bne.n	8003714 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	e003      	b.n	800371c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003724:	e02a      	b.n	800377c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2200      	movs	r2, #0
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fb1f 	bl	8003d74 <UART_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e036      	b.n	80037ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10b      	bne.n	800375e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003754:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	3302      	adds	r3, #2
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	e007      	b.n	800376e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	3301      	adds	r3, #1
 800376c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1cf      	bne.n	8003726 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2200      	movs	r2, #0
 800378e:	2140      	movs	r1, #64	; 0x40
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 faef 	bl	8003d74 <UART_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e006      	b.n	80037ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	4613      	mov	r3, r2
 80037c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d11d      	bne.n	800380c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_UART_Receive_IT+0x26>
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e016      	b.n	800380e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Receive_IT+0x38>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e00f      	b.n	800380e <HAL_UART_Receive_IT+0x58>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	461a      	mov	r2, r3
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fb24 	bl	8003e50 <UART_Start_Receive_IT>
 8003808:	4603      	mov	r3, r0
 800380a:	e000      	b.n	800380e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b0ba      	sub	sp, #232	; 0xe8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_UART_IRQHandler+0x66>
 800386a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fc07 	bl	800408a <UART_Receive_IT>
      return;
 800387c:	e256      	b.n	8003d2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800387e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80de 	beq.w	8003a44 <HAL_UART_IRQHandler+0x22c>
 8003888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003898:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80d1 	beq.w	8003a44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_UART_IRQHandler+0xae>
 80038ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_UART_IRQHandler+0xd2>
 80038d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_UART_IRQHandler+0xf6>
 80038f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d011      	beq.n	800393e <HAL_UART_IRQHandler+0x126>
 800391a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f043 0208 	orr.w	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 81ed 	beq.w	8003d22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_UART_IRQHandler+0x14e>
 8003954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fb92 	bl	800408a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <HAL_UART_IRQHandler+0x17a>
 800398a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d04f      	beq.n	8003a32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa9a 	bl	8003ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d141      	bne.n	8003a2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3314      	adds	r3, #20
 80039ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3314      	adds	r3, #20
 80039ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1d9      	bne.n	80039a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d013      	beq.n	8003a22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	4a7d      	ldr	r2, [pc, #500]	; (8003bf4 <HAL_UART_IRQHandler+0x3dc>)
 8003a00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fe3d 	bl	8002686 <HAL_DMA_Abort_IT>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e00e      	b.n	8003a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f990 	bl	8003d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	e00a      	b.n	8003a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f98c 	bl	8003d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	e006      	b.n	8003a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f988 	bl	8003d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a3e:	e170      	b.n	8003d22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a40:	bf00      	nop
    return;
 8003a42:	e16e      	b.n	8003d22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 814a 	bne.w	8003ce2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8143 	beq.w	8003ce2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 813c 	beq.w	8003ce2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	f040 80b4 	bne.w	8003bf8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8140 	beq.w	8003d26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f080 8139 	bcs.w	8003d26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac6:	f000 8088 	beq.w	8003bda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003af6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003afa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1d9      	bne.n	8003aca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3314      	adds	r3, #20
 8003b1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3314      	adds	r3, #20
 8003b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e1      	bne.n	8003b16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e3      	bne.n	8003b52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003baa:	f023 0310 	bic.w	r3, r3, #16
 8003bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e3      	bne.n	8003b98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fe fce6 	bl	80025a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8b6 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf0:	e099      	b.n	8003d26 <HAL_UART_IRQHandler+0x50e>
 8003bf2:	bf00      	nop
 8003bf4:	08003f93 	.word	0x08003f93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 808b 	beq.w	8003d2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8086 	beq.w	8003d2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c42:	647a      	str	r2, [r7, #68]	; 0x44
 8003c44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e3      	bne.n	8003c1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	623b      	str	r3, [r7, #32]
   return(result);
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c7a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e3      	bne.n	8003c56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cc0:	61fa      	str	r2, [r7, #28]
 8003cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e3      	bne.n	8003c9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f83e 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ce0:	e023      	b.n	8003d2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_UART_IRQHandler+0x4ea>
 8003cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f95d 	bl	8003fba <UART_Transmit_IT>
    return;
 8003d00:	e014      	b.n	8003d2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00e      	beq.n	8003d2c <HAL_UART_IRQHandler+0x514>
 8003d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f99d 	bl	800405a <UART_EndTransmit_IT>
    return;
 8003d20:	e004      	b.n	8003d2c <HAL_UART_IRQHandler+0x514>
    return;
 8003d22:	bf00      	nop
 8003d24:	e002      	b.n	8003d2c <HAL_UART_IRQHandler+0x514>
      return;
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <HAL_UART_IRQHandler+0x514>
      return;
 8003d2a:	bf00      	nop
  }
}
 8003d2c:	37e8      	adds	r7, #232	; 0xe8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop

08003d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b090      	sub	sp, #64	; 0x40
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d84:	e050      	b.n	8003e28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d04c      	beq.n	8003e28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d94:	f7fe fac6 	bl	8002324 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d241      	bcs.n	8003e28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc4:	637a      	str	r2, [r7, #52]	; 0x34
 8003dc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e5      	bne.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3314      	adds	r3, #20
 8003dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	613b      	str	r3, [r7, #16]
   return(result);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3314      	adds	r3, #20
 8003df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df8:	623a      	str	r2, [r7, #32]
 8003dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	69f9      	ldr	r1, [r7, #28]
 8003dfe:	6a3a      	ldr	r2, [r7, #32]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e5      	bne.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e00f      	b.n	8003e48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4013      	ands	r3, r2
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d09f      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3740      	adds	r7, #64	; 0x40
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	88fa      	ldrh	r2, [r7, #6]
 8003e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2222      	movs	r2, #34	; 0x22
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0220 	orr.w	r2, r2, #32
 8003ebc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b095      	sub	sp, #84	; 0x54
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ef4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e5      	bne.n	8003ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d119      	bne.n	8003f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f023 0310 	bic.w	r3, r3, #16
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f64:	61ba      	str	r2, [r7, #24]
 8003f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	613b      	str	r3, [r7, #16]
   return(result);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e5      	bne.n	8003f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f86:	bf00      	nop
 8003f88:	3754      	adds	r7, #84	; 0x54
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7ff fecb 	bl	8003d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b21      	cmp	r3, #33	; 0x21
 8003fcc:	d13e      	bne.n	800404c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd6:	d114      	bne.n	8004002 <UART_Transmit_IT+0x48>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d110      	bne.n	8004002 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	1c9a      	adds	r2, r3, #2
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	621a      	str	r2, [r3, #32]
 8004000:	e008      	b.n	8004014 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	1c59      	adds	r1, r3, #1
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6211      	str	r1, [r2, #32]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29b      	uxth	r3, r3
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4619      	mov	r1, r3
 8004022:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10f      	bne.n	8004048 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004036:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004046:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fe5a 	bl	8003d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b08c      	sub	sp, #48	; 0x30
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b22      	cmp	r3, #34	; 0x22
 800409c:	f040 80ab 	bne.w	80041f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a8:	d117      	bne.n	80040da <UART_Receive_IT+0x50>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d113      	bne.n	80040da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	1c9a      	adds	r2, r3, #2
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28
 80040d8:	e026      	b.n	8004128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	d007      	beq.n	80040fe <UART_Receive_IT+0x74>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <UART_Receive_IT+0x82>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e008      	b.n	800411e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004118:	b2da      	uxtb	r2, r3
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29b      	uxth	r3, r3
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4619      	mov	r1, r3
 8004136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004138:	2b00      	cmp	r3, #0
 800413a:	d15a      	bne.n	80041f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0220 	bic.w	r2, r2, #32
 800414a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800415a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	2b01      	cmp	r3, #1
 800417a:	d135      	bne.n	80041e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	613b      	str	r3, [r7, #16]
   return(result);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f023 0310 	bic.w	r3, r3, #16
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	623a      	str	r2, [r7, #32]
 80041a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	69f9      	ldr	r1, [r7, #28]
 80041a8:	6a3a      	ldr	r2, [r7, #32]
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d10a      	bne.n	80041da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff fdbb 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
 80041e6:	e002      	b.n	80041ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fc fa7b 	bl	80006e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e002      	b.n	80041f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3730      	adds	r7, #48	; 0x30
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004204:	b0c0      	sub	sp, #256	; 0x100
 8004206:	af00      	add	r7, sp, #0
 8004208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	68d9      	ldr	r1, [r3, #12]
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	ea40 0301 	orr.w	r3, r0, r1
 8004228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	431a      	orrs	r2, r3
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	431a      	orrs	r2, r3
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004258:	f021 010c 	bic.w	r1, r1, #12
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004266:	430b      	orrs	r3, r1
 8004268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	6999      	ldr	r1, [r3, #24]
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	ea40 0301 	orr.w	r3, r0, r1
 8004286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b8f      	ldr	r3, [pc, #572]	; (80044cc <UART_SetConfig+0x2cc>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d005      	beq.n	80042a0 <UART_SetConfig+0xa0>
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b8d      	ldr	r3, [pc, #564]	; (80044d0 <UART_SetConfig+0x2d0>)
 800429c:	429a      	cmp	r2, r3
 800429e:	d104      	bne.n	80042aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042a0:	f7fe fcc8 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 80042a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042a8:	e003      	b.n	80042b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042aa:	f7fe fcaf 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 80042ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042bc:	f040 810c 	bne.w	80044d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042d2:	4622      	mov	r2, r4
 80042d4:	462b      	mov	r3, r5
 80042d6:	1891      	adds	r1, r2, r2
 80042d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80042da:	415b      	adcs	r3, r3
 80042dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042e2:	4621      	mov	r1, r4
 80042e4:	eb12 0801 	adds.w	r8, r2, r1
 80042e8:	4629      	mov	r1, r5
 80042ea:	eb43 0901 	adc.w	r9, r3, r1
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004302:	4690      	mov	r8, r2
 8004304:	4699      	mov	r9, r3
 8004306:	4623      	mov	r3, r4
 8004308:	eb18 0303 	adds.w	r3, r8, r3
 800430c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004310:	462b      	mov	r3, r5
 8004312:	eb49 0303 	adc.w	r3, r9, r3
 8004316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800432a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800432e:	460b      	mov	r3, r1
 8004330:	18db      	adds	r3, r3, r3
 8004332:	653b      	str	r3, [r7, #80]	; 0x50
 8004334:	4613      	mov	r3, r2
 8004336:	eb42 0303 	adc.w	r3, r2, r3
 800433a:	657b      	str	r3, [r7, #84]	; 0x54
 800433c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004344:	f7fb ffcc 	bl	80002e0 <__aeabi_uldivmod>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <UART_SetConfig+0x2d4>)
 800434e:	fba3 2302 	umull	r2, r3, r3, r2
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	011c      	lsls	r4, r3, #4
 8004356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	1891      	adds	r1, r2, r2
 800436e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004370:	415b      	adcs	r3, r3
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004378:	4641      	mov	r1, r8
 800437a:	eb12 0a01 	adds.w	sl, r2, r1
 800437e:	4649      	mov	r1, r9
 8004380:	eb43 0b01 	adc.w	fp, r3, r1
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004398:	4692      	mov	sl, r2
 800439a:	469b      	mov	fp, r3
 800439c:	4643      	mov	r3, r8
 800439e:	eb1a 0303 	adds.w	r3, sl, r3
 80043a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043a6:	464b      	mov	r3, r9
 80043a8:	eb4b 0303 	adc.w	r3, fp, r3
 80043ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043c4:	460b      	mov	r3, r1
 80043c6:	18db      	adds	r3, r3, r3
 80043c8:	643b      	str	r3, [r7, #64]	; 0x40
 80043ca:	4613      	mov	r3, r2
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	647b      	str	r3, [r7, #68]	; 0x44
 80043d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043da:	f7fb ff81 	bl	80002e0 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <UART_SetConfig+0x2d4>)
 80043e6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2264      	movs	r2, #100	; 0x64
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	1acb      	subs	r3, r1, r3
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043fa:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <UART_SetConfig+0x2d4>)
 80043fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004408:	441c      	add	r4, r3
 800440a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	1891      	adds	r1, r2, r2
 8004422:	63b9      	str	r1, [r7, #56]	; 0x38
 8004424:	415b      	adcs	r3, r3
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800442c:	4641      	mov	r1, r8
 800442e:	1851      	adds	r1, r2, r1
 8004430:	6339      	str	r1, [r7, #48]	; 0x30
 8004432:	4649      	mov	r1, r9
 8004434:	414b      	adcs	r3, r1
 8004436:	637b      	str	r3, [r7, #52]	; 0x34
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004444:	4659      	mov	r1, fp
 8004446:	00cb      	lsls	r3, r1, #3
 8004448:	4651      	mov	r1, sl
 800444a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444e:	4651      	mov	r1, sl
 8004450:	00ca      	lsls	r2, r1, #3
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	4603      	mov	r3, r0
 8004458:	4642      	mov	r2, r8
 800445a:	189b      	adds	r3, r3, r2
 800445c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004460:	464b      	mov	r3, r9
 8004462:	460a      	mov	r2, r1
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800447c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004480:	460b      	mov	r3, r1
 8004482:	18db      	adds	r3, r3, r3
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
 8004486:	4613      	mov	r3, r2
 8004488:	eb42 0303 	adc.w	r3, r2, r3
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004496:	f7fb ff23 	bl	80002e0 <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <UART_SetConfig+0x2d4>)
 80044a0:	fba3 1302 	umull	r1, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	2164      	movs	r1, #100	; 0x64
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	3332      	adds	r3, #50	; 0x32
 80044b2:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <UART_SetConfig+0x2d4>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	f003 0207 	and.w	r2, r3, #7
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4422      	add	r2, r4
 80044c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044c8:	e105      	b.n	80046d6 <UART_SetConfig+0x4d6>
 80044ca:	bf00      	nop
 80044cc:	40011000 	.word	0x40011000
 80044d0:	40011400 	.word	0x40011400
 80044d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044ea:	4642      	mov	r2, r8
 80044ec:	464b      	mov	r3, r9
 80044ee:	1891      	adds	r1, r2, r2
 80044f0:	6239      	str	r1, [r7, #32]
 80044f2:	415b      	adcs	r3, r3
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
 80044f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044fa:	4641      	mov	r1, r8
 80044fc:	1854      	adds	r4, r2, r1
 80044fe:	4649      	mov	r1, r9
 8004500:	eb43 0501 	adc.w	r5, r3, r1
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	00eb      	lsls	r3, r5, #3
 800450e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004512:	00e2      	lsls	r2, r4, #3
 8004514:	4614      	mov	r4, r2
 8004516:	461d      	mov	r5, r3
 8004518:	4643      	mov	r3, r8
 800451a:	18e3      	adds	r3, r4, r3
 800451c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004520:	464b      	mov	r3, r9
 8004522:	eb45 0303 	adc.w	r3, r5, r3
 8004526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004546:	4629      	mov	r1, r5
 8004548:	008b      	lsls	r3, r1, #2
 800454a:	4621      	mov	r1, r4
 800454c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004550:	4621      	mov	r1, r4
 8004552:	008a      	lsls	r2, r1, #2
 8004554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004558:	f7fb fec2 	bl	80002e0 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4b60      	ldr	r3, [pc, #384]	; (80046e4 <UART_SetConfig+0x4e4>)
 8004562:	fba3 2302 	umull	r2, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	011c      	lsls	r4, r3, #4
 800456a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	1891      	adds	r1, r2, r2
 8004582:	61b9      	str	r1, [r7, #24]
 8004584:	415b      	adcs	r3, r3
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800458c:	4641      	mov	r1, r8
 800458e:	1851      	adds	r1, r2, r1
 8004590:	6139      	str	r1, [r7, #16]
 8004592:	4649      	mov	r1, r9
 8004594:	414b      	adcs	r3, r1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045a4:	4659      	mov	r1, fp
 80045a6:	00cb      	lsls	r3, r1, #3
 80045a8:	4651      	mov	r1, sl
 80045aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ae:	4651      	mov	r1, sl
 80045b0:	00ca      	lsls	r2, r1, #3
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	4642      	mov	r2, r8
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045c0:	464b      	mov	r3, r9
 80045c2:	460a      	mov	r2, r1
 80045c4:	eb42 0303 	adc.w	r3, r2, r3
 80045c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80045d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045e4:	4649      	mov	r1, r9
 80045e6:	008b      	lsls	r3, r1, #2
 80045e8:	4641      	mov	r1, r8
 80045ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ee:	4641      	mov	r1, r8
 80045f0:	008a      	lsls	r2, r1, #2
 80045f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045f6:	f7fb fe73 	bl	80002e0 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <UART_SetConfig+0x4e4>)
 8004600:	fba3 1302 	umull	r1, r3, r3, r2
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	2164      	movs	r1, #100	; 0x64
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	3332      	adds	r3, #50	; 0x32
 8004612:	4a34      	ldr	r2, [pc, #208]	; (80046e4 <UART_SetConfig+0x4e4>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800461e:	441c      	add	r4, r3
 8004620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004624:	2200      	movs	r2, #0
 8004626:	673b      	str	r3, [r7, #112]	; 0x70
 8004628:	677a      	str	r2, [r7, #116]	; 0x74
 800462a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800462e:	4642      	mov	r2, r8
 8004630:	464b      	mov	r3, r9
 8004632:	1891      	adds	r1, r2, r2
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	415b      	adcs	r3, r3
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800463e:	4641      	mov	r1, r8
 8004640:	1851      	adds	r1, r2, r1
 8004642:	6039      	str	r1, [r7, #0]
 8004644:	4649      	mov	r1, r9
 8004646:	414b      	adcs	r3, r1
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004656:	4659      	mov	r1, fp
 8004658:	00cb      	lsls	r3, r1, #3
 800465a:	4651      	mov	r1, sl
 800465c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004660:	4651      	mov	r1, sl
 8004662:	00ca      	lsls	r2, r1, #3
 8004664:	4610      	mov	r0, r2
 8004666:	4619      	mov	r1, r3
 8004668:	4603      	mov	r3, r0
 800466a:	4642      	mov	r2, r8
 800466c:	189b      	adds	r3, r3, r2
 800466e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004670:	464b      	mov	r3, r9
 8004672:	460a      	mov	r2, r1
 8004674:	eb42 0303 	adc.w	r3, r2, r3
 8004678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	663b      	str	r3, [r7, #96]	; 0x60
 8004684:	667a      	str	r2, [r7, #100]	; 0x64
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004692:	4649      	mov	r1, r9
 8004694:	008b      	lsls	r3, r1, #2
 8004696:	4641      	mov	r1, r8
 8004698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469c:	4641      	mov	r1, r8
 800469e:	008a      	lsls	r2, r1, #2
 80046a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046a4:	f7fb fe1c 	bl	80002e0 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <UART_SetConfig+0x4e4>)
 80046ae:	fba3 1302 	umull	r1, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	2164      	movs	r1, #100	; 0x64
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	3332      	adds	r3, #50	; 0x32
 80046c0:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <UART_SetConfig+0x4e4>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	f003 020f 	and.w	r2, r3, #15
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4422      	add	r2, r4
 80046d4:	609a      	str	r2, [r3, #8]
}
 80046d6:	bf00      	nop
 80046d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046dc:	46bd      	mov	sp, r7
 80046de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e2:	bf00      	nop
 80046e4:	51eb851f 	.word	0x51eb851f

080046e8 <__errno>:
 80046e8:	4b01      	ldr	r3, [pc, #4]	; (80046f0 <__errno+0x8>)
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	200000a0 	.word	0x200000a0

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	4d0d      	ldr	r5, [pc, #52]	; (800472c <__libc_init_array+0x38>)
 80046f8:	4c0d      	ldr	r4, [pc, #52]	; (8004730 <__libc_init_array+0x3c>)
 80046fa:	1b64      	subs	r4, r4, r5
 80046fc:	10a4      	asrs	r4, r4, #2
 80046fe:	2600      	movs	r6, #0
 8004700:	42a6      	cmp	r6, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	4d0b      	ldr	r5, [pc, #44]	; (8004734 <__libc_init_array+0x40>)
 8004706:	4c0c      	ldr	r4, [pc, #48]	; (8004738 <__libc_init_array+0x44>)
 8004708:	f001 f8ae 	bl	8005868 <_init>
 800470c:	1b64      	subs	r4, r4, r5
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	2600      	movs	r6, #0
 8004712:	42a6      	cmp	r6, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	f855 3b04 	ldr.w	r3, [r5], #4
 800471c:	4798      	blx	r3
 800471e:	3601      	adds	r6, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	f855 3b04 	ldr.w	r3, [r5], #4
 8004726:	4798      	blx	r3
 8004728:	3601      	adds	r6, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	08005ddc 	.word	0x08005ddc
 8004730:	08005ddc 	.word	0x08005ddc
 8004734:	08005ddc 	.word	0x08005ddc
 8004738:	08005de0 	.word	0x08005de0

0800473c <memset>:
 800473c:	4402      	add	r2, r0
 800473e:	4603      	mov	r3, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	f803 1b01 	strb.w	r1, [r3], #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <strcat>:
 800474c:	b510      	push	{r4, lr}
 800474e:	4602      	mov	r2, r0
 8004750:	7814      	ldrb	r4, [r2, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	3201      	adds	r2, #1
 8004756:	2c00      	cmp	r4, #0
 8004758:	d1fa      	bne.n	8004750 <strcat+0x4>
 800475a:	3b01      	subs	r3, #1
 800475c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004760:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004764:	2a00      	cmp	r2, #0
 8004766:	d1f9      	bne.n	800475c <strcat+0x10>
 8004768:	bd10      	pop	{r4, pc}

0800476a <strncpy>:
 800476a:	b510      	push	{r4, lr}
 800476c:	3901      	subs	r1, #1
 800476e:	4603      	mov	r3, r0
 8004770:	b132      	cbz	r2, 8004780 <strncpy+0x16>
 8004772:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004776:	f803 4b01 	strb.w	r4, [r3], #1
 800477a:	3a01      	subs	r2, #1
 800477c:	2c00      	cmp	r4, #0
 800477e:	d1f7      	bne.n	8004770 <strncpy+0x6>
 8004780:	441a      	add	r2, r3
 8004782:	2100      	movs	r1, #0
 8004784:	4293      	cmp	r3, r2
 8004786:	d100      	bne.n	800478a <strncpy+0x20>
 8004788:	bd10      	pop	{r4, pc}
 800478a:	f803 1b01 	strb.w	r1, [r3], #1
 800478e:	e7f9      	b.n	8004784 <strncpy+0x1a>

08004790 <strstr>:
 8004790:	780a      	ldrb	r2, [r1, #0]
 8004792:	b570      	push	{r4, r5, r6, lr}
 8004794:	b96a      	cbnz	r2, 80047b2 <strstr+0x22>
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	429a      	cmp	r2, r3
 800479a:	d109      	bne.n	80047b0 <strstr+0x20>
 800479c:	460c      	mov	r4, r1
 800479e:	4605      	mov	r5, r0
 80047a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f6      	beq.n	8004796 <strstr+0x6>
 80047a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80047ac:	429e      	cmp	r6, r3
 80047ae:	d0f7      	beq.n	80047a0 <strstr+0x10>
 80047b0:	3001      	adds	r0, #1
 80047b2:	7803      	ldrb	r3, [r0, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ef      	bne.n	8004798 <strstr+0x8>
 80047b8:	4618      	mov	r0, r3
 80047ba:	e7ec      	b.n	8004796 <strstr+0x6>

080047bc <strtok>:
 80047bc:	4b16      	ldr	r3, [pc, #88]	; (8004818 <strtok+0x5c>)
 80047be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047c0:	681e      	ldr	r6, [r3, #0]
 80047c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80047c4:	4605      	mov	r5, r0
 80047c6:	b9fc      	cbnz	r4, 8004808 <strtok+0x4c>
 80047c8:	2050      	movs	r0, #80	; 0x50
 80047ca:	9101      	str	r1, [sp, #4]
 80047cc:	f000 f882 	bl	80048d4 <malloc>
 80047d0:	9901      	ldr	r1, [sp, #4]
 80047d2:	65b0      	str	r0, [r6, #88]	; 0x58
 80047d4:	4602      	mov	r2, r0
 80047d6:	b920      	cbnz	r0, 80047e2 <strtok+0x26>
 80047d8:	4b10      	ldr	r3, [pc, #64]	; (800481c <strtok+0x60>)
 80047da:	4811      	ldr	r0, [pc, #68]	; (8004820 <strtok+0x64>)
 80047dc:	2157      	movs	r1, #87	; 0x57
 80047de:	f000 f849 	bl	8004874 <__assert_func>
 80047e2:	e9c0 4400 	strd	r4, r4, [r0]
 80047e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80047ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80047ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80047f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80047f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80047fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80047fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004802:	6184      	str	r4, [r0, #24]
 8004804:	7704      	strb	r4, [r0, #28]
 8004806:	6244      	str	r4, [r0, #36]	; 0x24
 8004808:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800480a:	2301      	movs	r3, #1
 800480c:	4628      	mov	r0, r5
 800480e:	b002      	add	sp, #8
 8004810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004814:	f000 b806 	b.w	8004824 <__strtok_r>
 8004818:	200000a0 	.word	0x200000a0
 800481c:	08005c90 	.word	0x08005c90
 8004820:	08005ca7 	.word	0x08005ca7

08004824 <__strtok_r>:
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	b908      	cbnz	r0, 800482c <__strtok_r+0x8>
 8004828:	6810      	ldr	r0, [r2, #0]
 800482a:	b188      	cbz	r0, 8004850 <__strtok_r+0x2c>
 800482c:	4604      	mov	r4, r0
 800482e:	4620      	mov	r0, r4
 8004830:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004834:	460f      	mov	r7, r1
 8004836:	f817 6b01 	ldrb.w	r6, [r7], #1
 800483a:	b91e      	cbnz	r6, 8004844 <__strtok_r+0x20>
 800483c:	b965      	cbnz	r5, 8004858 <__strtok_r+0x34>
 800483e:	6015      	str	r5, [r2, #0]
 8004840:	4628      	mov	r0, r5
 8004842:	e005      	b.n	8004850 <__strtok_r+0x2c>
 8004844:	42b5      	cmp	r5, r6
 8004846:	d1f6      	bne.n	8004836 <__strtok_r+0x12>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <__strtok_r+0xa>
 800484c:	6014      	str	r4, [r2, #0]
 800484e:	7003      	strb	r3, [r0, #0]
 8004850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004852:	461c      	mov	r4, r3
 8004854:	e00c      	b.n	8004870 <__strtok_r+0x4c>
 8004856:	b915      	cbnz	r5, 800485e <__strtok_r+0x3a>
 8004858:	f814 3b01 	ldrb.w	r3, [r4], #1
 800485c:	460e      	mov	r6, r1
 800485e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004862:	42ab      	cmp	r3, r5
 8004864:	d1f7      	bne.n	8004856 <__strtok_r+0x32>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f3      	beq.n	8004852 <__strtok_r+0x2e>
 800486a:	2300      	movs	r3, #0
 800486c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004870:	6014      	str	r4, [r2, #0]
 8004872:	e7ed      	b.n	8004850 <__strtok_r+0x2c>

08004874 <__assert_func>:
 8004874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004876:	4614      	mov	r4, r2
 8004878:	461a      	mov	r2, r3
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <__assert_func+0x2c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4605      	mov	r5, r0
 8004880:	68d8      	ldr	r0, [r3, #12]
 8004882:	b14c      	cbz	r4, 8004898 <__assert_func+0x24>
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <__assert_func+0x30>)
 8004886:	9100      	str	r1, [sp, #0]
 8004888:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800488c:	4906      	ldr	r1, [pc, #24]	; (80048a8 <__assert_func+0x34>)
 800488e:	462b      	mov	r3, r5
 8004890:	f000 f80e 	bl	80048b0 <fiprintf>
 8004894:	f000 fcc4 	bl	8005220 <abort>
 8004898:	4b04      	ldr	r3, [pc, #16]	; (80048ac <__assert_func+0x38>)
 800489a:	461c      	mov	r4, r3
 800489c:	e7f3      	b.n	8004886 <__assert_func+0x12>
 800489e:	bf00      	nop
 80048a0:	200000a0 	.word	0x200000a0
 80048a4:	08005d04 	.word	0x08005d04
 80048a8:	08005d11 	.word	0x08005d11
 80048ac:	08005d3f 	.word	0x08005d3f

080048b0 <fiprintf>:
 80048b0:	b40e      	push	{r1, r2, r3}
 80048b2:	b503      	push	{r0, r1, lr}
 80048b4:	4601      	mov	r1, r0
 80048b6:	ab03      	add	r3, sp, #12
 80048b8:	4805      	ldr	r0, [pc, #20]	; (80048d0 <fiprintf+0x20>)
 80048ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80048be:	6800      	ldr	r0, [r0, #0]
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	f000 f919 	bl	8004af8 <_vfiprintf_r>
 80048c6:	b002      	add	sp, #8
 80048c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048cc:	b003      	add	sp, #12
 80048ce:	4770      	bx	lr
 80048d0:	200000a0 	.word	0x200000a0

080048d4 <malloc>:
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <malloc+0xc>)
 80048d6:	4601      	mov	r1, r0
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	f000 b86f 	b.w	80049bc <_malloc_r>
 80048de:	bf00      	nop
 80048e0:	200000a0 	.word	0x200000a0

080048e4 <_free_r>:
 80048e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048e6:	2900      	cmp	r1, #0
 80048e8:	d044      	beq.n	8004974 <_free_r+0x90>
 80048ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ee:	9001      	str	r0, [sp, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f1a1 0404 	sub.w	r4, r1, #4
 80048f6:	bfb8      	it	lt
 80048f8:	18e4      	addlt	r4, r4, r3
 80048fa:	f000 feb9 	bl	8005670 <__malloc_lock>
 80048fe:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <_free_r+0x94>)
 8004900:	9801      	ldr	r0, [sp, #4]
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	b933      	cbnz	r3, 8004914 <_free_r+0x30>
 8004906:	6063      	str	r3, [r4, #4]
 8004908:	6014      	str	r4, [r2, #0]
 800490a:	b003      	add	sp, #12
 800490c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004910:	f000 beb4 	b.w	800567c <__malloc_unlock>
 8004914:	42a3      	cmp	r3, r4
 8004916:	d908      	bls.n	800492a <_free_r+0x46>
 8004918:	6825      	ldr	r5, [r4, #0]
 800491a:	1961      	adds	r1, r4, r5
 800491c:	428b      	cmp	r3, r1
 800491e:	bf01      	itttt	eq
 8004920:	6819      	ldreq	r1, [r3, #0]
 8004922:	685b      	ldreq	r3, [r3, #4]
 8004924:	1949      	addeq	r1, r1, r5
 8004926:	6021      	streq	r1, [r4, #0]
 8004928:	e7ed      	b.n	8004906 <_free_r+0x22>
 800492a:	461a      	mov	r2, r3
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	b10b      	cbz	r3, 8004934 <_free_r+0x50>
 8004930:	42a3      	cmp	r3, r4
 8004932:	d9fa      	bls.n	800492a <_free_r+0x46>
 8004934:	6811      	ldr	r1, [r2, #0]
 8004936:	1855      	adds	r5, r2, r1
 8004938:	42a5      	cmp	r5, r4
 800493a:	d10b      	bne.n	8004954 <_free_r+0x70>
 800493c:	6824      	ldr	r4, [r4, #0]
 800493e:	4421      	add	r1, r4
 8004940:	1854      	adds	r4, r2, r1
 8004942:	42a3      	cmp	r3, r4
 8004944:	6011      	str	r1, [r2, #0]
 8004946:	d1e0      	bne.n	800490a <_free_r+0x26>
 8004948:	681c      	ldr	r4, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	6053      	str	r3, [r2, #4]
 800494e:	4421      	add	r1, r4
 8004950:	6011      	str	r1, [r2, #0]
 8004952:	e7da      	b.n	800490a <_free_r+0x26>
 8004954:	d902      	bls.n	800495c <_free_r+0x78>
 8004956:	230c      	movs	r3, #12
 8004958:	6003      	str	r3, [r0, #0]
 800495a:	e7d6      	b.n	800490a <_free_r+0x26>
 800495c:	6825      	ldr	r5, [r4, #0]
 800495e:	1961      	adds	r1, r4, r5
 8004960:	428b      	cmp	r3, r1
 8004962:	bf04      	itt	eq
 8004964:	6819      	ldreq	r1, [r3, #0]
 8004966:	685b      	ldreq	r3, [r3, #4]
 8004968:	6063      	str	r3, [r4, #4]
 800496a:	bf04      	itt	eq
 800496c:	1949      	addeq	r1, r1, r5
 800496e:	6021      	streq	r1, [r4, #0]
 8004970:	6054      	str	r4, [r2, #4]
 8004972:	e7ca      	b.n	800490a <_free_r+0x26>
 8004974:	b003      	add	sp, #12
 8004976:	bd30      	pop	{r4, r5, pc}
 8004978:	200065c8 	.word	0x200065c8

0800497c <sbrk_aligned>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4e0e      	ldr	r6, [pc, #56]	; (80049b8 <sbrk_aligned+0x3c>)
 8004980:	460c      	mov	r4, r1
 8004982:	6831      	ldr	r1, [r6, #0]
 8004984:	4605      	mov	r5, r0
 8004986:	b911      	cbnz	r1, 800498e <sbrk_aligned+0x12>
 8004988:	f000 fb7a 	bl	8005080 <_sbrk_r>
 800498c:	6030      	str	r0, [r6, #0]
 800498e:	4621      	mov	r1, r4
 8004990:	4628      	mov	r0, r5
 8004992:	f000 fb75 	bl	8005080 <_sbrk_r>
 8004996:	1c43      	adds	r3, r0, #1
 8004998:	d00a      	beq.n	80049b0 <sbrk_aligned+0x34>
 800499a:	1cc4      	adds	r4, r0, #3
 800499c:	f024 0403 	bic.w	r4, r4, #3
 80049a0:	42a0      	cmp	r0, r4
 80049a2:	d007      	beq.n	80049b4 <sbrk_aligned+0x38>
 80049a4:	1a21      	subs	r1, r4, r0
 80049a6:	4628      	mov	r0, r5
 80049a8:	f000 fb6a 	bl	8005080 <_sbrk_r>
 80049ac:	3001      	adds	r0, #1
 80049ae:	d101      	bne.n	80049b4 <sbrk_aligned+0x38>
 80049b0:	f04f 34ff 	mov.w	r4, #4294967295
 80049b4:	4620      	mov	r0, r4
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	200065cc 	.word	0x200065cc

080049bc <_malloc_r>:
 80049bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c0:	1ccd      	adds	r5, r1, #3
 80049c2:	f025 0503 	bic.w	r5, r5, #3
 80049c6:	3508      	adds	r5, #8
 80049c8:	2d0c      	cmp	r5, #12
 80049ca:	bf38      	it	cc
 80049cc:	250c      	movcc	r5, #12
 80049ce:	2d00      	cmp	r5, #0
 80049d0:	4607      	mov	r7, r0
 80049d2:	db01      	blt.n	80049d8 <_malloc_r+0x1c>
 80049d4:	42a9      	cmp	r1, r5
 80049d6:	d905      	bls.n	80049e4 <_malloc_r+0x28>
 80049d8:	230c      	movs	r3, #12
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	2600      	movs	r6, #0
 80049de:	4630      	mov	r0, r6
 80049e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e4:	4e2e      	ldr	r6, [pc, #184]	; (8004aa0 <_malloc_r+0xe4>)
 80049e6:	f000 fe43 	bl	8005670 <__malloc_lock>
 80049ea:	6833      	ldr	r3, [r6, #0]
 80049ec:	461c      	mov	r4, r3
 80049ee:	bb34      	cbnz	r4, 8004a3e <_malloc_r+0x82>
 80049f0:	4629      	mov	r1, r5
 80049f2:	4638      	mov	r0, r7
 80049f4:	f7ff ffc2 	bl	800497c <sbrk_aligned>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	4604      	mov	r4, r0
 80049fc:	d14d      	bne.n	8004a9a <_malloc_r+0xde>
 80049fe:	6834      	ldr	r4, [r6, #0]
 8004a00:	4626      	mov	r6, r4
 8004a02:	2e00      	cmp	r6, #0
 8004a04:	d140      	bne.n	8004a88 <_malloc_r+0xcc>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	4631      	mov	r1, r6
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	eb04 0803 	add.w	r8, r4, r3
 8004a10:	f000 fb36 	bl	8005080 <_sbrk_r>
 8004a14:	4580      	cmp	r8, r0
 8004a16:	d13a      	bne.n	8004a8e <_malloc_r+0xd2>
 8004a18:	6821      	ldr	r1, [r4, #0]
 8004a1a:	3503      	adds	r5, #3
 8004a1c:	1a6d      	subs	r5, r5, r1
 8004a1e:	f025 0503 	bic.w	r5, r5, #3
 8004a22:	3508      	adds	r5, #8
 8004a24:	2d0c      	cmp	r5, #12
 8004a26:	bf38      	it	cc
 8004a28:	250c      	movcc	r5, #12
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	f7ff ffa5 	bl	800497c <sbrk_aligned>
 8004a32:	3001      	adds	r0, #1
 8004a34:	d02b      	beq.n	8004a8e <_malloc_r+0xd2>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	442b      	add	r3, r5
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	e00e      	b.n	8004a5c <_malloc_r+0xa0>
 8004a3e:	6822      	ldr	r2, [r4, #0]
 8004a40:	1b52      	subs	r2, r2, r5
 8004a42:	d41e      	bmi.n	8004a82 <_malloc_r+0xc6>
 8004a44:	2a0b      	cmp	r2, #11
 8004a46:	d916      	bls.n	8004a76 <_malloc_r+0xba>
 8004a48:	1961      	adds	r1, r4, r5
 8004a4a:	42a3      	cmp	r3, r4
 8004a4c:	6025      	str	r5, [r4, #0]
 8004a4e:	bf18      	it	ne
 8004a50:	6059      	strne	r1, [r3, #4]
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	bf08      	it	eq
 8004a56:	6031      	streq	r1, [r6, #0]
 8004a58:	5162      	str	r2, [r4, r5]
 8004a5a:	604b      	str	r3, [r1, #4]
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	f104 060b 	add.w	r6, r4, #11
 8004a62:	f000 fe0b 	bl	800567c <__malloc_unlock>
 8004a66:	f026 0607 	bic.w	r6, r6, #7
 8004a6a:	1d23      	adds	r3, r4, #4
 8004a6c:	1af2      	subs	r2, r6, r3
 8004a6e:	d0b6      	beq.n	80049de <_malloc_r+0x22>
 8004a70:	1b9b      	subs	r3, r3, r6
 8004a72:	50a3      	str	r3, [r4, r2]
 8004a74:	e7b3      	b.n	80049de <_malloc_r+0x22>
 8004a76:	6862      	ldr	r2, [r4, #4]
 8004a78:	42a3      	cmp	r3, r4
 8004a7a:	bf0c      	ite	eq
 8004a7c:	6032      	streq	r2, [r6, #0]
 8004a7e:	605a      	strne	r2, [r3, #4]
 8004a80:	e7ec      	b.n	8004a5c <_malloc_r+0xa0>
 8004a82:	4623      	mov	r3, r4
 8004a84:	6864      	ldr	r4, [r4, #4]
 8004a86:	e7b2      	b.n	80049ee <_malloc_r+0x32>
 8004a88:	4634      	mov	r4, r6
 8004a8a:	6876      	ldr	r6, [r6, #4]
 8004a8c:	e7b9      	b.n	8004a02 <_malloc_r+0x46>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	4638      	mov	r0, r7
 8004a94:	f000 fdf2 	bl	800567c <__malloc_unlock>
 8004a98:	e7a1      	b.n	80049de <_malloc_r+0x22>
 8004a9a:	6025      	str	r5, [r4, #0]
 8004a9c:	e7de      	b.n	8004a5c <_malloc_r+0xa0>
 8004a9e:	bf00      	nop
 8004aa0:	200065c8 	.word	0x200065c8

08004aa4 <__sfputc_r>:
 8004aa4:	6893      	ldr	r3, [r2, #8]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	b410      	push	{r4}
 8004aac:	6093      	str	r3, [r2, #8]
 8004aae:	da08      	bge.n	8004ac2 <__sfputc_r+0x1e>
 8004ab0:	6994      	ldr	r4, [r2, #24]
 8004ab2:	42a3      	cmp	r3, r4
 8004ab4:	db01      	blt.n	8004aba <__sfputc_r+0x16>
 8004ab6:	290a      	cmp	r1, #10
 8004ab8:	d103      	bne.n	8004ac2 <__sfputc_r+0x1e>
 8004aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004abe:	f000 baef 	b.w	80050a0 <__swbuf_r>
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	1c58      	adds	r0, r3, #1
 8004ac6:	6010      	str	r0, [r2, #0]
 8004ac8:	7019      	strb	r1, [r3, #0]
 8004aca:	4608      	mov	r0, r1
 8004acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <__sfputs_r>:
 8004ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	460f      	mov	r7, r1
 8004ad8:	4614      	mov	r4, r2
 8004ada:	18d5      	adds	r5, r2, r3
 8004adc:	42ac      	cmp	r4, r5
 8004ade:	d101      	bne.n	8004ae4 <__sfputs_r+0x12>
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e007      	b.n	8004af4 <__sfputs_r+0x22>
 8004ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae8:	463a      	mov	r2, r7
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff ffda 	bl	8004aa4 <__sfputc_r>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d1f3      	bne.n	8004adc <__sfputs_r+0xa>
 8004af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004af8 <_vfiprintf_r>:
 8004af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	460d      	mov	r5, r1
 8004afe:	b09d      	sub	sp, #116	; 0x74
 8004b00:	4614      	mov	r4, r2
 8004b02:	4698      	mov	r8, r3
 8004b04:	4606      	mov	r6, r0
 8004b06:	b118      	cbz	r0, 8004b10 <_vfiprintf_r+0x18>
 8004b08:	6983      	ldr	r3, [r0, #24]
 8004b0a:	b90b      	cbnz	r3, 8004b10 <_vfiprintf_r+0x18>
 8004b0c:	f000 fcaa 	bl	8005464 <__sinit>
 8004b10:	4b89      	ldr	r3, [pc, #548]	; (8004d38 <_vfiprintf_r+0x240>)
 8004b12:	429d      	cmp	r5, r3
 8004b14:	d11b      	bne.n	8004b4e <_vfiprintf_r+0x56>
 8004b16:	6875      	ldr	r5, [r6, #4]
 8004b18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b1a:	07d9      	lsls	r1, r3, #31
 8004b1c:	d405      	bmi.n	8004b2a <_vfiprintf_r+0x32>
 8004b1e:	89ab      	ldrh	r3, [r5, #12]
 8004b20:	059a      	lsls	r2, r3, #22
 8004b22:	d402      	bmi.n	8004b2a <_vfiprintf_r+0x32>
 8004b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b26:	f000 fd3b 	bl	80055a0 <__retarget_lock_acquire_recursive>
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	071b      	lsls	r3, r3, #28
 8004b2e:	d501      	bpl.n	8004b34 <_vfiprintf_r+0x3c>
 8004b30:	692b      	ldr	r3, [r5, #16]
 8004b32:	b9eb      	cbnz	r3, 8004b70 <_vfiprintf_r+0x78>
 8004b34:	4629      	mov	r1, r5
 8004b36:	4630      	mov	r0, r6
 8004b38:	f000 fb04 	bl	8005144 <__swsetup_r>
 8004b3c:	b1c0      	cbz	r0, 8004b70 <_vfiprintf_r+0x78>
 8004b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b40:	07dc      	lsls	r4, r3, #31
 8004b42:	d50e      	bpl.n	8004b62 <_vfiprintf_r+0x6a>
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	b01d      	add	sp, #116	; 0x74
 8004b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4e:	4b7b      	ldr	r3, [pc, #492]	; (8004d3c <_vfiprintf_r+0x244>)
 8004b50:	429d      	cmp	r5, r3
 8004b52:	d101      	bne.n	8004b58 <_vfiprintf_r+0x60>
 8004b54:	68b5      	ldr	r5, [r6, #8]
 8004b56:	e7df      	b.n	8004b18 <_vfiprintf_r+0x20>
 8004b58:	4b79      	ldr	r3, [pc, #484]	; (8004d40 <_vfiprintf_r+0x248>)
 8004b5a:	429d      	cmp	r5, r3
 8004b5c:	bf08      	it	eq
 8004b5e:	68f5      	ldreq	r5, [r6, #12]
 8004b60:	e7da      	b.n	8004b18 <_vfiprintf_r+0x20>
 8004b62:	89ab      	ldrh	r3, [r5, #12]
 8004b64:	0598      	lsls	r0, r3, #22
 8004b66:	d4ed      	bmi.n	8004b44 <_vfiprintf_r+0x4c>
 8004b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b6a:	f000 fd1a 	bl	80055a2 <__retarget_lock_release_recursive>
 8004b6e:	e7e9      	b.n	8004b44 <_vfiprintf_r+0x4c>
 8004b70:	2300      	movs	r3, #0
 8004b72:	9309      	str	r3, [sp, #36]	; 0x24
 8004b74:	2320      	movs	r3, #32
 8004b76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b7e:	2330      	movs	r3, #48	; 0x30
 8004b80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d44 <_vfiprintf_r+0x24c>
 8004b84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b88:	f04f 0901 	mov.w	r9, #1
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	469a      	mov	sl, r3
 8004b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b94:	b10a      	cbz	r2, 8004b9a <_vfiprintf_r+0xa2>
 8004b96:	2a25      	cmp	r2, #37	; 0x25
 8004b98:	d1f9      	bne.n	8004b8e <_vfiprintf_r+0x96>
 8004b9a:	ebba 0b04 	subs.w	fp, sl, r4
 8004b9e:	d00b      	beq.n	8004bb8 <_vfiprintf_r+0xc0>
 8004ba0:	465b      	mov	r3, fp
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f7ff ff93 	bl	8004ad2 <__sfputs_r>
 8004bac:	3001      	adds	r0, #1
 8004bae:	f000 80aa 	beq.w	8004d06 <_vfiprintf_r+0x20e>
 8004bb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bb4:	445a      	add	r2, fp
 8004bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80a2 	beq.w	8004d06 <_vfiprintf_r+0x20e>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bcc:	f10a 0a01 	add.w	sl, sl, #1
 8004bd0:	9304      	str	r3, [sp, #16]
 8004bd2:	9307      	str	r3, [sp, #28]
 8004bd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bd8:	931a      	str	r3, [sp, #104]	; 0x68
 8004bda:	4654      	mov	r4, sl
 8004bdc:	2205      	movs	r2, #5
 8004bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be2:	4858      	ldr	r0, [pc, #352]	; (8004d44 <_vfiprintf_r+0x24c>)
 8004be4:	f7fb fb2c 	bl	8000240 <memchr>
 8004be8:	9a04      	ldr	r2, [sp, #16]
 8004bea:	b9d8      	cbnz	r0, 8004c24 <_vfiprintf_r+0x12c>
 8004bec:	06d1      	lsls	r1, r2, #27
 8004bee:	bf44      	itt	mi
 8004bf0:	2320      	movmi	r3, #32
 8004bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bf6:	0713      	lsls	r3, r2, #28
 8004bf8:	bf44      	itt	mi
 8004bfa:	232b      	movmi	r3, #43	; 0x2b
 8004bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c00:	f89a 3000 	ldrb.w	r3, [sl]
 8004c04:	2b2a      	cmp	r3, #42	; 0x2a
 8004c06:	d015      	beq.n	8004c34 <_vfiprintf_r+0x13c>
 8004c08:	9a07      	ldr	r2, [sp, #28]
 8004c0a:	4654      	mov	r4, sl
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f04f 0c0a 	mov.w	ip, #10
 8004c12:	4621      	mov	r1, r4
 8004c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c18:	3b30      	subs	r3, #48	; 0x30
 8004c1a:	2b09      	cmp	r3, #9
 8004c1c:	d94e      	bls.n	8004cbc <_vfiprintf_r+0x1c4>
 8004c1e:	b1b0      	cbz	r0, 8004c4e <_vfiprintf_r+0x156>
 8004c20:	9207      	str	r2, [sp, #28]
 8004c22:	e014      	b.n	8004c4e <_vfiprintf_r+0x156>
 8004c24:	eba0 0308 	sub.w	r3, r0, r8
 8004c28:	fa09 f303 	lsl.w	r3, r9, r3
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	46a2      	mov	sl, r4
 8004c32:	e7d2      	b.n	8004bda <_vfiprintf_r+0xe2>
 8004c34:	9b03      	ldr	r3, [sp, #12]
 8004c36:	1d19      	adds	r1, r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	9103      	str	r1, [sp, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bfbb      	ittet	lt
 8004c40:	425b      	neglt	r3, r3
 8004c42:	f042 0202 	orrlt.w	r2, r2, #2
 8004c46:	9307      	strge	r3, [sp, #28]
 8004c48:	9307      	strlt	r3, [sp, #28]
 8004c4a:	bfb8      	it	lt
 8004c4c:	9204      	strlt	r2, [sp, #16]
 8004c4e:	7823      	ldrb	r3, [r4, #0]
 8004c50:	2b2e      	cmp	r3, #46	; 0x2e
 8004c52:	d10c      	bne.n	8004c6e <_vfiprintf_r+0x176>
 8004c54:	7863      	ldrb	r3, [r4, #1]
 8004c56:	2b2a      	cmp	r3, #42	; 0x2a
 8004c58:	d135      	bne.n	8004cc6 <_vfiprintf_r+0x1ce>
 8004c5a:	9b03      	ldr	r3, [sp, #12]
 8004c5c:	1d1a      	adds	r2, r3, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	9203      	str	r2, [sp, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bfb8      	it	lt
 8004c66:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c6a:	3402      	adds	r4, #2
 8004c6c:	9305      	str	r3, [sp, #20]
 8004c6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d54 <_vfiprintf_r+0x25c>
 8004c72:	7821      	ldrb	r1, [r4, #0]
 8004c74:	2203      	movs	r2, #3
 8004c76:	4650      	mov	r0, sl
 8004c78:	f7fb fae2 	bl	8000240 <memchr>
 8004c7c:	b140      	cbz	r0, 8004c90 <_vfiprintf_r+0x198>
 8004c7e:	2340      	movs	r3, #64	; 0x40
 8004c80:	eba0 000a 	sub.w	r0, r0, sl
 8004c84:	fa03 f000 	lsl.w	r0, r3, r0
 8004c88:	9b04      	ldr	r3, [sp, #16]
 8004c8a:	4303      	orrs	r3, r0
 8004c8c:	3401      	adds	r4, #1
 8004c8e:	9304      	str	r3, [sp, #16]
 8004c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c94:	482c      	ldr	r0, [pc, #176]	; (8004d48 <_vfiprintf_r+0x250>)
 8004c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c9a:	2206      	movs	r2, #6
 8004c9c:	f7fb fad0 	bl	8000240 <memchr>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d03f      	beq.n	8004d24 <_vfiprintf_r+0x22c>
 8004ca4:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <_vfiprintf_r+0x254>)
 8004ca6:	bb1b      	cbnz	r3, 8004cf0 <_vfiprintf_r+0x1f8>
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	3307      	adds	r3, #7
 8004cac:	f023 0307 	bic.w	r3, r3, #7
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	9303      	str	r3, [sp, #12]
 8004cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb6:	443b      	add	r3, r7
 8004cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cba:	e767      	b.n	8004b8c <_vfiprintf_r+0x94>
 8004cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	e7a5      	b.n	8004c12 <_vfiprintf_r+0x11a>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	3401      	adds	r4, #1
 8004cca:	9305      	str	r3, [sp, #20]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f04f 0c0a 	mov.w	ip, #10
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd8:	3a30      	subs	r2, #48	; 0x30
 8004cda:	2a09      	cmp	r2, #9
 8004cdc:	d903      	bls.n	8004ce6 <_vfiprintf_r+0x1ee>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0c5      	beq.n	8004c6e <_vfiprintf_r+0x176>
 8004ce2:	9105      	str	r1, [sp, #20]
 8004ce4:	e7c3      	b.n	8004c6e <_vfiprintf_r+0x176>
 8004ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cea:	4604      	mov	r4, r0
 8004cec:	2301      	movs	r3, #1
 8004cee:	e7f0      	b.n	8004cd2 <_vfiprintf_r+0x1da>
 8004cf0:	ab03      	add	r3, sp, #12
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	462a      	mov	r2, r5
 8004cf6:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <_vfiprintf_r+0x258>)
 8004cf8:	a904      	add	r1, sp, #16
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f3af 8000 	nop.w
 8004d00:	4607      	mov	r7, r0
 8004d02:	1c78      	adds	r0, r7, #1
 8004d04:	d1d6      	bne.n	8004cb4 <_vfiprintf_r+0x1bc>
 8004d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d08:	07d9      	lsls	r1, r3, #31
 8004d0a:	d405      	bmi.n	8004d18 <_vfiprintf_r+0x220>
 8004d0c:	89ab      	ldrh	r3, [r5, #12]
 8004d0e:	059a      	lsls	r2, r3, #22
 8004d10:	d402      	bmi.n	8004d18 <_vfiprintf_r+0x220>
 8004d12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d14:	f000 fc45 	bl	80055a2 <__retarget_lock_release_recursive>
 8004d18:	89ab      	ldrh	r3, [r5, #12]
 8004d1a:	065b      	lsls	r3, r3, #25
 8004d1c:	f53f af12 	bmi.w	8004b44 <_vfiprintf_r+0x4c>
 8004d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d22:	e711      	b.n	8004b48 <_vfiprintf_r+0x50>
 8004d24:	ab03      	add	r3, sp, #12
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	462a      	mov	r2, r5
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <_vfiprintf_r+0x258>)
 8004d2c:	a904      	add	r1, sp, #16
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f000 f880 	bl	8004e34 <_printf_i>
 8004d34:	e7e4      	b.n	8004d00 <_vfiprintf_r+0x208>
 8004d36:	bf00      	nop
 8004d38:	08005d94 	.word	0x08005d94
 8004d3c:	08005db4 	.word	0x08005db4
 8004d40:	08005d74 	.word	0x08005d74
 8004d44:	08005d40 	.word	0x08005d40
 8004d48:	08005d4a 	.word	0x08005d4a
 8004d4c:	00000000 	.word	0x00000000
 8004d50:	08004ad3 	.word	0x08004ad3
 8004d54:	08005d46 	.word	0x08005d46

08004d58 <_printf_common>:
 8004d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	4699      	mov	r9, r3
 8004d60:	688a      	ldr	r2, [r1, #8]
 8004d62:	690b      	ldr	r3, [r1, #16]
 8004d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	bfb8      	it	lt
 8004d6c:	4613      	movlt	r3, r2
 8004d6e:	6033      	str	r3, [r6, #0]
 8004d70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d74:	4607      	mov	r7, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	b10a      	cbz	r2, 8004d7e <_printf_common+0x26>
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	6033      	str	r3, [r6, #0]
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	0699      	lsls	r1, r3, #26
 8004d82:	bf42      	ittt	mi
 8004d84:	6833      	ldrmi	r3, [r6, #0]
 8004d86:	3302      	addmi	r3, #2
 8004d88:	6033      	strmi	r3, [r6, #0]
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	f015 0506 	ands.w	r5, r5, #6
 8004d90:	d106      	bne.n	8004da0 <_printf_common+0x48>
 8004d92:	f104 0a19 	add.w	sl, r4, #25
 8004d96:	68e3      	ldr	r3, [r4, #12]
 8004d98:	6832      	ldr	r2, [r6, #0]
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	42ab      	cmp	r3, r5
 8004d9e:	dc26      	bgt.n	8004dee <_printf_common+0x96>
 8004da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004da4:	1e13      	subs	r3, r2, #0
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	bf18      	it	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	0692      	lsls	r2, r2, #26
 8004dae:	d42b      	bmi.n	8004e08 <_printf_common+0xb0>
 8004db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004db4:	4649      	mov	r1, r9
 8004db6:	4638      	mov	r0, r7
 8004db8:	47c0      	blx	r8
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d01e      	beq.n	8004dfc <_printf_common+0xa4>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	68e5      	ldr	r5, [r4, #12]
 8004dc2:	6832      	ldr	r2, [r6, #0]
 8004dc4:	f003 0306 	and.w	r3, r3, #6
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	bf08      	it	eq
 8004dcc:	1aad      	subeq	r5, r5, r2
 8004dce:	68a3      	ldr	r3, [r4, #8]
 8004dd0:	6922      	ldr	r2, [r4, #16]
 8004dd2:	bf0c      	ite	eq
 8004dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd8:	2500      	movne	r5, #0
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	bfc4      	itt	gt
 8004dde:	1a9b      	subgt	r3, r3, r2
 8004de0:	18ed      	addgt	r5, r5, r3
 8004de2:	2600      	movs	r6, #0
 8004de4:	341a      	adds	r4, #26
 8004de6:	42b5      	cmp	r5, r6
 8004de8:	d11a      	bne.n	8004e20 <_printf_common+0xc8>
 8004dea:	2000      	movs	r0, #0
 8004dec:	e008      	b.n	8004e00 <_printf_common+0xa8>
 8004dee:	2301      	movs	r3, #1
 8004df0:	4652      	mov	r2, sl
 8004df2:	4649      	mov	r1, r9
 8004df4:	4638      	mov	r0, r7
 8004df6:	47c0      	blx	r8
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d103      	bne.n	8004e04 <_printf_common+0xac>
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e04:	3501      	adds	r5, #1
 8004e06:	e7c6      	b.n	8004d96 <_printf_common+0x3e>
 8004e08:	18e1      	adds	r1, r4, r3
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	2030      	movs	r0, #48	; 0x30
 8004e0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e12:	4422      	add	r2, r4
 8004e14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	e7c7      	b.n	8004db0 <_printf_common+0x58>
 8004e20:	2301      	movs	r3, #1
 8004e22:	4622      	mov	r2, r4
 8004e24:	4649      	mov	r1, r9
 8004e26:	4638      	mov	r0, r7
 8004e28:	47c0      	blx	r8
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d0e6      	beq.n	8004dfc <_printf_common+0xa4>
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7d9      	b.n	8004de6 <_printf_common+0x8e>
	...

08004e34 <_printf_i>:
 8004e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e38:	7e0f      	ldrb	r7, [r1, #24]
 8004e3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e3c:	2f78      	cmp	r7, #120	; 0x78
 8004e3e:	4691      	mov	r9, r2
 8004e40:	4680      	mov	r8, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	469a      	mov	sl, r3
 8004e46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e4a:	d807      	bhi.n	8004e5c <_printf_i+0x28>
 8004e4c:	2f62      	cmp	r7, #98	; 0x62
 8004e4e:	d80a      	bhi.n	8004e66 <_printf_i+0x32>
 8004e50:	2f00      	cmp	r7, #0
 8004e52:	f000 80d8 	beq.w	8005006 <_printf_i+0x1d2>
 8004e56:	2f58      	cmp	r7, #88	; 0x58
 8004e58:	f000 80a3 	beq.w	8004fa2 <_printf_i+0x16e>
 8004e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e64:	e03a      	b.n	8004edc <_printf_i+0xa8>
 8004e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e6a:	2b15      	cmp	r3, #21
 8004e6c:	d8f6      	bhi.n	8004e5c <_printf_i+0x28>
 8004e6e:	a101      	add	r1, pc, #4	; (adr r1, 8004e74 <_printf_i+0x40>)
 8004e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e74:	08004ecd 	.word	0x08004ecd
 8004e78:	08004ee1 	.word	0x08004ee1
 8004e7c:	08004e5d 	.word	0x08004e5d
 8004e80:	08004e5d 	.word	0x08004e5d
 8004e84:	08004e5d 	.word	0x08004e5d
 8004e88:	08004e5d 	.word	0x08004e5d
 8004e8c:	08004ee1 	.word	0x08004ee1
 8004e90:	08004e5d 	.word	0x08004e5d
 8004e94:	08004e5d 	.word	0x08004e5d
 8004e98:	08004e5d 	.word	0x08004e5d
 8004e9c:	08004e5d 	.word	0x08004e5d
 8004ea0:	08004fed 	.word	0x08004fed
 8004ea4:	08004f11 	.word	0x08004f11
 8004ea8:	08004fcf 	.word	0x08004fcf
 8004eac:	08004e5d 	.word	0x08004e5d
 8004eb0:	08004e5d 	.word	0x08004e5d
 8004eb4:	0800500f 	.word	0x0800500f
 8004eb8:	08004e5d 	.word	0x08004e5d
 8004ebc:	08004f11 	.word	0x08004f11
 8004ec0:	08004e5d 	.word	0x08004e5d
 8004ec4:	08004e5d 	.word	0x08004e5d
 8004ec8:	08004fd7 	.word	0x08004fd7
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	1d1a      	adds	r2, r3, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	602a      	str	r2, [r5, #0]
 8004ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0a3      	b.n	8005028 <_printf_i+0x1f4>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	6829      	ldr	r1, [r5, #0]
 8004ee4:	0606      	lsls	r6, r0, #24
 8004ee6:	f101 0304 	add.w	r3, r1, #4
 8004eea:	d50a      	bpl.n	8004f02 <_printf_i+0xce>
 8004eec:	680e      	ldr	r6, [r1, #0]
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	da03      	bge.n	8004efc <_printf_i+0xc8>
 8004ef4:	232d      	movs	r3, #45	; 0x2d
 8004ef6:	4276      	negs	r6, r6
 8004ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004efc:	485e      	ldr	r0, [pc, #376]	; (8005078 <_printf_i+0x244>)
 8004efe:	230a      	movs	r3, #10
 8004f00:	e019      	b.n	8004f36 <_printf_i+0x102>
 8004f02:	680e      	ldr	r6, [r1, #0]
 8004f04:	602b      	str	r3, [r5, #0]
 8004f06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f0a:	bf18      	it	ne
 8004f0c:	b236      	sxthne	r6, r6
 8004f0e:	e7ef      	b.n	8004ef0 <_printf_i+0xbc>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	1d19      	adds	r1, r3, #4
 8004f16:	6029      	str	r1, [r5, #0]
 8004f18:	0601      	lsls	r1, r0, #24
 8004f1a:	d501      	bpl.n	8004f20 <_printf_i+0xec>
 8004f1c:	681e      	ldr	r6, [r3, #0]
 8004f1e:	e002      	b.n	8004f26 <_printf_i+0xf2>
 8004f20:	0646      	lsls	r6, r0, #25
 8004f22:	d5fb      	bpl.n	8004f1c <_printf_i+0xe8>
 8004f24:	881e      	ldrh	r6, [r3, #0]
 8004f26:	4854      	ldr	r0, [pc, #336]	; (8005078 <_printf_i+0x244>)
 8004f28:	2f6f      	cmp	r7, #111	; 0x6f
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2308      	moveq	r3, #8
 8004f2e:	230a      	movne	r3, #10
 8004f30:	2100      	movs	r1, #0
 8004f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f36:	6865      	ldr	r5, [r4, #4]
 8004f38:	60a5      	str	r5, [r4, #8]
 8004f3a:	2d00      	cmp	r5, #0
 8004f3c:	bfa2      	ittt	ge
 8004f3e:	6821      	ldrge	r1, [r4, #0]
 8004f40:	f021 0104 	bicge.w	r1, r1, #4
 8004f44:	6021      	strge	r1, [r4, #0]
 8004f46:	b90e      	cbnz	r6, 8004f4c <_printf_i+0x118>
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	d04d      	beq.n	8004fe8 <_printf_i+0x1b4>
 8004f4c:	4615      	mov	r5, r2
 8004f4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f52:	fb03 6711 	mls	r7, r3, r1, r6
 8004f56:	5dc7      	ldrb	r7, [r0, r7]
 8004f58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f5c:	4637      	mov	r7, r6
 8004f5e:	42bb      	cmp	r3, r7
 8004f60:	460e      	mov	r6, r1
 8004f62:	d9f4      	bls.n	8004f4e <_printf_i+0x11a>
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d10b      	bne.n	8004f80 <_printf_i+0x14c>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	07de      	lsls	r6, r3, #31
 8004f6c:	d508      	bpl.n	8004f80 <_printf_i+0x14c>
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	6861      	ldr	r1, [r4, #4]
 8004f72:	4299      	cmp	r1, r3
 8004f74:	bfde      	ittt	le
 8004f76:	2330      	movle	r3, #48	; 0x30
 8004f78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f80:	1b52      	subs	r2, r2, r5
 8004f82:	6122      	str	r2, [r4, #16]
 8004f84:	f8cd a000 	str.w	sl, [sp]
 8004f88:	464b      	mov	r3, r9
 8004f8a:	aa03      	add	r2, sp, #12
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f7ff fee2 	bl	8004d58 <_printf_common>
 8004f94:	3001      	adds	r0, #1
 8004f96:	d14c      	bne.n	8005032 <_printf_i+0x1fe>
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9c:	b004      	add	sp, #16
 8004f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa2:	4835      	ldr	r0, [pc, #212]	; (8005078 <_printf_i+0x244>)
 8004fa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fa8:	6829      	ldr	r1, [r5, #0]
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fb0:	6029      	str	r1, [r5, #0]
 8004fb2:	061d      	lsls	r5, r3, #24
 8004fb4:	d514      	bpl.n	8004fe0 <_printf_i+0x1ac>
 8004fb6:	07df      	lsls	r7, r3, #31
 8004fb8:	bf44      	itt	mi
 8004fba:	f043 0320 	orrmi.w	r3, r3, #32
 8004fbe:	6023      	strmi	r3, [r4, #0]
 8004fc0:	b91e      	cbnz	r6, 8004fca <_printf_i+0x196>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	f023 0320 	bic.w	r3, r3, #32
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	2310      	movs	r3, #16
 8004fcc:	e7b0      	b.n	8004f30 <_printf_i+0xfc>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	f043 0320 	orr.w	r3, r3, #32
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	2378      	movs	r3, #120	; 0x78
 8004fd8:	4828      	ldr	r0, [pc, #160]	; (800507c <_printf_i+0x248>)
 8004fda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fde:	e7e3      	b.n	8004fa8 <_printf_i+0x174>
 8004fe0:	0659      	lsls	r1, r3, #25
 8004fe2:	bf48      	it	mi
 8004fe4:	b2b6      	uxthmi	r6, r6
 8004fe6:	e7e6      	b.n	8004fb6 <_printf_i+0x182>
 8004fe8:	4615      	mov	r5, r2
 8004fea:	e7bb      	b.n	8004f64 <_printf_i+0x130>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	6826      	ldr	r6, [r4, #0]
 8004ff0:	6961      	ldr	r1, [r4, #20]
 8004ff2:	1d18      	adds	r0, r3, #4
 8004ff4:	6028      	str	r0, [r5, #0]
 8004ff6:	0635      	lsls	r5, r6, #24
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	d501      	bpl.n	8005000 <_printf_i+0x1cc>
 8004ffc:	6019      	str	r1, [r3, #0]
 8004ffe:	e002      	b.n	8005006 <_printf_i+0x1d2>
 8005000:	0670      	lsls	r0, r6, #25
 8005002:	d5fb      	bpl.n	8004ffc <_printf_i+0x1c8>
 8005004:	8019      	strh	r1, [r3, #0]
 8005006:	2300      	movs	r3, #0
 8005008:	6123      	str	r3, [r4, #16]
 800500a:	4615      	mov	r5, r2
 800500c:	e7ba      	b.n	8004f84 <_printf_i+0x150>
 800500e:	682b      	ldr	r3, [r5, #0]
 8005010:	1d1a      	adds	r2, r3, #4
 8005012:	602a      	str	r2, [r5, #0]
 8005014:	681d      	ldr	r5, [r3, #0]
 8005016:	6862      	ldr	r2, [r4, #4]
 8005018:	2100      	movs	r1, #0
 800501a:	4628      	mov	r0, r5
 800501c:	f7fb f910 	bl	8000240 <memchr>
 8005020:	b108      	cbz	r0, 8005026 <_printf_i+0x1f2>
 8005022:	1b40      	subs	r0, r0, r5
 8005024:	6060      	str	r0, [r4, #4]
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	2300      	movs	r3, #0
 800502c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005030:	e7a8      	b.n	8004f84 <_printf_i+0x150>
 8005032:	6923      	ldr	r3, [r4, #16]
 8005034:	462a      	mov	r2, r5
 8005036:	4649      	mov	r1, r9
 8005038:	4640      	mov	r0, r8
 800503a:	47d0      	blx	sl
 800503c:	3001      	adds	r0, #1
 800503e:	d0ab      	beq.n	8004f98 <_printf_i+0x164>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	079b      	lsls	r3, r3, #30
 8005044:	d413      	bmi.n	800506e <_printf_i+0x23a>
 8005046:	68e0      	ldr	r0, [r4, #12]
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	4298      	cmp	r0, r3
 800504c:	bfb8      	it	lt
 800504e:	4618      	movlt	r0, r3
 8005050:	e7a4      	b.n	8004f9c <_printf_i+0x168>
 8005052:	2301      	movs	r3, #1
 8005054:	4632      	mov	r2, r6
 8005056:	4649      	mov	r1, r9
 8005058:	4640      	mov	r0, r8
 800505a:	47d0      	blx	sl
 800505c:	3001      	adds	r0, #1
 800505e:	d09b      	beq.n	8004f98 <_printf_i+0x164>
 8005060:	3501      	adds	r5, #1
 8005062:	68e3      	ldr	r3, [r4, #12]
 8005064:	9903      	ldr	r1, [sp, #12]
 8005066:	1a5b      	subs	r3, r3, r1
 8005068:	42ab      	cmp	r3, r5
 800506a:	dcf2      	bgt.n	8005052 <_printf_i+0x21e>
 800506c:	e7eb      	b.n	8005046 <_printf_i+0x212>
 800506e:	2500      	movs	r5, #0
 8005070:	f104 0619 	add.w	r6, r4, #25
 8005074:	e7f5      	b.n	8005062 <_printf_i+0x22e>
 8005076:	bf00      	nop
 8005078:	08005d51 	.word	0x08005d51
 800507c:	08005d62 	.word	0x08005d62

08005080 <_sbrk_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4d06      	ldr	r5, [pc, #24]	; (800509c <_sbrk_r+0x1c>)
 8005084:	2300      	movs	r3, #0
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	f7fc fdba 	bl	8001c04 <_sbrk>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_sbrk_r+0x1a>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	b103      	cbz	r3, 800509a <_sbrk_r+0x1a>
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	200065d4 	.word	0x200065d4

080050a0 <__swbuf_r>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	460e      	mov	r6, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	4605      	mov	r5, r0
 80050a8:	b118      	cbz	r0, 80050b2 <__swbuf_r+0x12>
 80050aa:	6983      	ldr	r3, [r0, #24]
 80050ac:	b90b      	cbnz	r3, 80050b2 <__swbuf_r+0x12>
 80050ae:	f000 f9d9 	bl	8005464 <__sinit>
 80050b2:	4b21      	ldr	r3, [pc, #132]	; (8005138 <__swbuf_r+0x98>)
 80050b4:	429c      	cmp	r4, r3
 80050b6:	d12b      	bne.n	8005110 <__swbuf_r+0x70>
 80050b8:	686c      	ldr	r4, [r5, #4]
 80050ba:	69a3      	ldr	r3, [r4, #24]
 80050bc:	60a3      	str	r3, [r4, #8]
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	071a      	lsls	r2, r3, #28
 80050c2:	d52f      	bpl.n	8005124 <__swbuf_r+0x84>
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	b36b      	cbz	r3, 8005124 <__swbuf_r+0x84>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	1ac0      	subs	r0, r0, r3
 80050ce:	6963      	ldr	r3, [r4, #20]
 80050d0:	b2f6      	uxtb	r6, r6
 80050d2:	4283      	cmp	r3, r0
 80050d4:	4637      	mov	r7, r6
 80050d6:	dc04      	bgt.n	80050e2 <__swbuf_r+0x42>
 80050d8:	4621      	mov	r1, r4
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 f92e 	bl	800533c <_fflush_r>
 80050e0:	bb30      	cbnz	r0, 8005130 <__swbuf_r+0x90>
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	60a3      	str	r3, [r4, #8]
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	6022      	str	r2, [r4, #0]
 80050ee:	701e      	strb	r6, [r3, #0]
 80050f0:	6963      	ldr	r3, [r4, #20]
 80050f2:	3001      	adds	r0, #1
 80050f4:	4283      	cmp	r3, r0
 80050f6:	d004      	beq.n	8005102 <__swbuf_r+0x62>
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	07db      	lsls	r3, r3, #31
 80050fc:	d506      	bpl.n	800510c <__swbuf_r+0x6c>
 80050fe:	2e0a      	cmp	r6, #10
 8005100:	d104      	bne.n	800510c <__swbuf_r+0x6c>
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	f000 f919 	bl	800533c <_fflush_r>
 800510a:	b988      	cbnz	r0, 8005130 <__swbuf_r+0x90>
 800510c:	4638      	mov	r0, r7
 800510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <__swbuf_r+0x9c>)
 8005112:	429c      	cmp	r4, r3
 8005114:	d101      	bne.n	800511a <__swbuf_r+0x7a>
 8005116:	68ac      	ldr	r4, [r5, #8]
 8005118:	e7cf      	b.n	80050ba <__swbuf_r+0x1a>
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <__swbuf_r+0xa0>)
 800511c:	429c      	cmp	r4, r3
 800511e:	bf08      	it	eq
 8005120:	68ec      	ldreq	r4, [r5, #12]
 8005122:	e7ca      	b.n	80050ba <__swbuf_r+0x1a>
 8005124:	4621      	mov	r1, r4
 8005126:	4628      	mov	r0, r5
 8005128:	f000 f80c 	bl	8005144 <__swsetup_r>
 800512c:	2800      	cmp	r0, #0
 800512e:	d0cb      	beq.n	80050c8 <__swbuf_r+0x28>
 8005130:	f04f 37ff 	mov.w	r7, #4294967295
 8005134:	e7ea      	b.n	800510c <__swbuf_r+0x6c>
 8005136:	bf00      	nop
 8005138:	08005d94 	.word	0x08005d94
 800513c:	08005db4 	.word	0x08005db4
 8005140:	08005d74 	.word	0x08005d74

08005144 <__swsetup_r>:
 8005144:	4b32      	ldr	r3, [pc, #200]	; (8005210 <__swsetup_r+0xcc>)
 8005146:	b570      	push	{r4, r5, r6, lr}
 8005148:	681d      	ldr	r5, [r3, #0]
 800514a:	4606      	mov	r6, r0
 800514c:	460c      	mov	r4, r1
 800514e:	b125      	cbz	r5, 800515a <__swsetup_r+0x16>
 8005150:	69ab      	ldr	r3, [r5, #24]
 8005152:	b913      	cbnz	r3, 800515a <__swsetup_r+0x16>
 8005154:	4628      	mov	r0, r5
 8005156:	f000 f985 	bl	8005464 <__sinit>
 800515a:	4b2e      	ldr	r3, [pc, #184]	; (8005214 <__swsetup_r+0xd0>)
 800515c:	429c      	cmp	r4, r3
 800515e:	d10f      	bne.n	8005180 <__swsetup_r+0x3c>
 8005160:	686c      	ldr	r4, [r5, #4]
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005168:	0719      	lsls	r1, r3, #28
 800516a:	d42c      	bmi.n	80051c6 <__swsetup_r+0x82>
 800516c:	06dd      	lsls	r5, r3, #27
 800516e:	d411      	bmi.n	8005194 <__swsetup_r+0x50>
 8005170:	2309      	movs	r3, #9
 8005172:	6033      	str	r3, [r6, #0]
 8005174:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005178:	81a3      	strh	r3, [r4, #12]
 800517a:	f04f 30ff 	mov.w	r0, #4294967295
 800517e:	e03e      	b.n	80051fe <__swsetup_r+0xba>
 8005180:	4b25      	ldr	r3, [pc, #148]	; (8005218 <__swsetup_r+0xd4>)
 8005182:	429c      	cmp	r4, r3
 8005184:	d101      	bne.n	800518a <__swsetup_r+0x46>
 8005186:	68ac      	ldr	r4, [r5, #8]
 8005188:	e7eb      	b.n	8005162 <__swsetup_r+0x1e>
 800518a:	4b24      	ldr	r3, [pc, #144]	; (800521c <__swsetup_r+0xd8>)
 800518c:	429c      	cmp	r4, r3
 800518e:	bf08      	it	eq
 8005190:	68ec      	ldreq	r4, [r5, #12]
 8005192:	e7e6      	b.n	8005162 <__swsetup_r+0x1e>
 8005194:	0758      	lsls	r0, r3, #29
 8005196:	d512      	bpl.n	80051be <__swsetup_r+0x7a>
 8005198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800519a:	b141      	cbz	r1, 80051ae <__swsetup_r+0x6a>
 800519c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051a0:	4299      	cmp	r1, r3
 80051a2:	d002      	beq.n	80051aa <__swsetup_r+0x66>
 80051a4:	4630      	mov	r0, r6
 80051a6:	f7ff fb9d 	bl	80048e4 <_free_r>
 80051aa:	2300      	movs	r3, #0
 80051ac:	6363      	str	r3, [r4, #52]	; 0x34
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051b4:	81a3      	strh	r3, [r4, #12]
 80051b6:	2300      	movs	r3, #0
 80051b8:	6063      	str	r3, [r4, #4]
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	f043 0308 	orr.w	r3, r3, #8
 80051c4:	81a3      	strh	r3, [r4, #12]
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	b94b      	cbnz	r3, 80051de <__swsetup_r+0x9a>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d4:	d003      	beq.n	80051de <__swsetup_r+0x9a>
 80051d6:	4621      	mov	r1, r4
 80051d8:	4630      	mov	r0, r6
 80051da:	f000 fa09 	bl	80055f0 <__smakebuf_r>
 80051de:	89a0      	ldrh	r0, [r4, #12]
 80051e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051e4:	f010 0301 	ands.w	r3, r0, #1
 80051e8:	d00a      	beq.n	8005200 <__swsetup_r+0xbc>
 80051ea:	2300      	movs	r3, #0
 80051ec:	60a3      	str	r3, [r4, #8]
 80051ee:	6963      	ldr	r3, [r4, #20]
 80051f0:	425b      	negs	r3, r3
 80051f2:	61a3      	str	r3, [r4, #24]
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	b943      	cbnz	r3, 800520a <__swsetup_r+0xc6>
 80051f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051fc:	d1ba      	bne.n	8005174 <__swsetup_r+0x30>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	0781      	lsls	r1, r0, #30
 8005202:	bf58      	it	pl
 8005204:	6963      	ldrpl	r3, [r4, #20]
 8005206:	60a3      	str	r3, [r4, #8]
 8005208:	e7f4      	b.n	80051f4 <__swsetup_r+0xb0>
 800520a:	2000      	movs	r0, #0
 800520c:	e7f7      	b.n	80051fe <__swsetup_r+0xba>
 800520e:	bf00      	nop
 8005210:	200000a0 	.word	0x200000a0
 8005214:	08005d94 	.word	0x08005d94
 8005218:	08005db4 	.word	0x08005db4
 800521c:	08005d74 	.word	0x08005d74

08005220 <abort>:
 8005220:	b508      	push	{r3, lr}
 8005222:	2006      	movs	r0, #6
 8005224:	f000 fa58 	bl	80056d8 <raise>
 8005228:	2001      	movs	r0, #1
 800522a:	f7fc fc73 	bl	8001b14 <_exit>
	...

08005230 <__sflush_r>:
 8005230:	898a      	ldrh	r2, [r1, #12]
 8005232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005236:	4605      	mov	r5, r0
 8005238:	0710      	lsls	r0, r2, #28
 800523a:	460c      	mov	r4, r1
 800523c:	d458      	bmi.n	80052f0 <__sflush_r+0xc0>
 800523e:	684b      	ldr	r3, [r1, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	dc05      	bgt.n	8005250 <__sflush_r+0x20>
 8005244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	dc02      	bgt.n	8005250 <__sflush_r+0x20>
 800524a:	2000      	movs	r0, #0
 800524c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005252:	2e00      	cmp	r6, #0
 8005254:	d0f9      	beq.n	800524a <__sflush_r+0x1a>
 8005256:	2300      	movs	r3, #0
 8005258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800525c:	682f      	ldr	r7, [r5, #0]
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	d032      	beq.n	80052c8 <__sflush_r+0x98>
 8005262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	075a      	lsls	r2, r3, #29
 8005268:	d505      	bpl.n	8005276 <__sflush_r+0x46>
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	1ac0      	subs	r0, r0, r3
 800526e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005270:	b10b      	cbz	r3, 8005276 <__sflush_r+0x46>
 8005272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005274:	1ac0      	subs	r0, r0, r3
 8005276:	2300      	movs	r3, #0
 8005278:	4602      	mov	r2, r0
 800527a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800527c:	6a21      	ldr	r1, [r4, #32]
 800527e:	4628      	mov	r0, r5
 8005280:	47b0      	blx	r6
 8005282:	1c43      	adds	r3, r0, #1
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	d106      	bne.n	8005296 <__sflush_r+0x66>
 8005288:	6829      	ldr	r1, [r5, #0]
 800528a:	291d      	cmp	r1, #29
 800528c:	d82c      	bhi.n	80052e8 <__sflush_r+0xb8>
 800528e:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <__sflush_r+0x108>)
 8005290:	40ca      	lsrs	r2, r1
 8005292:	07d6      	lsls	r6, r2, #31
 8005294:	d528      	bpl.n	80052e8 <__sflush_r+0xb8>
 8005296:	2200      	movs	r2, #0
 8005298:	6062      	str	r2, [r4, #4]
 800529a:	04d9      	lsls	r1, r3, #19
 800529c:	6922      	ldr	r2, [r4, #16]
 800529e:	6022      	str	r2, [r4, #0]
 80052a0:	d504      	bpl.n	80052ac <__sflush_r+0x7c>
 80052a2:	1c42      	adds	r2, r0, #1
 80052a4:	d101      	bne.n	80052aa <__sflush_r+0x7a>
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	b903      	cbnz	r3, 80052ac <__sflush_r+0x7c>
 80052aa:	6560      	str	r0, [r4, #84]	; 0x54
 80052ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ae:	602f      	str	r7, [r5, #0]
 80052b0:	2900      	cmp	r1, #0
 80052b2:	d0ca      	beq.n	800524a <__sflush_r+0x1a>
 80052b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052b8:	4299      	cmp	r1, r3
 80052ba:	d002      	beq.n	80052c2 <__sflush_r+0x92>
 80052bc:	4628      	mov	r0, r5
 80052be:	f7ff fb11 	bl	80048e4 <_free_r>
 80052c2:	2000      	movs	r0, #0
 80052c4:	6360      	str	r0, [r4, #52]	; 0x34
 80052c6:	e7c1      	b.n	800524c <__sflush_r+0x1c>
 80052c8:	6a21      	ldr	r1, [r4, #32]
 80052ca:	2301      	movs	r3, #1
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b0      	blx	r6
 80052d0:	1c41      	adds	r1, r0, #1
 80052d2:	d1c7      	bne.n	8005264 <__sflush_r+0x34>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0c4      	beq.n	8005264 <__sflush_r+0x34>
 80052da:	2b1d      	cmp	r3, #29
 80052dc:	d001      	beq.n	80052e2 <__sflush_r+0xb2>
 80052de:	2b16      	cmp	r3, #22
 80052e0:	d101      	bne.n	80052e6 <__sflush_r+0xb6>
 80052e2:	602f      	str	r7, [r5, #0]
 80052e4:	e7b1      	b.n	800524a <__sflush_r+0x1a>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	e7ad      	b.n	800524c <__sflush_r+0x1c>
 80052f0:	690f      	ldr	r7, [r1, #16]
 80052f2:	2f00      	cmp	r7, #0
 80052f4:	d0a9      	beq.n	800524a <__sflush_r+0x1a>
 80052f6:	0793      	lsls	r3, r2, #30
 80052f8:	680e      	ldr	r6, [r1, #0]
 80052fa:	bf08      	it	eq
 80052fc:	694b      	ldreq	r3, [r1, #20]
 80052fe:	600f      	str	r7, [r1, #0]
 8005300:	bf18      	it	ne
 8005302:	2300      	movne	r3, #0
 8005304:	eba6 0807 	sub.w	r8, r6, r7
 8005308:	608b      	str	r3, [r1, #8]
 800530a:	f1b8 0f00 	cmp.w	r8, #0
 800530e:	dd9c      	ble.n	800524a <__sflush_r+0x1a>
 8005310:	6a21      	ldr	r1, [r4, #32]
 8005312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005314:	4643      	mov	r3, r8
 8005316:	463a      	mov	r2, r7
 8005318:	4628      	mov	r0, r5
 800531a:	47b0      	blx	r6
 800531c:	2800      	cmp	r0, #0
 800531e:	dc06      	bgt.n	800532e <__sflush_r+0xfe>
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005326:	81a3      	strh	r3, [r4, #12]
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	e78e      	b.n	800524c <__sflush_r+0x1c>
 800532e:	4407      	add	r7, r0
 8005330:	eba8 0800 	sub.w	r8, r8, r0
 8005334:	e7e9      	b.n	800530a <__sflush_r+0xda>
 8005336:	bf00      	nop
 8005338:	20400001 	.word	0x20400001

0800533c <_fflush_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	690b      	ldr	r3, [r1, #16]
 8005340:	4605      	mov	r5, r0
 8005342:	460c      	mov	r4, r1
 8005344:	b913      	cbnz	r3, 800534c <_fflush_r+0x10>
 8005346:	2500      	movs	r5, #0
 8005348:	4628      	mov	r0, r5
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	b118      	cbz	r0, 8005356 <_fflush_r+0x1a>
 800534e:	6983      	ldr	r3, [r0, #24]
 8005350:	b90b      	cbnz	r3, 8005356 <_fflush_r+0x1a>
 8005352:	f000 f887 	bl	8005464 <__sinit>
 8005356:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <_fflush_r+0x6c>)
 8005358:	429c      	cmp	r4, r3
 800535a:	d11b      	bne.n	8005394 <_fflush_r+0x58>
 800535c:	686c      	ldr	r4, [r5, #4]
 800535e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0ef      	beq.n	8005346 <_fflush_r+0xa>
 8005366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005368:	07d0      	lsls	r0, r2, #31
 800536a:	d404      	bmi.n	8005376 <_fflush_r+0x3a>
 800536c:	0599      	lsls	r1, r3, #22
 800536e:	d402      	bmi.n	8005376 <_fflush_r+0x3a>
 8005370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005372:	f000 f915 	bl	80055a0 <__retarget_lock_acquire_recursive>
 8005376:	4628      	mov	r0, r5
 8005378:	4621      	mov	r1, r4
 800537a:	f7ff ff59 	bl	8005230 <__sflush_r>
 800537e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005380:	07da      	lsls	r2, r3, #31
 8005382:	4605      	mov	r5, r0
 8005384:	d4e0      	bmi.n	8005348 <_fflush_r+0xc>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	059b      	lsls	r3, r3, #22
 800538a:	d4dd      	bmi.n	8005348 <_fflush_r+0xc>
 800538c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800538e:	f000 f908 	bl	80055a2 <__retarget_lock_release_recursive>
 8005392:	e7d9      	b.n	8005348 <_fflush_r+0xc>
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <_fflush_r+0x70>)
 8005396:	429c      	cmp	r4, r3
 8005398:	d101      	bne.n	800539e <_fflush_r+0x62>
 800539a:	68ac      	ldr	r4, [r5, #8]
 800539c:	e7df      	b.n	800535e <_fflush_r+0x22>
 800539e:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <_fflush_r+0x74>)
 80053a0:	429c      	cmp	r4, r3
 80053a2:	bf08      	it	eq
 80053a4:	68ec      	ldreq	r4, [r5, #12]
 80053a6:	e7da      	b.n	800535e <_fflush_r+0x22>
 80053a8:	08005d94 	.word	0x08005d94
 80053ac:	08005db4 	.word	0x08005db4
 80053b0:	08005d74 	.word	0x08005d74

080053b4 <std>:
 80053b4:	2300      	movs	r3, #0
 80053b6:	b510      	push	{r4, lr}
 80053b8:	4604      	mov	r4, r0
 80053ba:	e9c0 3300 	strd	r3, r3, [r0]
 80053be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053c2:	6083      	str	r3, [r0, #8]
 80053c4:	8181      	strh	r1, [r0, #12]
 80053c6:	6643      	str	r3, [r0, #100]	; 0x64
 80053c8:	81c2      	strh	r2, [r0, #14]
 80053ca:	6183      	str	r3, [r0, #24]
 80053cc:	4619      	mov	r1, r3
 80053ce:	2208      	movs	r2, #8
 80053d0:	305c      	adds	r0, #92	; 0x5c
 80053d2:	f7ff f9b3 	bl	800473c <memset>
 80053d6:	4b05      	ldr	r3, [pc, #20]	; (80053ec <std+0x38>)
 80053d8:	6263      	str	r3, [r4, #36]	; 0x24
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <std+0x3c>)
 80053dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <std+0x40>)
 80053e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <std+0x44>)
 80053e4:	6224      	str	r4, [r4, #32]
 80053e6:	6323      	str	r3, [r4, #48]	; 0x30
 80053e8:	bd10      	pop	{r4, pc}
 80053ea:	bf00      	nop
 80053ec:	08005711 	.word	0x08005711
 80053f0:	08005733 	.word	0x08005733
 80053f4:	0800576b 	.word	0x0800576b
 80053f8:	0800578f 	.word	0x0800578f

080053fc <_cleanup_r>:
 80053fc:	4901      	ldr	r1, [pc, #4]	; (8005404 <_cleanup_r+0x8>)
 80053fe:	f000 b8af 	b.w	8005560 <_fwalk_reent>
 8005402:	bf00      	nop
 8005404:	0800533d 	.word	0x0800533d

08005408 <__sfmoreglue>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	2268      	movs	r2, #104	; 0x68
 800540c:	1e4d      	subs	r5, r1, #1
 800540e:	4355      	muls	r5, r2
 8005410:	460e      	mov	r6, r1
 8005412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005416:	f7ff fad1 	bl	80049bc <_malloc_r>
 800541a:	4604      	mov	r4, r0
 800541c:	b140      	cbz	r0, 8005430 <__sfmoreglue+0x28>
 800541e:	2100      	movs	r1, #0
 8005420:	e9c0 1600 	strd	r1, r6, [r0]
 8005424:	300c      	adds	r0, #12
 8005426:	60a0      	str	r0, [r4, #8]
 8005428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800542c:	f7ff f986 	bl	800473c <memset>
 8005430:	4620      	mov	r0, r4
 8005432:	bd70      	pop	{r4, r5, r6, pc}

08005434 <__sfp_lock_acquire>:
 8005434:	4801      	ldr	r0, [pc, #4]	; (800543c <__sfp_lock_acquire+0x8>)
 8005436:	f000 b8b3 	b.w	80055a0 <__retarget_lock_acquire_recursive>
 800543a:	bf00      	nop
 800543c:	200065d1 	.word	0x200065d1

08005440 <__sfp_lock_release>:
 8005440:	4801      	ldr	r0, [pc, #4]	; (8005448 <__sfp_lock_release+0x8>)
 8005442:	f000 b8ae 	b.w	80055a2 <__retarget_lock_release_recursive>
 8005446:	bf00      	nop
 8005448:	200065d1 	.word	0x200065d1

0800544c <__sinit_lock_acquire>:
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <__sinit_lock_acquire+0x8>)
 800544e:	f000 b8a7 	b.w	80055a0 <__retarget_lock_acquire_recursive>
 8005452:	bf00      	nop
 8005454:	200065d2 	.word	0x200065d2

08005458 <__sinit_lock_release>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__sinit_lock_release+0x8>)
 800545a:	f000 b8a2 	b.w	80055a2 <__retarget_lock_release_recursive>
 800545e:	bf00      	nop
 8005460:	200065d2 	.word	0x200065d2

08005464 <__sinit>:
 8005464:	b510      	push	{r4, lr}
 8005466:	4604      	mov	r4, r0
 8005468:	f7ff fff0 	bl	800544c <__sinit_lock_acquire>
 800546c:	69a3      	ldr	r3, [r4, #24]
 800546e:	b11b      	cbz	r3, 8005478 <__sinit+0x14>
 8005470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005474:	f7ff bff0 	b.w	8005458 <__sinit_lock_release>
 8005478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800547c:	6523      	str	r3, [r4, #80]	; 0x50
 800547e:	4b13      	ldr	r3, [pc, #76]	; (80054cc <__sinit+0x68>)
 8005480:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <__sinit+0x6c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	62a2      	str	r2, [r4, #40]	; 0x28
 8005486:	42a3      	cmp	r3, r4
 8005488:	bf04      	itt	eq
 800548a:	2301      	moveq	r3, #1
 800548c:	61a3      	streq	r3, [r4, #24]
 800548e:	4620      	mov	r0, r4
 8005490:	f000 f820 	bl	80054d4 <__sfp>
 8005494:	6060      	str	r0, [r4, #4]
 8005496:	4620      	mov	r0, r4
 8005498:	f000 f81c 	bl	80054d4 <__sfp>
 800549c:	60a0      	str	r0, [r4, #8]
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 f818 	bl	80054d4 <__sfp>
 80054a4:	2200      	movs	r2, #0
 80054a6:	60e0      	str	r0, [r4, #12]
 80054a8:	2104      	movs	r1, #4
 80054aa:	6860      	ldr	r0, [r4, #4]
 80054ac:	f7ff ff82 	bl	80053b4 <std>
 80054b0:	68a0      	ldr	r0, [r4, #8]
 80054b2:	2201      	movs	r2, #1
 80054b4:	2109      	movs	r1, #9
 80054b6:	f7ff ff7d 	bl	80053b4 <std>
 80054ba:	68e0      	ldr	r0, [r4, #12]
 80054bc:	2202      	movs	r2, #2
 80054be:	2112      	movs	r1, #18
 80054c0:	f7ff ff78 	bl	80053b4 <std>
 80054c4:	2301      	movs	r3, #1
 80054c6:	61a3      	str	r3, [r4, #24]
 80054c8:	e7d2      	b.n	8005470 <__sinit+0xc>
 80054ca:	bf00      	nop
 80054cc:	08005c8c 	.word	0x08005c8c
 80054d0:	080053fd 	.word	0x080053fd

080054d4 <__sfp>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	4607      	mov	r7, r0
 80054d8:	f7ff ffac 	bl	8005434 <__sfp_lock_acquire>
 80054dc:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <__sfp+0x84>)
 80054de:	681e      	ldr	r6, [r3, #0]
 80054e0:	69b3      	ldr	r3, [r6, #24]
 80054e2:	b913      	cbnz	r3, 80054ea <__sfp+0x16>
 80054e4:	4630      	mov	r0, r6
 80054e6:	f7ff ffbd 	bl	8005464 <__sinit>
 80054ea:	3648      	adds	r6, #72	; 0x48
 80054ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	d503      	bpl.n	80054fc <__sfp+0x28>
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	b30b      	cbz	r3, 800553c <__sfp+0x68>
 80054f8:	6836      	ldr	r6, [r6, #0]
 80054fa:	e7f7      	b.n	80054ec <__sfp+0x18>
 80054fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005500:	b9d5      	cbnz	r5, 8005538 <__sfp+0x64>
 8005502:	4b16      	ldr	r3, [pc, #88]	; (800555c <__sfp+0x88>)
 8005504:	60e3      	str	r3, [r4, #12]
 8005506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800550a:	6665      	str	r5, [r4, #100]	; 0x64
 800550c:	f000 f847 	bl	800559e <__retarget_lock_init_recursive>
 8005510:	f7ff ff96 	bl	8005440 <__sfp_lock_release>
 8005514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800551c:	6025      	str	r5, [r4, #0]
 800551e:	61a5      	str	r5, [r4, #24]
 8005520:	2208      	movs	r2, #8
 8005522:	4629      	mov	r1, r5
 8005524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005528:	f7ff f908 	bl	800473c <memset>
 800552c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005534:	4620      	mov	r0, r4
 8005536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005538:	3468      	adds	r4, #104	; 0x68
 800553a:	e7d9      	b.n	80054f0 <__sfp+0x1c>
 800553c:	2104      	movs	r1, #4
 800553e:	4638      	mov	r0, r7
 8005540:	f7ff ff62 	bl	8005408 <__sfmoreglue>
 8005544:	4604      	mov	r4, r0
 8005546:	6030      	str	r0, [r6, #0]
 8005548:	2800      	cmp	r0, #0
 800554a:	d1d5      	bne.n	80054f8 <__sfp+0x24>
 800554c:	f7ff ff78 	bl	8005440 <__sfp_lock_release>
 8005550:	230c      	movs	r3, #12
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	e7ee      	b.n	8005534 <__sfp+0x60>
 8005556:	bf00      	nop
 8005558:	08005c8c 	.word	0x08005c8c
 800555c:	ffff0001 	.word	0xffff0001

08005560 <_fwalk_reent>:
 8005560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005564:	4606      	mov	r6, r0
 8005566:	4688      	mov	r8, r1
 8005568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800556c:	2700      	movs	r7, #0
 800556e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005572:	f1b9 0901 	subs.w	r9, r9, #1
 8005576:	d505      	bpl.n	8005584 <_fwalk_reent+0x24>
 8005578:	6824      	ldr	r4, [r4, #0]
 800557a:	2c00      	cmp	r4, #0
 800557c:	d1f7      	bne.n	800556e <_fwalk_reent+0xe>
 800557e:	4638      	mov	r0, r7
 8005580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005584:	89ab      	ldrh	r3, [r5, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d907      	bls.n	800559a <_fwalk_reent+0x3a>
 800558a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800558e:	3301      	adds	r3, #1
 8005590:	d003      	beq.n	800559a <_fwalk_reent+0x3a>
 8005592:	4629      	mov	r1, r5
 8005594:	4630      	mov	r0, r6
 8005596:	47c0      	blx	r8
 8005598:	4307      	orrs	r7, r0
 800559a:	3568      	adds	r5, #104	; 0x68
 800559c:	e7e9      	b.n	8005572 <_fwalk_reent+0x12>

0800559e <__retarget_lock_init_recursive>:
 800559e:	4770      	bx	lr

080055a0 <__retarget_lock_acquire_recursive>:
 80055a0:	4770      	bx	lr

080055a2 <__retarget_lock_release_recursive>:
 80055a2:	4770      	bx	lr

080055a4 <__swhatbuf_r>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	460e      	mov	r6, r1
 80055a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ac:	2900      	cmp	r1, #0
 80055ae:	b096      	sub	sp, #88	; 0x58
 80055b0:	4614      	mov	r4, r2
 80055b2:	461d      	mov	r5, r3
 80055b4:	da08      	bge.n	80055c8 <__swhatbuf_r+0x24>
 80055b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	602a      	str	r2, [r5, #0]
 80055be:	061a      	lsls	r2, r3, #24
 80055c0:	d410      	bmi.n	80055e4 <__swhatbuf_r+0x40>
 80055c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c6:	e00e      	b.n	80055e6 <__swhatbuf_r+0x42>
 80055c8:	466a      	mov	r2, sp
 80055ca:	f000 f907 	bl	80057dc <_fstat_r>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	dbf1      	blt.n	80055b6 <__swhatbuf_r+0x12>
 80055d2:	9a01      	ldr	r2, [sp, #4]
 80055d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055dc:	425a      	negs	r2, r3
 80055de:	415a      	adcs	r2, r3
 80055e0:	602a      	str	r2, [r5, #0]
 80055e2:	e7ee      	b.n	80055c2 <__swhatbuf_r+0x1e>
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	2000      	movs	r0, #0
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	b016      	add	sp, #88	; 0x58
 80055ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080055f0 <__smakebuf_r>:
 80055f0:	898b      	ldrh	r3, [r1, #12]
 80055f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055f4:	079d      	lsls	r5, r3, #30
 80055f6:	4606      	mov	r6, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	d507      	bpl.n	800560c <__smakebuf_r+0x1c>
 80055fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	6123      	str	r3, [r4, #16]
 8005604:	2301      	movs	r3, #1
 8005606:	6163      	str	r3, [r4, #20]
 8005608:	b002      	add	sp, #8
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	ab01      	add	r3, sp, #4
 800560e:	466a      	mov	r2, sp
 8005610:	f7ff ffc8 	bl	80055a4 <__swhatbuf_r>
 8005614:	9900      	ldr	r1, [sp, #0]
 8005616:	4605      	mov	r5, r0
 8005618:	4630      	mov	r0, r6
 800561a:	f7ff f9cf 	bl	80049bc <_malloc_r>
 800561e:	b948      	cbnz	r0, 8005634 <__smakebuf_r+0x44>
 8005620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005624:	059a      	lsls	r2, r3, #22
 8005626:	d4ef      	bmi.n	8005608 <__smakebuf_r+0x18>
 8005628:	f023 0303 	bic.w	r3, r3, #3
 800562c:	f043 0302 	orr.w	r3, r3, #2
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	e7e3      	b.n	80055fc <__smakebuf_r+0xc>
 8005634:	4b0d      	ldr	r3, [pc, #52]	; (800566c <__smakebuf_r+0x7c>)
 8005636:	62b3      	str	r3, [r6, #40]	; 0x28
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	6020      	str	r0, [r4, #0]
 800563c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	9b00      	ldr	r3, [sp, #0]
 8005644:	6163      	str	r3, [r4, #20]
 8005646:	9b01      	ldr	r3, [sp, #4]
 8005648:	6120      	str	r0, [r4, #16]
 800564a:	b15b      	cbz	r3, 8005664 <__smakebuf_r+0x74>
 800564c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005650:	4630      	mov	r0, r6
 8005652:	f000 f8d5 	bl	8005800 <_isatty_r>
 8005656:	b128      	cbz	r0, 8005664 <__smakebuf_r+0x74>
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	89a0      	ldrh	r0, [r4, #12]
 8005666:	4305      	orrs	r5, r0
 8005668:	81a5      	strh	r5, [r4, #12]
 800566a:	e7cd      	b.n	8005608 <__smakebuf_r+0x18>
 800566c:	080053fd 	.word	0x080053fd

08005670 <__malloc_lock>:
 8005670:	4801      	ldr	r0, [pc, #4]	; (8005678 <__malloc_lock+0x8>)
 8005672:	f7ff bf95 	b.w	80055a0 <__retarget_lock_acquire_recursive>
 8005676:	bf00      	nop
 8005678:	200065d0 	.word	0x200065d0

0800567c <__malloc_unlock>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__malloc_unlock+0x8>)
 800567e:	f7ff bf90 	b.w	80055a2 <__retarget_lock_release_recursive>
 8005682:	bf00      	nop
 8005684:	200065d0 	.word	0x200065d0

08005688 <_raise_r>:
 8005688:	291f      	cmp	r1, #31
 800568a:	b538      	push	{r3, r4, r5, lr}
 800568c:	4604      	mov	r4, r0
 800568e:	460d      	mov	r5, r1
 8005690:	d904      	bls.n	800569c <_raise_r+0x14>
 8005692:	2316      	movs	r3, #22
 8005694:	6003      	str	r3, [r0, #0]
 8005696:	f04f 30ff 	mov.w	r0, #4294967295
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800569e:	b112      	cbz	r2, 80056a6 <_raise_r+0x1e>
 80056a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80056a4:	b94b      	cbnz	r3, 80056ba <_raise_r+0x32>
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 f830 	bl	800570c <_getpid_r>
 80056ac:	462a      	mov	r2, r5
 80056ae:	4601      	mov	r1, r0
 80056b0:	4620      	mov	r0, r4
 80056b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056b6:	f000 b817 	b.w	80056e8 <_kill_r>
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d00a      	beq.n	80056d4 <_raise_r+0x4c>
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	d103      	bne.n	80056ca <_raise_r+0x42>
 80056c2:	2316      	movs	r3, #22
 80056c4:	6003      	str	r3, [r0, #0]
 80056c6:	2001      	movs	r0, #1
 80056c8:	e7e7      	b.n	800569a <_raise_r+0x12>
 80056ca:	2400      	movs	r4, #0
 80056cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80056d0:	4628      	mov	r0, r5
 80056d2:	4798      	blx	r3
 80056d4:	2000      	movs	r0, #0
 80056d6:	e7e0      	b.n	800569a <_raise_r+0x12>

080056d8 <raise>:
 80056d8:	4b02      	ldr	r3, [pc, #8]	; (80056e4 <raise+0xc>)
 80056da:	4601      	mov	r1, r0
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	f7ff bfd3 	b.w	8005688 <_raise_r>
 80056e2:	bf00      	nop
 80056e4:	200000a0 	.word	0x200000a0

080056e8 <_kill_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d07      	ldr	r5, [pc, #28]	; (8005708 <_kill_r+0x20>)
 80056ec:	2300      	movs	r3, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	602b      	str	r3, [r5, #0]
 80056f6:	f7fc f9fd 	bl	8001af4 <_kill>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	d102      	bne.n	8005704 <_kill_r+0x1c>
 80056fe:	682b      	ldr	r3, [r5, #0]
 8005700:	b103      	cbz	r3, 8005704 <_kill_r+0x1c>
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	bd38      	pop	{r3, r4, r5, pc}
 8005706:	bf00      	nop
 8005708:	200065d4 	.word	0x200065d4

0800570c <_getpid_r>:
 800570c:	f7fc b9ea 	b.w	8001ae4 <_getpid>

08005710 <__sread>:
 8005710:	b510      	push	{r4, lr}
 8005712:	460c      	mov	r4, r1
 8005714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005718:	f000 f894 	bl	8005844 <_read_r>
 800571c:	2800      	cmp	r0, #0
 800571e:	bfab      	itete	ge
 8005720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005722:	89a3      	ldrhlt	r3, [r4, #12]
 8005724:	181b      	addge	r3, r3, r0
 8005726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800572a:	bfac      	ite	ge
 800572c:	6563      	strge	r3, [r4, #84]	; 0x54
 800572e:	81a3      	strhlt	r3, [r4, #12]
 8005730:	bd10      	pop	{r4, pc}

08005732 <__swrite>:
 8005732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	461f      	mov	r7, r3
 8005738:	898b      	ldrh	r3, [r1, #12]
 800573a:	05db      	lsls	r3, r3, #23
 800573c:	4605      	mov	r5, r0
 800573e:	460c      	mov	r4, r1
 8005740:	4616      	mov	r6, r2
 8005742:	d505      	bpl.n	8005750 <__swrite+0x1e>
 8005744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005748:	2302      	movs	r3, #2
 800574a:	2200      	movs	r2, #0
 800574c:	f000 f868 	bl	8005820 <_lseek_r>
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	4632      	mov	r2, r6
 800575e:	463b      	mov	r3, r7
 8005760:	4628      	mov	r0, r5
 8005762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005766:	f000 b817 	b.w	8005798 <_write_r>

0800576a <__sseek>:
 800576a:	b510      	push	{r4, lr}
 800576c:	460c      	mov	r4, r1
 800576e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005772:	f000 f855 	bl	8005820 <_lseek_r>
 8005776:	1c43      	adds	r3, r0, #1
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	bf15      	itete	ne
 800577c:	6560      	strne	r0, [r4, #84]	; 0x54
 800577e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005786:	81a3      	strheq	r3, [r4, #12]
 8005788:	bf18      	it	ne
 800578a:	81a3      	strhne	r3, [r4, #12]
 800578c:	bd10      	pop	{r4, pc}

0800578e <__sclose>:
 800578e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005792:	f000 b813 	b.w	80057bc <_close_r>
	...

08005798 <_write_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d07      	ldr	r5, [pc, #28]	; (80057b8 <_write_r+0x20>)
 800579c:	4604      	mov	r4, r0
 800579e:	4608      	mov	r0, r1
 80057a0:	4611      	mov	r1, r2
 80057a2:	2200      	movs	r2, #0
 80057a4:	602a      	str	r2, [r5, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f7fc f9db 	bl	8001b62 <_write>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_write_r+0x1e>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_write_r+0x1e>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	200065d4 	.word	0x200065d4

080057bc <_close_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4d06      	ldr	r5, [pc, #24]	; (80057d8 <_close_r+0x1c>)
 80057c0:	2300      	movs	r3, #0
 80057c2:	4604      	mov	r4, r0
 80057c4:	4608      	mov	r0, r1
 80057c6:	602b      	str	r3, [r5, #0]
 80057c8:	f7fc f9e7 	bl	8001b9a <_close>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_close_r+0x1a>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_close_r+0x1a>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	200065d4 	.word	0x200065d4

080057dc <_fstat_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4d07      	ldr	r5, [pc, #28]	; (80057fc <_fstat_r+0x20>)
 80057e0:	2300      	movs	r3, #0
 80057e2:	4604      	mov	r4, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	f7fc f9e2 	bl	8001bb2 <_fstat>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	d102      	bne.n	80057f8 <_fstat_r+0x1c>
 80057f2:	682b      	ldr	r3, [r5, #0]
 80057f4:	b103      	cbz	r3, 80057f8 <_fstat_r+0x1c>
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	bd38      	pop	{r3, r4, r5, pc}
 80057fa:	bf00      	nop
 80057fc:	200065d4 	.word	0x200065d4

08005800 <_isatty_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4d06      	ldr	r5, [pc, #24]	; (800581c <_isatty_r+0x1c>)
 8005804:	2300      	movs	r3, #0
 8005806:	4604      	mov	r4, r0
 8005808:	4608      	mov	r0, r1
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	f7fc f9e1 	bl	8001bd2 <_isatty>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_isatty_r+0x1a>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_isatty_r+0x1a>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	200065d4 	.word	0x200065d4

08005820 <_lseek_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d07      	ldr	r5, [pc, #28]	; (8005840 <_lseek_r+0x20>)
 8005824:	4604      	mov	r4, r0
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	2200      	movs	r2, #0
 800582c:	602a      	str	r2, [r5, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f7fc f9da 	bl	8001be8 <_lseek>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_lseek_r+0x1e>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_lseek_r+0x1e>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	200065d4 	.word	0x200065d4

08005844 <_read_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4d07      	ldr	r5, [pc, #28]	; (8005864 <_read_r+0x20>)
 8005848:	4604      	mov	r4, r0
 800584a:	4608      	mov	r0, r1
 800584c:	4611      	mov	r1, r2
 800584e:	2200      	movs	r2, #0
 8005850:	602a      	str	r2, [r5, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	f7fc f968 	bl	8001b28 <_read>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d102      	bne.n	8005862 <_read_r+0x1e>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	b103      	cbz	r3, 8005862 <_read_r+0x1e>
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	200065d4 	.word	0x200065d4

08005868 <_init>:
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586a:	bf00      	nop
 800586c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586e:	bc08      	pop	{r3}
 8005870:	469e      	mov	lr, r3
 8005872:	4770      	bx	lr

08005874 <_fini>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	bf00      	nop
 8005878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587a:	bc08      	pop	{r3}
 800587c:	469e      	mov	lr, r3
 800587e:	4770      	bx	lr
