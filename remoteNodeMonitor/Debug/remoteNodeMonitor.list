
remoteNodeMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c48  08006c48  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c50  08006c50  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08006c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064d8  20000104  08006d5c  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200065dc  08006d5c  000265dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b97b  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002016  00000000  00000000  0002baaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002dac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002e470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a34  00000000  00000000  0002ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3af  00000000  00000000  00051794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caaa2  00000000  00000000  0005eb43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001295e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  00129638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000104 	.word	0x20000104
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080064ac 	.word	0x080064ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000108 	.word	0x20000108
 800020c:	080064ac 	.word	0x080064ac

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <App_Init>:
* Description: 	Initializes application and resets all GPIO pins
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void App_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    //resets all nodes
    HAL_GPIO_WritePin(DEV2_4_MUX_INH ,GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	4849      	ldr	r0, [pc, #292]	; (8000714 <App_Init+0x130>)
 80005ee:	f002 ff95 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_3_LTCH_EN ,GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4847      	ldr	r0, [pc, #284]	; (8000714 <App_Init+0x130>)
 80005f8:	f002 ff90 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_3_SEN_PWR ,GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000602:	4844      	ldr	r0, [pc, #272]	; (8000714 <App_Init+0x130>)
 8000604:	f002 ff8a 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_4_LTCH_EN ,GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060e:	4841      	ldr	r0, [pc, #260]	; (8000714 <App_Init+0x130>)
 8000610:	f002 ff84 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_4_SEN_PWR ,GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2101      	movs	r1, #1
 8000618:	483f      	ldr	r0, [pc, #252]	; (8000718 <App_Init+0x134>)
 800061a:	f002 ff7f 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_PWR_EN ,GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2110      	movs	r1, #16
 8000622:	483d      	ldr	r0, [pc, #244]	; (8000718 <App_Init+0x134>)
 8000624:	f002 ff7a 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV4_PWR_EN ,GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2120      	movs	r1, #32
 800062c:	483a      	ldr	r0, [pc, #232]	; (8000718 <App_Init+0x134>)
 800062e:	f002 ff75 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_UPDI_EN ,GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4838      	ldr	r0, [pc, #224]	; (8000718 <App_Init+0x134>)
 8000638:	f002 ff70 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV4_UPDI_EN ,GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	4835      	ldr	r0, [pc, #212]	; (8000718 <App_Init+0x134>)
 8000642:	f002 ff6b 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_4_UART_RX_EN ,GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	4832      	ldr	r0, [pc, #200]	; (8000718 <App_Init+0x134>)
 800064e:	f002 ff65 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_CHG_EN ,GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	482f      	ldr	r0, [pc, #188]	; (8000718 <App_Init+0x134>)
 800065a:	f002 ff5f 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_4_VCC_EN ,GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	482c      	ldr	r0, [pc, #176]	; (8000718 <App_Init+0x134>)
 8000666:	f002 ff59 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_4_SEL_C ,GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4829      	ldr	r0, [pc, #164]	; (8000718 <App_Init+0x134>)
 8000672:	f002 ff53 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_4_SEL_B ,GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067c:	4826      	ldr	r0, [pc, #152]	; (8000718 <App_Init+0x134>)
 800067e:	f002 ff4d 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_3_SEL_A ,GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	4825      	ldr	r0, [pc, #148]	; (800071c <App_Init+0x138>)
 8000688:	f002 ff48 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_3_SEL_B ,GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2102      	movs	r1, #2
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <App_Init+0x138>)
 8000692:	f002 ff43 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_3_SEL_C ,GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2104      	movs	r1, #4
 800069a:	4820      	ldr	r0, [pc, #128]	; (800071c <App_Init+0x138>)
 800069c:	f002 ff3e 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_3_MUX_INH ,GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2108      	movs	r1, #8
 80006a4:	481d      	ldr	r0, [pc, #116]	; (800071c <App_Init+0x138>)
 80006a6:	f002 ff39 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV2_4_SEL_A ,GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2110      	movs	r1, #16
 80006ae:	481b      	ldr	r0, [pc, #108]	; (800071c <App_Init+0x138>)
 80006b0:	f002 ff34 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_PWR_EN ,GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2140      	movs	r1, #64	; 0x40
 80006b8:	4818      	ldr	r0, [pc, #96]	; (800071c <App_Init+0x138>)
 80006ba:	f002 ff2f 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV3_PWR_EN ,GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <App_Init+0x138>)
 80006c4:	f002 ff2a 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_UPDI_EN ,GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <App_Init+0x138>)
 80006d0:	f002 ff24 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV3_UPDI_EN ,GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <App_Init+0x138>)
 80006dc:	f002 ff1e 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_3_UART_RX_EN ,GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <App_Init+0x138>)
 80006e8:	f002 ff18 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_CHG_EN ,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <App_Init+0x138>)
 80006f4:	f002 ff12 	bl	800351c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DEV1_3_VCC_EN ,GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <App_Init+0x138>)
 8000700:	f002 ff0c 	bl	800351c <HAL_GPIO_WritePin>

    Power_Dev_ON(BOTH);
 8000704:	2030      	movs	r0, #48	; 0x30
 8000706:	f001 fa91 	bl	8001c2c <Power_Dev_ON>
    Sensor_Select_App();
 800070a:	f001 fc13 	bl	8001f34 <Sensor_Select_App>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40020000 	.word	0x40020000
 8000718:	40020400 	.word	0x40020400
 800071c:	40020800 	.word	0x40020800

08000720 <App_Update>:
* Description: 	Updates state of the application.
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void App_Update(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)Get_Application_State(), sizeof(Get_Application_State()), 500);
 8000724:	f000 fa0a 	bl	8000b3c <Get_Application_State>
 8000728:	4603      	mov	r3, r0
 800072a:	4619      	mov	r1, r3
 800072c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000730:	2201      	movs	r2, #1
 8000732:	4823      	ldr	r0, [pc, #140]	; (80007c0 <App_Update+0xa0>)
 8000734:	f003 fd41 	bl	80041ba <HAL_UART_Transmit>
	switch(Get_Application_State())
 8000738:	f000 fa00 	bl	8000b3c <Get_Application_State>
 800073c:	4603      	mov	r3, r0
 800073e:	2b0a      	cmp	r3, #10
 8000740:	d83c      	bhi.n	80007bc <App_Update+0x9c>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <App_Update+0x28>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	080007ab 	.word	0x080007ab
 800074c:	080007bd 	.word	0x080007bd
 8000750:	08000775 	.word	0x08000775
 8000754:	0800077b 	.word	0x0800077b
 8000758:	08000781 	.word	0x08000781
 800075c:	08000787 	.word	0x08000787
 8000760:	0800078d 	.word	0x0800078d
 8000764:	08000793 	.word	0x08000793
 8000768:	08000799 	.word	0x08000799
 800076c:	0800079f 	.word	0x0800079f
 8000770:	080007a5 	.word	0x080007a5
	{
		case MOLLY_DEV1:
			Dev1_Molly_App();
 8000774:	f000 fc96 	bl	80010a4 <Dev1_Molly_App>
			break;
 8000778:	e020      	b.n	80007bc <App_Update+0x9c>

		case MOLLY_DEV2:
			Dev2_Molly_App();
 800077a:	f000 fe67 	bl	800144c <Dev2_Molly_App>
			break;
 800077e:	e01d      	b.n	80007bc <App_Update+0x9c>

        case PROGRAM_DEV1:
        	Dev1_Program_App();
 8000780:	f001 f88e 	bl	80018a0 <Dev1_Program_App>
			break;
 8000784:	e01a      	b.n	80007bc <App_Update+0x9c>

        case PROGRAM_DEV2:
        	Dev2_Program_App();
 8000786:	f001 f8d3 	bl	8001930 <Dev2_Program_App>
			break;
 800078a:	e017      	b.n	80007bc <App_Update+0x9c>

        case PROGRAM_DEV3:
        	Dev3_Program_App();
 800078c:	f001 f916 	bl	80019bc <Dev3_Program_App>
            break;
 8000790:	e014      	b.n	80007bc <App_Update+0x9c>

        case PROGRAM_DEV4:
        	Dev4_Program_App();
 8000792:	f001 f95b 	bl	8001a4c <Dev4_Program_App>
            break;
 8000796:	e011      	b.n	80007bc <App_Update+0x9c>

        case SEN_SELECT:
            Sensor_Select_App();
 8000798:	f001 fbcc 	bl	8001f34 <Sensor_Select_App>
            break;
 800079c:	e00e      	b.n	80007bc <App_Update+0x9c>

        case SET_CHG_STATE:
            Set_Charger_App();
 800079e:	f001 fc35 	bl	800200c <Set_Charger_App>
            break;
 80007a2:	e00b      	b.n	80007bc <App_Update+0x9c>

        case SET_DEV_PWR:
            Set_Device_Power_App();
 80007a4:	f001 f998 	bl	8001ad8 <Set_Device_Power_App>
            break;
 80007a8:	e008      	b.n	80007bc <App_Update+0x9c>

		case MONITOR:
			Dev1_Check_Flag();
 80007aa:	f001 fc59 	bl	8002060 <Dev1_Check_Flag>
			Dev3_Check_Flag();
 80007ae:	f001 fcb1 	bl	8002114 <Dev3_Check_Flag>
			Dev2_Check_Flag();
 80007b2:	f001 fd09 	bl	80021c8 <Dev2_Check_Flag>
			Dev4_Check_Flag();
 80007b6:	f001 fd61 	bl	800227c <Dev4_Check_Flag>
			break;
 80007ba:	bf00      	nop
	}
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200064fc 	.word	0x200064fc

080007c4 <main>:

/**************************************************************************************************
* Main Program Loop
**************************************************************************************************/
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
   // Initialize the chip
   Chip_Init();
 80007c8:	f000 f808 	bl	80007dc <Chip_Init>

   // Initialize the application
   App_Init();
 80007cc:	f7ff ff0a 	bl	80005e4 <App_Init>

   /* Replace with your application code */
   while (1)
   {
      // call chip level routines that need updating
      Chip_Update();
 80007d0:	f001 fdae 	bl	8002330 <Chip_Update>

      // call application
      App_Update();
 80007d4:	f7ff ffa4 	bl	8000720 <App_Update>
      Chip_Update();
 80007d8:	e7fa      	b.n	80007d0 <main+0xc>
	...

080007dc <Chip_Init>:
* Description: 	This routine sets up the chip
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void Chip_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f002 face 	bl	8002d80 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f001 fdac 	bl	8002340 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f001 fe1e 	bl	8002428 <MX_GPIO_Init>
  MX_USART1_UART_Init();			// RASPBERRY PI
 80007ec:	f002 f83a 	bl	8002864 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007f0:	f002 f862 	bl	80028b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();			// SKYLA2
 80007f4:	f002 f88a 	bl	800290c <MX_USART3_UART_Init>
  MX_UART4_Init();					// CREED1
 80007f8:	f001 ffe0 	bl	80027bc <MX_UART4_Init>
  MX_UART5_Init();					// CREED2
 80007fc:	f002 f808 	bl	8002810 <MX_UART5_Init>
  MX_USART6_UART_Init();			// SKYLA1
 8000800:	f002 f8ae 	bl	8002960 <MX_USART6_UART_Init>

  HAL_UART_Receive_IT(&huart1, &pi_uart_rxData, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	490d      	ldr	r1, [pc, #52]	; (800083c <Chip_Init+0x60>)
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <Chip_Init+0x64>)
 800080a:	f003 fd68 	bl	80042de <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &dev2_uart_rxData, 1);
 800080e:	2201      	movs	r2, #1
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <Chip_Init+0x68>)
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <Chip_Init+0x6c>)
 8000814:	f003 fd63 	bl	80042de <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &dev3_uart_rxData, 1);
 8000818:	2201      	movs	r2, #1
 800081a:	490c      	ldr	r1, [pc, #48]	; (800084c <Chip_Init+0x70>)
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <Chip_Init+0x74>)
 800081e:	f003 fd5e 	bl	80042de <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, &dev4_uart_rxData, 1);
 8000822:	2201      	movs	r2, #1
 8000824:	490b      	ldr	r1, [pc, #44]	; (8000854 <Chip_Init+0x78>)
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <Chip_Init+0x7c>)
 8000828:	f003 fd59 	bl	80042de <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &dev1_uart_rxData, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	490b      	ldr	r1, [pc, #44]	; (800085c <Chip_Init+0x80>)
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <Chip_Init+0x84>)
 8000832:	f003 fd54 	bl	80042de <HAL_UART_Receive_IT>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200014b2 	.word	0x200014b2
 8000840:	200064b8 	.word	0x200064b8
 8000844:	2000509a 	.word	0x2000509a
 8000848:	20006540 	.word	0x20006540
 800084c:	20003d0a 	.word	0x20003d0a
 8000850:	20006430 	.word	0x20006430
 8000854:	2000642a 	.word	0x2000642a
 8000858:	20006474 	.word	0x20006474
 800085c:	20002976 	.word	0x20002976
 8000860:	20006584 	.word	0x20006584

08000864 <HAL_UART_RxCpltCallback>:
* 				stores RX data into buffers.
* Parameters:  	*huart --> the uart that triggered the interrupt
* Returns:     		(none)
******************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a91      	ldr	r2, [pc, #580]	; (8000ab8 <HAL_UART_RxCpltCallback+0x254>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d15b      	bne.n	800092e <HAL_UART_RxCpltCallback+0xca>
	{
		pi_uart_rxBuffer[pi_array_end] = pi_uart_rxData;
 8000876:	4b91      	ldr	r3, [pc, #580]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	4b90      	ldr	r3, [pc, #576]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 800087e:	7819      	ldrb	r1, [r3, #0]
 8000880:	4b90      	ldr	r3, [pc, #576]	; (8000ac4 <HAL_UART_RxCpltCallback+0x260>)
 8000882:	5499      	strb	r1, [r3, r2]
		switch (pi_uart_rxData)	{
 8000884:	4b8e      	ldr	r3, [pc, #568]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	3b63      	subs	r3, #99	; 0x63
 800088a:	2b08      	cmp	r3, #8
 800088c:	d838      	bhi.n	8000900 <HAL_UART_RxCpltCallback+0x9c>
 800088e:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <HAL_UART_RxCpltCallback+0x30>)
 8000890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000894:	080008b9 	.word	0x080008b9
 8000898:	080008c1 	.word	0x080008c1
 800089c:	080008c9 	.word	0x080008c9
 80008a0:	080008d1 	.word	0x080008d1
 80008a4:	080008d9 	.word	0x080008d9
 80008a8:	080008e1 	.word	0x080008e1
 80008ac:	080008e9 	.word	0x080008e9
 80008b0:	080008f1 	.word	0x080008f1
 80008b4:	080008f9 	.word	0x080008f9
			case SETMODE_MOLLY_DEV1:
				application_state = MOLLY_DEV1;
 80008b8:	4b83      	ldr	r3, [pc, #524]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	701a      	strb	r2, [r3, #0]
				break;
 80008be:	e01f      	b.n	8000900 <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_MOLLY_DEV2:
				application_state = MOLLY_DEV2;
 80008c0:	4b81      	ldr	r3, [pc, #516]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	701a      	strb	r2, [r3, #0]
				break;
 80008c6:	e01b      	b.n	8000900 <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_PROGRAM_DEV1:
				application_state = PROGRAM_DEV1;
 80008c8:	4b7f      	ldr	r3, [pc, #508]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	701a      	strb	r2, [r3, #0]
				break;
 80008ce:	e017      	b.n	8000900 <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_PROGRAM_DEV2:
				application_state = PROGRAM_DEV2;
 80008d0:	4b7d      	ldr	r3, [pc, #500]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008d2:	2205      	movs	r2, #5
 80008d4:	701a      	strb	r2, [r3, #0]
				break;
 80008d6:	e013      	b.n	8000900 <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_PROGRAM_DEV3:
				application_state = PROGRAM_DEV3;
 80008d8:	4b7b      	ldr	r3, [pc, #492]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008da:	2206      	movs	r2, #6
 80008dc:	701a      	strb	r2, [r3, #0]
				break;
 80008de:	e00f      	b.n	8000900 <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_PROGRAM_DEV4:
				application_state = PROGRAM_DEV4;
 80008e0:	4b79      	ldr	r3, [pc, #484]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008e2:	2207      	movs	r2, #7
 80008e4:	701a      	strb	r2, [r3, #0]
				break;
 80008e6:	e00b      	b.n	8000900 <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_SENS_SELECT:
				application_state = SEN_SELECT;
 80008e8:	4b77      	ldr	r3, [pc, #476]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	701a      	strb	r2, [r3, #0]
				break;
 80008ee:	e007      	b.n	8000900 <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_SET_CHG_STATE:
				application_state = SET_CHG_STATE;
 80008f0:	4b75      	ldr	r3, [pc, #468]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008f2:	2209      	movs	r2, #9
 80008f4:	701a      	strb	r2, [r3, #0]
				break;
 80008f6:	e003      	b.n	8000900 <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_SET_DEV_PWR:
				application_state = SET_DEV_PWR;
 80008f8:	4b73      	ldr	r3, [pc, #460]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008fa:	220a      	movs	r2, #10
 80008fc:	701a      	strb	r2, [r3, #0]
				break;
 80008fe:	bf00      	nop
		}
		pi_array_end = (pi_array_end+1)%pi_buffer_size;
 8000900:	4b6e      	ldr	r3, [pc, #440]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	4a71      	ldr	r2, [pc, #452]	; (8000acc <HAL_UART_RxCpltCallback+0x268>)
 8000908:	fb82 1203 	smull	r1, r2, r2, r3
 800090c:	12d1      	asrs	r1, r2, #11
 800090e:	17da      	asrs	r2, r3, #31
 8000910:	1a8a      	subs	r2, r1, r2
 8000912:	f241 3188 	movw	r1, #5000	; 0x1388
 8000916:	fb01 f202 	mul.w	r2, r1, r2
 800091a:	1a9a      	subs	r2, r3, r2
 800091c:	b292      	uxth	r2, r2
 800091e:	4b67      	ldr	r3, [pc, #412]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000920:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &pi_uart_rxData, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	4966      	ldr	r1, [pc, #408]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 8000926:	486a      	ldr	r0, [pc, #424]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 8000928:	f003 fcd9 	bl	80042de <HAL_UART_Receive_IT>
		if(dev4_uart_rxData == '\n' || dev4_uart_rxData == '\r')
			dev4_send_flag = dev4_array_end;
		dev4_array_end = (dev4_array_end+1)%dev4_uart_buffer_size;
		HAL_UART_Receive_IT(&huart6, &dev4_uart_rxData, 1);
	}
}
 800092c:	e0c0      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0x24c>
	else if(huart->Instance == USART3)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a68      	ldr	r2, [pc, #416]	; (8000ad4 <HAL_UART_RxCpltCallback+0x270>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d12c      	bne.n	8000992 <HAL_UART_RxCpltCallback+0x12e>
		dev1_uart_rxBuffer[dev1_array_end] = dev1_uart_rxData;
 8000938:	4b67      	ldr	r3, [pc, #412]	; (8000ad8 <HAL_UART_RxCpltCallback+0x274>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b67      	ldr	r3, [pc, #412]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000940:	7819      	ldrb	r1, [r3, #0]
 8000942:	4b67      	ldr	r3, [pc, #412]	; (8000ae0 <HAL_UART_RxCpltCallback+0x27c>)
 8000944:	5499      	strb	r1, [r3, r2]
		if(dev1_uart_rxData == '\n' || dev1_uart_rxData == '\r')
 8000946:	4b65      	ldr	r3, [pc, #404]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d003      	beq.n	8000956 <HAL_UART_RxCpltCallback+0xf2>
 800094e:	4b63      	ldr	r3, [pc, #396]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b0d      	cmp	r3, #13
 8000954:	d103      	bne.n	800095e <HAL_UART_RxCpltCallback+0xfa>
			dev1_send_flag = dev1_array_end;
 8000956:	4b60      	ldr	r3, [pc, #384]	; (8000ad8 <HAL_UART_RxCpltCallback+0x274>)
 8000958:	881a      	ldrh	r2, [r3, #0]
 800095a:	4b62      	ldr	r3, [pc, #392]	; (8000ae4 <HAL_UART_RxCpltCallback+0x280>)
 800095c:	801a      	strh	r2, [r3, #0]
		dev1_new_data = 1;
 800095e:	4b62      	ldr	r3, [pc, #392]	; (8000ae8 <HAL_UART_RxCpltCallback+0x284>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
		dev1_array_end = (dev1_array_end+1)%dev1_uart_buffer_size;
 8000964:	4b5c      	ldr	r3, [pc, #368]	; (8000ad8 <HAL_UART_RxCpltCallback+0x274>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a58      	ldr	r2, [pc, #352]	; (8000acc <HAL_UART_RxCpltCallback+0x268>)
 800096c:	fb82 1203 	smull	r1, r2, r2, r3
 8000970:	12d1      	asrs	r1, r2, #11
 8000972:	17da      	asrs	r2, r3, #31
 8000974:	1a8a      	subs	r2, r1, r2
 8000976:	f241 3188 	movw	r1, #5000	; 0x1388
 800097a:	fb01 f202 	mul.w	r2, r1, r2
 800097e:	1a9a      	subs	r2, r3, r2
 8000980:	b292      	uxth	r2, r2
 8000982:	4b55      	ldr	r3, [pc, #340]	; (8000ad8 <HAL_UART_RxCpltCallback+0x274>)
 8000984:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &dev1_uart_rxData, 1);
 8000986:	2201      	movs	r2, #1
 8000988:	4954      	ldr	r1, [pc, #336]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 800098a:	4858      	ldr	r0, [pc, #352]	; (8000aec <HAL_UART_RxCpltCallback+0x288>)
 800098c:	f003 fca7 	bl	80042de <HAL_UART_Receive_IT>
}
 8000990:	e08e      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0x24c>
	else if(huart->Instance == UART4)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a56      	ldr	r2, [pc, #344]	; (8000af0 <HAL_UART_RxCpltCallback+0x28c>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d129      	bne.n	80009f0 <HAL_UART_RxCpltCallback+0x18c>
		dev3_uart_rxBuffer[dev3_array_end] = dev3_uart_rxData;
 800099c:	4b55      	ldr	r3, [pc, #340]	; (8000af4 <HAL_UART_RxCpltCallback+0x290>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <HAL_UART_RxCpltCallback+0x294>)
 80009a4:	7819      	ldrb	r1, [r3, #0]
 80009a6:	4b55      	ldr	r3, [pc, #340]	; (8000afc <HAL_UART_RxCpltCallback+0x298>)
 80009a8:	5499      	strb	r1, [r3, r2]
		if(dev3_uart_rxData == '\n' || dev3_uart_rxData == '\r')
 80009aa:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <HAL_UART_RxCpltCallback+0x294>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b0a      	cmp	r3, #10
 80009b0:	d003      	beq.n	80009ba <HAL_UART_RxCpltCallback+0x156>
 80009b2:	4b51      	ldr	r3, [pc, #324]	; (8000af8 <HAL_UART_RxCpltCallback+0x294>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b0d      	cmp	r3, #13
 80009b8:	d103      	bne.n	80009c2 <HAL_UART_RxCpltCallback+0x15e>
			dev3_send_flag = dev3_array_end;
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <HAL_UART_RxCpltCallback+0x290>)
 80009bc:	881a      	ldrh	r2, [r3, #0]
 80009be:	4b50      	ldr	r3, [pc, #320]	; (8000b00 <HAL_UART_RxCpltCallback+0x29c>)
 80009c0:	801a      	strh	r2, [r3, #0]
		dev3_array_end = (dev3_array_end+1)%dev3_uart_buffer_size;
 80009c2:	4b4c      	ldr	r3, [pc, #304]	; (8000af4 <HAL_UART_RxCpltCallback+0x290>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a40      	ldr	r2, [pc, #256]	; (8000acc <HAL_UART_RxCpltCallback+0x268>)
 80009ca:	fb82 1203 	smull	r1, r2, r2, r3
 80009ce:	12d1      	asrs	r1, r2, #11
 80009d0:	17da      	asrs	r2, r3, #31
 80009d2:	1a8a      	subs	r2, r1, r2
 80009d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80009d8:	fb01 f202 	mul.w	r2, r1, r2
 80009dc:	1a9a      	subs	r2, r3, r2
 80009de:	b292      	uxth	r2, r2
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <HAL_UART_RxCpltCallback+0x290>)
 80009e2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &dev3_uart_rxData, 1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	4944      	ldr	r1, [pc, #272]	; (8000af8 <HAL_UART_RxCpltCallback+0x294>)
 80009e8:	4846      	ldr	r0, [pc, #280]	; (8000b04 <HAL_UART_RxCpltCallback+0x2a0>)
 80009ea:	f003 fc78 	bl	80042de <HAL_UART_Receive_IT>
}
 80009ee:	e05f      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0x24c>
	else if(huart->Instance == UART5)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a44      	ldr	r2, [pc, #272]	; (8000b08 <HAL_UART_RxCpltCallback+0x2a4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12c      	bne.n	8000a54 <HAL_UART_RxCpltCallback+0x1f0>
		dev2_uart_rxBuffer[dev2_array_end] = dev2_uart_rxData;
 80009fa:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <HAL_UART_RxCpltCallback+0x2a8>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <HAL_UART_RxCpltCallback+0x2ac>)
 8000a02:	7819      	ldrb	r1, [r3, #0]
 8000a04:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <HAL_UART_RxCpltCallback+0x2b0>)
 8000a06:	5499      	strb	r1, [r3, r2]
		if(dev2_uart_rxData == '\n' || dev2_uart_rxData == '\r')
 8000a08:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <HAL_UART_RxCpltCallback+0x2ac>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b0a      	cmp	r3, #10
 8000a0e:	d003      	beq.n	8000a18 <HAL_UART_RxCpltCallback+0x1b4>
 8000a10:	4b3f      	ldr	r3, [pc, #252]	; (8000b10 <HAL_UART_RxCpltCallback+0x2ac>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b0d      	cmp	r3, #13
 8000a16:	d103      	bne.n	8000a20 <HAL_UART_RxCpltCallback+0x1bc>
			dev2_send_flag = dev2_array_end;
 8000a18:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <HAL_UART_RxCpltCallback+0x2a8>)
 8000a1a:	881a      	ldrh	r2, [r3, #0]
 8000a1c:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <HAL_UART_RxCpltCallback+0x2b4>)
 8000a1e:	801a      	strh	r2, [r3, #0]
		dev2_new_data = 1;
 8000a20:	4b3e      	ldr	r3, [pc, #248]	; (8000b1c <HAL_UART_RxCpltCallback+0x2b8>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
		dev2_array_end = (dev2_array_end+1)%dev2_uart_buffer_size;
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <HAL_UART_RxCpltCallback+0x2a8>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a27      	ldr	r2, [pc, #156]	; (8000acc <HAL_UART_RxCpltCallback+0x268>)
 8000a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a32:	12d1      	asrs	r1, r2, #11
 8000a34:	17da      	asrs	r2, r3, #31
 8000a36:	1a8a      	subs	r2, r1, r2
 8000a38:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a3c:	fb01 f202 	mul.w	r2, r1, r2
 8000a40:	1a9a      	subs	r2, r3, r2
 8000a42:	b292      	uxth	r2, r2
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <HAL_UART_RxCpltCallback+0x2a8>)
 8000a46:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, &dev2_uart_rxData, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4931      	ldr	r1, [pc, #196]	; (8000b10 <HAL_UART_RxCpltCallback+0x2ac>)
 8000a4c:	4834      	ldr	r0, [pc, #208]	; (8000b20 <HAL_UART_RxCpltCallback+0x2bc>)
 8000a4e:	f003 fc46 	bl	80042de <HAL_UART_Receive_IT>
}
 8000a52:	e02d      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0x24c>
	else if(huart->Instance == USART6)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d128      	bne.n	8000ab0 <HAL_UART_RxCpltCallback+0x24c>
		dev4_uart_rxBuffer[dev4_array_end] = dev4_uart_rxData;
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a66:	7819      	ldrb	r1, [r3, #0]
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a6a:	5499      	strb	r1, [r3, r2]
		if(dev4_uart_rxData == '\n' || dev4_uart_rxData == '\r')
 8000a6c:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b0a      	cmp	r3, #10
 8000a72:	d003      	beq.n	8000a7c <HAL_UART_RxCpltCallback+0x218>
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b0d      	cmp	r3, #13
 8000a7a:	d103      	bne.n	8000a84 <HAL_UART_RxCpltCallback+0x220>
			dev4_send_flag = dev4_array_end;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a7e:	881a      	ldrh	r2, [r3, #0]
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a82:	801a      	strh	r2, [r3, #0]
		dev4_array_end = (dev4_array_end+1)%dev4_uart_buffer_size;
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_UART_RxCpltCallback+0x268>)
 8000a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a90:	12d1      	asrs	r1, r2, #11
 8000a92:	17da      	asrs	r2, r3, #31
 8000a94:	1a8a      	subs	r2, r1, r2
 8000a96:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a9a:	fb01 f202 	mul.w	r2, r1, r2
 8000a9e:	1a9a      	subs	r2, r3, r2
 8000aa0:	b292      	uxth	r2, r2
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <HAL_UART_RxCpltCallback+0x2c4>)
 8000aa4:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, &dev4_uart_rxData, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4920      	ldr	r1, [pc, #128]	; (8000b2c <HAL_UART_RxCpltCallback+0x2c8>)
 8000aaa:	4823      	ldr	r0, [pc, #140]	; (8000b38 <HAL_UART_RxCpltCallback+0x2d4>)
 8000aac:	f003 fc17 	bl	80042de <HAL_UART_Receive_IT>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	200014b0 	.word	0x200014b0
 8000ac0:	200014b2 	.word	0x200014b2
 8000ac4:	20000128 	.word	0x20000128
 8000ac8:	20000126 	.word	0x20000126
 8000acc:	68db8bad 	.word	0x68db8bad
 8000ad0:	200064b8 	.word	0x200064b8
 8000ad4:	40004800 	.word	0x40004800
 8000ad8:	20002972 	.word	0x20002972
 8000adc:	20002976 	.word	0x20002976
 8000ae0:	200015e8 	.word	0x200015e8
 8000ae4:	20002974 	.word	0x20002974
 8000ae8:	20002977 	.word	0x20002977
 8000aec:	20006540 	.word	0x20006540
 8000af0:	40004c00 	.word	0x40004c00
 8000af4:	20003d06 	.word	0x20003d06
 8000af8:	20003d0a 	.word	0x20003d0a
 8000afc:	2000297c 	.word	0x2000297c
 8000b00:	20003d08 	.word	0x20003d08
 8000b04:	20006430 	.word	0x20006430
 8000b08:	40005000 	.word	0x40005000
 8000b0c:	20005096 	.word	0x20005096
 8000b10:	2000509a 	.word	0x2000509a
 8000b14:	20003d0c 	.word	0x20003d0c
 8000b18:	20005098 	.word	0x20005098
 8000b1c:	2000509b 	.word	0x2000509b
 8000b20:	20006474 	.word	0x20006474
 8000b24:	40011400 	.word	0x40011400
 8000b28:	20006426 	.word	0x20006426
 8000b2c:	2000642a 	.word	0x2000642a
 8000b30:	2000509c 	.word	0x2000509c
 8000b34:	20006428 	.word	0x20006428
 8000b38:	20006584 	.word	0x20006584

08000b3c <Get_Application_State>:

uint8_t Get_Application_State(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	return application_state;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <Get_Application_State+0x14>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000126 	.word	0x20000126

08000b54 <Dev1_DataReady>:

uint8_t Dev1_DataReady(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	return dev1_new_data;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <Dev1_DataReady+0x14>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20002977 	.word	0x20002977

08000b6c <Dev2_DataReady>:

uint8_t Dev2_DataReady(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	return dev2_new_data;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <Dev2_DataReady+0x14>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2000509b 	.word	0x2000509b

08000b84 <Dev1_GetData>:

uint8_t Dev1_GetData(uint16_t head_subtracter)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
	dev1_new_data = 0;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <Dev1_GetData+0x44>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	return dev1_uart_rxBuffer[(dev1_uart_buffer_size-1-head_subtracter+dev1_array_end)%dev1_uart_buffer_size];
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000b9a:	3307      	adds	r3, #7
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <Dev1_GetData+0x48>)
 8000b9e:	8812      	ldrh	r2, [r2, #0]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <Dev1_GetData+0x4c>)
 8000ba4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba8:	12d9      	asrs	r1, r3, #11
 8000baa:	17d3      	asrs	r3, r2, #31
 8000bac:	1acb      	subs	r3, r1, r3
 8000bae:	f241 3188 	movw	r1, #5000	; 0x1388
 8000bb2:	fb01 f303 	mul.w	r3, r1, r3
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <Dev1_GetData+0x50>)
 8000bba:	5cd3      	ldrb	r3, [r2, r3]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	20002977 	.word	0x20002977
 8000bcc:	20002972 	.word	0x20002972
 8000bd0:	68db8bad 	.word	0x68db8bad
 8000bd4:	200015e8 	.word	0x200015e8

08000bd8 <Dev2_GetData>:

uint8_t Dev2_GetData(uint16_t head_subtracter)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	dev2_new_data = 0;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <Dev2_GetData+0x44>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
	return dev2_uart_rxBuffer[(dev2_uart_buffer_size-1-head_subtracter+dev2_array_end)%dev2_uart_buffer_size];
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000bee:	3307      	adds	r3, #7
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <Dev2_GetData+0x48>)
 8000bf2:	8812      	ldrh	r2, [r2, #0]
 8000bf4:	441a      	add	r2, r3
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <Dev2_GetData+0x4c>)
 8000bf8:	fb83 1302 	smull	r1, r3, r3, r2
 8000bfc:	12d9      	asrs	r1, r3, #11
 8000bfe:	17d3      	asrs	r3, r2, #31
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <Dev2_GetData+0x50>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	2000509b 	.word	0x2000509b
 8000c20:	20005096 	.word	0x20005096
 8000c24:	68db8bad 	.word	0x68db8bad
 8000c28:	20003d0c 	.word	0x20003d0c

08000c2c <Dev1_Find_Word>:

uint8_t Dev1_Find_Word(char* word)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b0c5      	sub	sp, #276	; 0x114
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c3a:	6018      	str	r0, [r3, #0]
	if(Dev1_DataReady())
 8000c3c:	f7ff ff8a 	bl	8000b54 <Dev1_DataReady>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d047      	beq.n	8000cd6 <Dev1_Find_Word+0xaa>
	{
		uint16_t word_length = strlen(word);
 8000c46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	f7ff fae8 	bl	8000224 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		char current_word[255] = {0};
 8000c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	3304      	adds	r3, #4
 8000c68:	22fb      	movs	r2, #251	; 0xfb
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 faf9 	bl	8005264 <memset>
		for(uint16_t i = 0; i<word_length; i++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000c78:	e016      	b.n	8000ca8 <Dev1_Find_Word+0x7c>
			current_word[word_length-1-i] = Dev1_GetData(i);
 8000c7a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000c84:	1ad4      	subs	r4, r2, r3
 8000c86:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff7a 	bl	8000b84 <Dev1_GetData>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000c9c:	551a      	strb	r2, [r3, r4]
		for(uint16_t i = 0; i<word_length; i++)
 8000c9e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000ca8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000cac:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d3e2      	bcc.n	8000c7a <Dev1_Find_Word+0x4e>

		if(strcmp(current_word, word) == 0)
 8000cb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cbc:	f107 020c 	add.w	r2, r7, #12
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	f7ff faa4 	bl	8000210 <strcmp>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <Dev1_Find_Word+0xa6>
			return 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e002      	b.n	8000cd8 <Dev1_Find_Word+0xac>
		else
			return 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <Dev1_Find_Word+0xac>
	}
	else
		return 0;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd90      	pop	{r4, r7, pc}

08000ce2 <Dev2_Find_Word>:

uint8_t Dev2_Find_Word(char* word)
{
 8000ce2:	b590      	push	{r4, r7, lr}
 8000ce4:	b0c5      	sub	sp, #276	; 0x114
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cf0:	6018      	str	r0, [r3, #0]
	if(Dev2_DataReady())
 8000cf2:	f7ff ff3b 	bl	8000b6c <Dev2_DataReady>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d047      	beq.n	8000d8c <Dev2_Find_Word+0xaa>
	{
		uint16_t word_length = strlen(word);
 8000cfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	f7ff fa8d 	bl	8000224 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		char current_word[255] = {0};
 8000d10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	22fb      	movs	r2, #251	; 0xfb
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 fa9e 	bl	8005264 <memset>
		for(uint16_t i = 0; i<word_length; i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000d2e:	e016      	b.n	8000d5e <Dev2_Find_Word+0x7c>
			current_word[word_length-1-i] = Dev2_GetData(i);
 8000d30:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000d3a:	1ad4      	subs	r4, r2, r3
 8000d3c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff49 	bl	8000bd8 <Dev2_GetData>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d52:	551a      	strb	r2, [r3, r4]
		for(uint16_t i = 0; i<word_length; i++)
 8000d54:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000d58:	3301      	adds	r3, #1
 8000d5a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000d5e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000d62:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3e2      	bcc.n	8000d30 <Dev2_Find_Word+0x4e>

		if(strcmp(current_word, word) == 0)
 8000d6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d72:	f107 020c 	add.w	r2, r7, #12
 8000d76:	6819      	ldr	r1, [r3, #0]
 8000d78:	4610      	mov	r0, r2
 8000d7a:	f7ff fa49 	bl	8000210 <strcmp>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <Dev2_Find_Word+0xa6>
			return 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e002      	b.n	8000d8e <Dev2_Find_Word+0xac>
		else
			return 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e000      	b.n	8000d8e <Dev2_Find_Word+0xac>
	}
	else
		return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd90      	pop	{r4, r7, pc}

08000d98 <Dev1_GetInfo>:

uint8_t * Dev1_GetInfo(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	if(Dev1_DataReady())
 8000d9e:	f7ff fed9 	bl	8000b54 <Dev1_DataReady>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d037      	beq.n	8000e18 <Dev1_GetInfo+0x80>
	{
		if(getinfo_find_fields)
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <Dev1_GetInfo+0x8c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d021      	beq.n	8000df4 <Dev1_GetInfo+0x5c>
		{
			char curr_char = Dev1_GetData(0);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fee7 	bl	8000b84 <Dev1_GetData>
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
			getinfo_buffer[getinfo_buffer_head] = curr_char;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <Dev1_GetInfo+0x90>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <Dev1_GetInfo+0x94>)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	5453      	strb	r3, [r2, r1]
			getinfo_buffer_head += 1;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <Dev1_GetInfo+0x90>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <Dev1_GetInfo+0x90>)
 8000dd0:	801a      	strh	r2, [r3, #0]

			if(curr_char == '|')
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b7c      	cmp	r3, #124	; 0x7c
 8000dd6:	d105      	bne.n	8000de4 <Dev1_GetInfo+0x4c>
				getinfo_fields_found_count += 1;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <Dev1_GetInfo+0x98>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <Dev1_GetInfo+0x98>)
 8000de2:	701a      	strb	r2, [r3, #0]

			if(getinfo_fields_found_count == num_machine_readable_fields)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <Dev1_GetInfo+0x98>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b25      	cmp	r3, #37	; 0x25
 8000dea:	d115      	bne.n	8000e18 <Dev1_GetInfo+0x80>
				getinfo_buffer[0] = '1';
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <Dev1_GetInfo+0x94>)
 8000dee:	2231      	movs	r2, #49	; 0x31
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	e011      	b.n	8000e18 <Dev1_GetInfo+0x80>
		}
		else
		{
			if(Dev1_Find_Word("1."))
 8000df4:	480f      	ldr	r0, [pc, #60]	; (8000e34 <Dev1_GetInfo+0x9c>)
 8000df6:	f7ff ff19 	bl	8000c2c <Dev1_Find_Word>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00b      	beq.n	8000e18 <Dev1_GetInfo+0x80>
			{
				getinfo_buffer[1] = '.';
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <Dev1_GetInfo+0x94>)
 8000e02:	222e      	movs	r2, #46	; 0x2e
 8000e04:	705a      	strb	r2, [r3, #1]
				getinfo_buffer_head = getinfo_buffer_head + 1;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <Dev1_GetInfo+0x90>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <Dev1_GetInfo+0x90>)
 8000e10:	801a      	strh	r2, [r3, #0]
				getinfo_find_fields = 1;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <Dev1_GetInfo+0x8c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return getinfo_buffer;
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <Dev1_GetInfo+0x94>)
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200015e1 	.word	0x200015e1
 8000e28:	200015e2 	.word	0x200015e2
 8000e2c:	200014b4 	.word	0x200014b4
 8000e30:	200015e0 	.word	0x200015e0
 8000e34:	080064c4 	.word	0x080064c4

08000e38 <Dev2_GetInfo>:

uint8_t * Dev2_GetInfo(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	if(Dev2_DataReady())
 8000e3e:	f7ff fe95 	bl	8000b6c <Dev2_DataReady>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d037      	beq.n	8000eb8 <Dev2_GetInfo+0x80>
	{
		if(getinfo_find_fields)
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <Dev2_GetInfo+0x8c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d021      	beq.n	8000e94 <Dev2_GetInfo+0x5c>
		{
			char curr_char = Dev2_GetData(0);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fec1 	bl	8000bd8 <Dev2_GetData>
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
			getinfo_buffer[getinfo_buffer_head] = curr_char;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <Dev2_GetInfo+0x90>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <Dev2_GetInfo+0x94>)
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	5453      	strb	r3, [r2, r1]
			getinfo_buffer_head += 1;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <Dev2_GetInfo+0x90>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <Dev2_GetInfo+0x90>)
 8000e70:	801a      	strh	r2, [r3, #0]

			if(curr_char == '|')
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b7c      	cmp	r3, #124	; 0x7c
 8000e76:	d105      	bne.n	8000e84 <Dev2_GetInfo+0x4c>
				getinfo_fields_found_count += 1;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <Dev2_GetInfo+0x98>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <Dev2_GetInfo+0x98>)
 8000e82:	701a      	strb	r2, [r3, #0]

			if(getinfo_fields_found_count == num_machine_readable_fields)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <Dev2_GetInfo+0x98>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b25      	cmp	r3, #37	; 0x25
 8000e8a:	d115      	bne.n	8000eb8 <Dev2_GetInfo+0x80>
				getinfo_buffer[0] = '1';
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <Dev2_GetInfo+0x94>)
 8000e8e:	2231      	movs	r2, #49	; 0x31
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e011      	b.n	8000eb8 <Dev2_GetInfo+0x80>
		}
		else
		{
			if(Dev2_Find_Word("1."))
 8000e94:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <Dev2_GetInfo+0x9c>)
 8000e96:	f7ff ff24 	bl	8000ce2 <Dev2_Find_Word>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00b      	beq.n	8000eb8 <Dev2_GetInfo+0x80>
			{
				getinfo_buffer[1] = '.';
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <Dev2_GetInfo+0x94>)
 8000ea2:	222e      	movs	r2, #46	; 0x2e
 8000ea4:	705a      	strb	r2, [r3, #1]
				getinfo_buffer_head = getinfo_buffer_head + 1;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <Dev2_GetInfo+0x90>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <Dev2_GetInfo+0x90>)
 8000eb0:	801a      	strh	r2, [r3, #0]
				getinfo_find_fields = 1;
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <Dev2_GetInfo+0x8c>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return getinfo_buffer;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <Dev2_GetInfo+0x94>)
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200015e1 	.word	0x200015e1
 8000ec8:	200015e2 	.word	0x200015e2
 8000ecc:	200014b4 	.word	0x200014b4
 8000ed0:	200015e0 	.word	0x200015e0
 8000ed4:	080064c4 	.word	0x080064c4

08000ed8 <PrettySend_Skyla_Info_toPi>:
			"Network Key",								"Fuse Settings",						"Creed Transmit Frequency",		"RTCC Trim Value",						"Data Logger Send Pointer",
			"Build Version",								"Creed Settings",						"RTCC Control Value",				"Data Logger Next Sector",			"Data Logger Read Sector",
			"Data Logger Origin Sector",			"Data Logger Send Sector"
};
void PrettySend_Skyla_Info_toPi(uint8_t *payload, uint8_t skyla_num, uint8_t before_bool)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	70bb      	strb	r3, [r7, #2]
	char* tokens = strtok((char*) payload, "|");
 8000ee8:	4935      	ldr	r1, [pc, #212]	; (8000fc0 <PrettySend_Skyla_Info_toPi+0xe8>)
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f004 fa88 	bl	8005400 <strtok>
 8000ef0:	60f8      	str	r0, [r7, #12]
	uint8_t counter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	72fb      	strb	r3, [r7, #11]

	while( tokens != NULL )
 8000ef6:	e05a      	b.n	8000fae <PrettySend_Skyla_Info_toPi+0xd6>
	{
		if(skyla_num == 1)
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d107      	bne.n	8000f0e <PrettySend_Skyla_Info_toPi+0x36>
			HAL_UART_Transmit(&huart1, (uint8_t*)"S1|", 3, 1000);
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	2203      	movs	r2, #3
 8000f04:	492f      	ldr	r1, [pc, #188]	; (8000fc4 <PrettySend_Skyla_Info_toPi+0xec>)
 8000f06:	4830      	ldr	r0, [pc, #192]	; (8000fc8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f08:	f003 f957 	bl	80041ba <HAL_UART_Transmit>
 8000f0c:	e006      	b.n	8000f1c <PrettySend_Skyla_Info_toPi+0x44>
		else
			HAL_UART_Transmit(&huart1, (uint8_t*)"S2|", 3, 1000);
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	2203      	movs	r2, #3
 8000f14:	492d      	ldr	r1, [pc, #180]	; (8000fcc <PrettySend_Skyla_Info_toPi+0xf4>)
 8000f16:	482c      	ldr	r0, [pc, #176]	; (8000fc8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f18:	f003 f94f 	bl	80041ba <HAL_UART_Transmit>

		if(before_bool)
 8000f1c:	78bb      	ldrb	r3, [r7, #2]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <PrettySend_Skyla_Info_toPi+0x5a>
			HAL_UART_Transmit(&huart1, (uint8_t*)"B|", 2, 1000);
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	2202      	movs	r2, #2
 8000f28:	4929      	ldr	r1, [pc, #164]	; (8000fd0 <PrettySend_Skyla_Info_toPi+0xf8>)
 8000f2a:	4827      	ldr	r0, [pc, #156]	; (8000fc8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f2c:	f003 f945 	bl	80041ba <HAL_UART_Transmit>
 8000f30:	e006      	b.n	8000f40 <PrettySend_Skyla_Info_toPi+0x68>
		else
			HAL_UART_Transmit(&huart1, (uint8_t*)"A|", 2, 1000);
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	2202      	movs	r2, #2
 8000f38:	4926      	ldr	r1, [pc, #152]	; (8000fd4 <PrettySend_Skyla_Info_toPi+0xfc>)
 8000f3a:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f3c:	f003 f93d 	bl	80041ba <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, (uint8_t*)titles[counter], strlen(titles[counter]), 1000);
 8000f40:	7afb      	ldrb	r3, [r7, #11]
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <PrettySend_Skyla_Info_toPi+0x100>)
 8000f44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000f48:	7afb      	ldrb	r3, [r7, #11]
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <PrettySend_Skyla_Info_toPi+0x100>)
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f967 	bl	8000224 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	4621      	mov	r1, r4
 8000f60:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f62:	f003 f92a 	bl	80041ba <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"| ", 2, 1000);
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	491b      	ldr	r1, [pc, #108]	; (8000fdc <PrettySend_Skyla_Info_toPi+0x104>)
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f70:	f003 f923 	bl	80041ba <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)tokens, strlen(tokens), 1000);
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff f955 	bl	8000224 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f86:	f003 f918 	bl	80041ba <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4913      	ldr	r1, [pc, #76]	; (8000fe0 <PrettySend_Skyla_Info_toPi+0x108>)
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f94:	f003 f911 	bl	80041ba <HAL_UART_Transmit>

		tokens = strtok(NULL, "|");
 8000f98:	4909      	ldr	r1, [pc, #36]	; (8000fc0 <PrettySend_Skyla_Info_toPi+0xe8>)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f004 fa30 	bl	8005400 <strtok>
 8000fa0:	60f8      	str	r0, [r7, #12]
		counter += 1;
 8000fa2:	7afb      	ldrb	r3, [r7, #11]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(10);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f001 ff5b 	bl	8002e64 <HAL_Delay>
	while( tokens != NULL )
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1a1      	bne.n	8000ef8 <PrettySend_Skyla_Info_toPi+0x20>
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	080067b8 	.word	0x080067b8
 8000fc4:	080067bc 	.word	0x080067bc
 8000fc8:	200064b8 	.word	0x200064b8
 8000fcc:	080067c0 	.word	0x080067c0
 8000fd0:	080067c4 	.word	0x080067c4
 8000fd4:	080067c8 	.word	0x080067c8
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	080067cc 	.word	0x080067cc
 8000fe0:	080067d0 	.word	0x080067d0

08000fe4 <Power_Cycle_Dev>:

void Power_Cycle_Dev(uint8_t dev)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	printf("Power cycling devices\n");
 8000fee:	4811      	ldr	r0, [pc, #68]	; (8001034 <Power_Cycle_Dev+0x50>)
 8000ff0:	f004 f9c6 	bl	8005380 <puts>
	Power_Dev_OFF(dev);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fdb0 	bl	8001b5c <Power_Dev_OFF>
	printf("Waiting for 30 seconds...\n");
 8000ffc:	480e      	ldr	r0, [pc, #56]	; (8001038 <Power_Cycle_Dev+0x54>)
 8000ffe:	f004 f9bf 	bl	8005380 <puts>
	for (int i = 0; i > 30; i += 2)
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	e00a      	b.n	800101e <Power_Cycle_Dev+0x3a>
	{
		HAL_Delay(2000);
 8001008:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800100c:	f001 ff2a 	bl	8002e64 <HAL_Delay>
		printf("%d/30secs\r", i);
 8001010:	68f9      	ldr	r1, [r7, #12]
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <Power_Cycle_Dev+0x58>)
 8001014:	f004 f92e 	bl	8005274 <iprintf>
	for (int i = 0; i > 30; i += 2)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3302      	adds	r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b1e      	cmp	r3, #30
 8001022:	dcf1      	bgt.n	8001008 <Power_Cycle_Dev+0x24>
	}
	Power_Dev_ON(dev);
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fe00 	bl	8001c2c <Power_Dev_ON>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	080067d4 	.word	0x080067d4
 8001038:	080067ec 	.word	0x080067ec
 800103c:	08006808 	.word	0x08006808

08001040 <Dev_Restarted>:

bool Dev_Restarted(uint16_t dev_send_flag, uint16_t dev_array_start, uint8_t timeout)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
 800104a:	460b      	mov	r3, r1
 800104c:	80bb      	strh	r3, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	70fb      	strb	r3, [r7, #3]
	uint32_t time_start = HAL_GetTick();
 8001052:	f001 fefb 	bl	8002e4c <HAL_GetTick>
 8001056:	60f8      	str	r0, [r7, #12]

	while (dev_send_flag == dev_array_start)
 8001058:	e018      	b.n	800108c <Dev_Restarted+0x4c>
	{
		uint32_t time_elapsed = (time_start - HAL_GetTick());
 800105a:	f001 fef7 	bl	8002e4c <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	60bb      	str	r3, [r7, #8]
		printf("Waiting for device to startup. Time elapsed: %d\n", time_elapsed);
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <Dev_Restarted+0x60>)
 800106a:	f004 f903 	bl	8005274 <iprintf>

		if (time_elapsed >= (timeout * 1000))
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	461a      	mov	r2, r3
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4293      	cmp	r3, r2
 800107e:	d301      	bcc.n	8001084 <Dev_Restarted+0x44>
		{
			return false;
 8001080:	2300      	movs	r3, #0
 8001082:	e008      	b.n	8001096 <Dev_Restarted+0x56>
		}

		HAL_Delay(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001088:	f001 feec 	bl	8002e64 <HAL_Delay>
	while (dev_send_flag == dev_array_start)
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	88bb      	ldrh	r3, [r7, #4]
 8001090:	429a      	cmp	r2, r3
 8001092:	d0e2      	beq.n	800105a <Dev_Restarted+0x1a>
	}

	return true;
 8001094:	2301      	movs	r3, #1
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	08006814 	.word	0x08006814

080010a4 <Dev1_Molly_App>:

void Dev1_Molly_App(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80010aa:	af00      	add	r7, sp, #0
	switch(molly_dev1_state)
 80010ac:	4bbd      	ldr	r3, [pc, #756]	; (80013a4 <Dev1_Molly_App+0x300>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	f200 8165 	bhi.w	8001382 <Dev1_Molly_App+0x2de>
 80010b8:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <Dev1_Molly_App+0x1c>)
 80010ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010be:	bf00      	nop
 80010c0:	080010e1 	.word	0x080010e1
 80010c4:	08001113 	.word	0x08001113
 80010c8:	08001187 	.word	0x08001187
 80010cc:	080011c9 	.word	0x080011c9
 80010d0:	080011f5 	.word	0x080011f5
 80010d4:	08001253 	.word	0x08001253
 80010d8:	0800130b 	.word	0x0800130b
 80010dc:	08001337 	.word	0x08001337
	{
		case FIND_DEBUG:
			if(Dev1_Find_Word("DEBUG"))
 80010e0:	48b1      	ldr	r0, [pc, #708]	; (80013a8 <Dev1_Molly_App+0x304>)
 80010e2:	f7ff fda3 	bl	8000c2c <Dev1_Find_Word>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 81a3 	beq.w	8001434 <Dev1_Molly_App+0x390>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L|Found debug\n", 14, 1000);
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	220e      	movs	r2, #14
 80010f4:	49ad      	ldr	r1, [pc, #692]	; (80013ac <Dev1_Molly_App+0x308>)
 80010f6:	48ae      	ldr	r0, [pc, #696]	; (80013b0 <Dev1_Molly_App+0x30c>)
 80010f8:	f003 f85f 	bl	80041ba <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*)"DEBUG", 5, 1000);
 80010fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001100:	2205      	movs	r2, #5
 8001102:	49a9      	ldr	r1, [pc, #676]	; (80013a8 <Dev1_Molly_App+0x304>)
 8001104:	48ab      	ldr	r0, [pc, #684]	; (80013b4 <Dev1_Molly_App+0x310>)
 8001106:	f003 f858 	bl	80041ba <HAL_UART_Transmit>
				molly_dev1_state = GET_SETTINGS;
 800110a:	4ba6      	ldr	r3, [pc, #664]	; (80013a4 <Dev1_Molly_App+0x300>)
 800110c:	2202      	movs	r2, #2
 800110e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001110:	e190      	b.n	8001434 <Dev1_Molly_App+0x390>

		case GET_SETTINGS:
			memset(pi_uart_rxBuffer, 0, pi_buffer_size);
 8001112:	f241 3288 	movw	r2, #5000	; 0x1388
 8001116:	2100      	movs	r1, #0
 8001118:	48a7      	ldr	r0, [pc, #668]	; (80013b8 <Dev1_Molly_App+0x314>)
 800111a:	f004 f8a3 	bl	8005264 <memset>
			pi_array_end = 0;
 800111e:	4ba7      	ldr	r3, [pc, #668]	; (80013bc <Dev1_Molly_App+0x318>)
 8001120:	2200      	movs	r2, #0
 8001122:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"send payload \r\n", 15, 1000);
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	220f      	movs	r2, #15
 800112a:	49a5      	ldr	r1, [pc, #660]	; (80013c0 <Dev1_Molly_App+0x31c>)
 800112c:	48a0      	ldr	r0, [pc, #640]	; (80013b0 <Dev1_Molly_App+0x30c>)
 800112e:	f003 f844 	bl	80041ba <HAL_UART_Transmit>
			HAL_Delay(100);
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f001 fe96 	bl	8002e64 <HAL_Delay>

			HAL_UART_Transmit(&huart1, (uint8_t*)"L| PL:", 6, 1000);
 8001138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113c:	2206      	movs	r2, #6
 800113e:	49a1      	ldr	r1, [pc, #644]	; (80013c4 <Dev1_Molly_App+0x320>)
 8001140:	489b      	ldr	r0, [pc, #620]	; (80013b0 <Dev1_Molly_App+0x30c>)
 8001142:	f003 f83a 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)(char*)pi_uart_rxBuffer, strlen((char*)pi_uart_rxBuffer), 1000);
 8001146:	489c      	ldr	r0, [pc, #624]	; (80013b8 <Dev1_Molly_App+0x314>)
 8001148:	f7ff f86c 	bl	8000224 <strlen>
 800114c:	4603      	mov	r3, r0
 800114e:	b29a      	uxth	r2, r3
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	4998      	ldr	r1, [pc, #608]	; (80013b8 <Dev1_Molly_App+0x314>)
 8001156:	4896      	ldr	r0, [pc, #600]	; (80013b0 <Dev1_Molly_App+0x30c>)
 8001158:	f003 f82f 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 800115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001160:	2201      	movs	r2, #1
 8001162:	4999      	ldr	r1, [pc, #612]	; (80013c8 <Dev1_Molly_App+0x324>)
 8001164:	4892      	ldr	r0, [pc, #584]	; (80013b0 <Dev1_Molly_App+0x30c>)
 8001166:	f003 f828 	bl	80041ba <HAL_UART_Transmit>

			payload = pi_uart_rxBuffer;
 800116a:	4b98      	ldr	r3, [pc, #608]	; (80013cc <Dev1_Molly_App+0x328>)
 800116c:	4a92      	ldr	r2, [pc, #584]	; (80013b8 <Dev1_Molly_App+0x314>)
 800116e:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*)"$", 1, 500);
 8001170:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001174:	2201      	movs	r2, #1
 8001176:	4996      	ldr	r1, [pc, #600]	; (80013d0 <Dev1_Molly_App+0x32c>)
 8001178:	488e      	ldr	r0, [pc, #568]	; (80013b4 <Dev1_Molly_App+0x310>)
 800117a:	f003 f81e 	bl	80041ba <HAL_UART_Transmit>
			molly_dev1_state = GET_MSG_P1;
 800117e:	4b89      	ldr	r3, [pc, #548]	; (80013a4 <Dev1_Molly_App+0x300>)
 8001180:	2203      	movs	r2, #3
 8001182:	701a      	strb	r2, [r3, #0]
			break;
 8001184:	e15d      	b.n	8001442 <Dev1_Molly_App+0x39e>

		case GET_MSG_P1:
			if(Dev1_Find_Word("NACK"))
 8001186:	4893      	ldr	r0, [pc, #588]	; (80013d4 <Dev1_Molly_App+0x330>)
 8001188:	f7ff fd50 	bl	8000c2c <Dev1_Find_Word>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8152 	beq.w	8001438 <Dev1_Molly_App+0x394>
			{
				memset(getinfo_buffer, 0, getinfo_buffer_size);
 8001194:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001198:	2100      	movs	r1, #0
 800119a:	488f      	ldr	r0, [pc, #572]	; (80013d8 <Dev1_Molly_App+0x334>)
 800119c:	f004 f862 	bl	8005264 <memset>
				getinfo_buffer_head = 1;
 80011a0:	4b8e      	ldr	r3, [pc, #568]	; (80013dc <Dev1_Molly_App+0x338>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	801a      	strh	r2, [r3, #0]
				getinfo_fields_found_count = 0;
 80011a6:	4b8e      	ldr	r3, [pc, #568]	; (80013e0 <Dev1_Molly_App+0x33c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
				getinfo_find_fields = 0;
 80011ac:	4b8d      	ldr	r3, [pc, #564]	; (80013e4 <Dev1_Molly_App+0x340>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)"#", 1, 500);
 80011b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011b6:	2201      	movs	r2, #1
 80011b8:	498b      	ldr	r1, [pc, #556]	; (80013e8 <Dev1_Molly_App+0x344>)
 80011ba:	487e      	ldr	r0, [pc, #504]	; (80013b4 <Dev1_Molly_App+0x310>)
 80011bc:	f002 fffd 	bl	80041ba <HAL_UART_Transmit>
				molly_dev1_state = GET_MSG_P2;
 80011c0:	4b78      	ldr	r3, [pc, #480]	; (80013a4 <Dev1_Molly_App+0x300>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80011c6:	e137      	b.n	8001438 <Dev1_Molly_App+0x394>

		case GET_MSG_P2:
			brd_msg = Dev1_GetInfo();
 80011c8:	f7ff fde6 	bl	8000d98 <Dev1_GetInfo>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a87      	ldr	r2, [pc, #540]	; (80013ec <Dev1_Molly_App+0x348>)
 80011d0:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 80011d2:	4b86      	ldr	r3, [pc, #536]	; (80013ec <Dev1_Molly_App+0x348>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b31      	cmp	r3, #49	; 0x31
 80011da:	f040 812f 	bne.w	800143c <Dev1_Molly_App+0x398>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 1, 1);
 80011de:	4b83      	ldr	r3, [pc, #524]	; (80013ec <Dev1_Molly_App+0x348>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2201      	movs	r2, #1
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe76 	bl	8000ed8 <PrettySend_Skyla_Info_toPi>
				molly_dev1_state = MOLLY_P1;
 80011ec:	4b6d      	ldr	r3, [pc, #436]	; (80013a4 <Dev1_Molly_App+0x300>)
 80011ee:	2205      	movs	r2, #5
 80011f0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80011f2:	e123      	b.n	800143c <Dev1_Molly_App+0x398>

		case MOLLY_P1:
			{
				if(Dev1_Find_Word("N"))
 80011f4:	487e      	ldr	r0, [pc, #504]	; (80013f0 <Dev1_Molly_App+0x34c>)
 80011f6:	f7ff fd19 	bl	8000c2c <Dev1_Find_Word>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <Dev1_Molly_App+0x162>
				{
					dev1_new_data = 0;
 8001200:	4b7c      	ldr	r3, [pc, #496]	; (80013f4 <Dev1_Molly_App+0x350>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
				}
				char strC[500];
				char * settings_char = "$$";
 8001206:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <Dev1_Molly_App+0x354>)
 8001208:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
				strncpy(strC, settings_char, 1);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2201      	movs	r2, #1
 8001210:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f8ca 	bl	80053ae <strncpy>
				strC[1] = '\0';
 800121a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800121e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001222:	2200      	movs	r2, #0
 8001224:	705a      	strb	r2, [r3, #1]
				strcat(strC, (char*)payload);
 8001226:	4b69      	ldr	r3, [pc, #420]	; (80013cc <Dev1_Molly_App+0x328>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f004 f8ae 	bl	8005390 <strcat>
				HAL_UART_Transmit(&huart3, (uint8_t*) strC, strlen(strC), 50);
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f7fe fff4 	bl	8000224 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	b29a      	uxth	r2, r3
 8001240:	1d39      	adds	r1, r7, #4
 8001242:	2332      	movs	r3, #50	; 0x32
 8001244:	485b      	ldr	r0, [pc, #364]	; (80013b4 <Dev1_Molly_App+0x310>)
 8001246:	f002 ffb8 	bl	80041ba <HAL_UART_Transmit>
				molly_dev1_state = MOLLY_P2;
 800124a:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <Dev1_Molly_App+0x300>)
 800124c:	2206      	movs	r2, #6
 800124e:	701a      	strb	r2, [r3, #0]
				break;
 8001250:	e0f7      	b.n	8001442 <Dev1_Molly_App+0x39e>
			}

		case MOLLY_P2:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| in molly \n", 13, 500);
 8001252:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001256:	220d      	movs	r2, #13
 8001258:	4968      	ldr	r1, [pc, #416]	; (80013fc <Dev1_Molly_App+0x358>)
 800125a:	4855      	ldr	r0, [pc, #340]	; (80013b0 <Dev1_Molly_App+0x30c>)
 800125c:	f002 ffad 	bl	80041ba <HAL_UART_Transmit>
			while(1)
			{
				if(Dev1_Find_Word(":"))
 8001260:	4867      	ldr	r0, [pc, #412]	; (8001400 <Dev1_Molly_App+0x35c>)
 8001262:	f7ff fce3 	bl	8000c2c <Dev1_Find_Word>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f9      	beq.n	8001260 <Dev1_Molly_App+0x1bc>
				{
					char * curr_string = (char*)&dev1_uart_rxBuffer[dev1_array_start+1];
 800126c:	4b65      	ldr	r3, [pc, #404]	; (8001404 <Dev1_Molly_App+0x360>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a65      	ldr	r2, [pc, #404]	; (8001408 <Dev1_Molly_App+0x364>)
 8001274:	4413      	add	r3, r2
 8001276:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
					char * find_pass = strstr(curr_string, "PASS");
 800127a:	4964      	ldr	r1, [pc, #400]	; (800140c <Dev1_Molly_App+0x368>)
 800127c:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001280:	f004 f8a8 	bl	80053d4 <strstr>
 8001284:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					char * find_fail = strstr(curr_string, "FAIL");
 8001288:	4961      	ldr	r1, [pc, #388]	; (8001410 <Dev1_Molly_App+0x36c>)
 800128a:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800128e:	f004 f8a1 	bl	80053d4 <strstr>
 8001292:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
					if(find_pass != NULL)
 8001296:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800129a:	2b00      	cmp	r3, #0
 800129c:	d020      	beq.n	80012e0 <Dev1_Molly_App+0x23c>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD PASS \n", 15, 500);
 800129e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a2:	220f      	movs	r2, #15
 80012a4:	495b      	ldr	r1, [pc, #364]	; (8001414 <Dev1_Molly_App+0x370>)
 80012a6:	4842      	ldr	r0, [pc, #264]	; (80013b0 <Dev1_Molly_App+0x30c>)
 80012a8:	f002 ff87 	bl	80041ba <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t*)"#", 1, 500);
 80012ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012b0:	2201      	movs	r2, #1
 80012b2:	494d      	ldr	r1, [pc, #308]	; (80013e8 <Dev1_Molly_App+0x344>)
 80012b4:	483f      	ldr	r0, [pc, #252]	; (80013b4 <Dev1_Molly_App+0x310>)
 80012b6:	f002 ff80 	bl	80041ba <HAL_UART_Transmit>
						memset(getinfo_buffer, 0, getinfo_buffer_size);
 80012ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012be:	2100      	movs	r1, #0
 80012c0:	4845      	ldr	r0, [pc, #276]	; (80013d8 <Dev1_Molly_App+0x334>)
 80012c2:	f003 ffcf 	bl	8005264 <memset>
						getinfo_buffer_head = 1;
 80012c6:	4b45      	ldr	r3, [pc, #276]	; (80013dc <Dev1_Molly_App+0x338>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	801a      	strh	r2, [r3, #0]
						getinfo_fields_found_count = 0;
 80012cc:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <Dev1_Molly_App+0x33c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
						getinfo_find_fields = 0;
 80012d2:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <Dev1_Molly_App+0x340>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
						molly_dev1_state = GET_MSG_P3;
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <Dev1_Molly_App+0x300>)
 80012da:	2207      	movs	r2, #7
 80012dc:	701a      	strb	r2, [r3, #0]
						break;
 80012de:	e013      	b.n	8001308 <Dev1_Molly_App+0x264>
					}
					else if(find_fail != NULL)
 80012e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00a      	beq.n	80012fe <Dev1_Molly_App+0x25a>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD FAIL!!! \n", 18, 500);
 80012e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ec:	2212      	movs	r2, #18
 80012ee:	494a      	ldr	r1, [pc, #296]	; (8001418 <Dev1_Molly_App+0x374>)
 80012f0:	482f      	ldr	r0, [pc, #188]	; (80013b0 <Dev1_Molly_App+0x30c>)
 80012f2:	f002 ff62 	bl	80041ba <HAL_UART_Transmit>
						molly_dev1_state = FINISH_MOLLY;
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <Dev1_Molly_App+0x300>)
 80012f8:	2208      	movs	r2, #8
 80012fa:	701a      	strb	r2, [r3, #0]
						break;
 80012fc:	e004      	b.n	8001308 <Dev1_Molly_App+0x264>
					}
					dev1_array_start = dev1_array_end;
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <Dev1_Molly_App+0x378>)
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <Dev1_Molly_App+0x360>)
 8001304:	801a      	strh	r2, [r3, #0]
				if(Dev1_Find_Word(":"))
 8001306:	e7ab      	b.n	8001260 <Dev1_Molly_App+0x1bc>
				}
			}
			break;
 8001308:	e09b      	b.n	8001442 <Dev1_Molly_App+0x39e>

		case GET_MSG_P3:
			brd_msg = Dev1_GetInfo();
 800130a:	f7ff fd45 	bl	8000d98 <Dev1_GetInfo>
 800130e:	4603      	mov	r3, r0
 8001310:	4a36      	ldr	r2, [pc, #216]	; (80013ec <Dev1_Molly_App+0x348>)
 8001312:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <Dev1_Molly_App+0x348>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b31      	cmp	r3, #49	; 0x31
 800131c:	f040 8090 	bne.w	8001440 <Dev1_Molly_App+0x39c>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 1, 0);
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <Dev1_Molly_App+0x348>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fdd5 	bl	8000ed8 <PrettySend_Skyla_Info_toPi>
				molly_dev1_state = FINISH_MOLLY;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <Dev1_Molly_App+0x300>)
 8001330:	2208      	movs	r2, #8
 8001332:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001334:	e084      	b.n	8001440 <Dev1_Molly_App+0x39c>

		case FINISH_MOLLY:
			HAL_GPIO_WritePin(DEV1_3_UART_RX_EN, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133c:	4838      	ldr	r0, [pc, #224]	; (8001420 <Dev1_Molly_App+0x37c>)
 800133e:	f002 f8ed 	bl	800351c <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, (uint8_t*)"molly complete \r\n", 17, 1000);
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	2211      	movs	r2, #17
 8001348:	4936      	ldr	r1, [pc, #216]	; (8001424 <Dev1_Molly_App+0x380>)
 800134a:	4819      	ldr	r0, [pc, #100]	; (80013b0 <Dev1_Molly_App+0x30c>)
 800134c:	f002 ff35 	bl	80041ba <HAL_UART_Transmit>

			Power_Cycle_Dev(NODE1);
 8001350:	2031      	movs	r0, #49	; 0x31
 8001352:	f7ff fe47 	bl	8000fe4 <Power_Cycle_Dev>
			while(!(Dev_Restarted(dev1_send_flag, dev1_array_start, 30)))
 8001356:	bf00      	nop
 8001358:	4b33      	ldr	r3, [pc, #204]	; (8001428 <Dev1_Molly_App+0x384>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4a29      	ldr	r2, [pc, #164]	; (8001404 <Dev1_Molly_App+0x360>)
 800135e:	8811      	ldrh	r1, [r2, #0]
 8001360:	221e      	movs	r2, #30
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe6c 	bl	8001040 <Dev_Restarted>
 8001368:	4603      	mov	r3, r0
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f1      	bne.n	8001358 <Dev1_Molly_App+0x2b4>
			{
			}

			molly_dev1_state = DEFAULT;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <Dev1_Molly_App+0x300>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <Dev1_Molly_App+0x388>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
			break;
 8001380:	e05f      	b.n	8001442 <Dev1_Molly_App+0x39e>

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| Received molly command. \r\n", 29, 1000);
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	221d      	movs	r2, #29
 8001388:	4929      	ldr	r1, [pc, #164]	; (8001430 <Dev1_Molly_App+0x38c>)
 800138a:	4809      	ldr	r0, [pc, #36]	; (80013b0 <Dev1_Molly_App+0x30c>)
 800138c:	f002 ff15 	bl	80041ba <HAL_UART_Transmit>
			HAL_GPIO_WritePin(DEV1_3_UART_RX_EN, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001396:	4822      	ldr	r0, [pc, #136]	; (8001420 <Dev1_Molly_App+0x37c>)
 8001398:	f002 f8c0 	bl	800351c <HAL_GPIO_WritePin>
			molly_dev1_state = FIND_DEBUG;
 800139c:	4b01      	ldr	r3, [pc, #4]	; (80013a4 <Dev1_Molly_App+0x300>)
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
			break;
 80013a2:	e04e      	b.n	8001442 <Dev1_Molly_App+0x39e>
 80013a4:	20000120 	.word	0x20000120
 80013a8:	08006848 	.word	0x08006848
 80013ac:	08006850 	.word	0x08006850
 80013b0:	200064b8 	.word	0x200064b8
 80013b4:	20006540 	.word	0x20006540
 80013b8:	20000128 	.word	0x20000128
 80013bc:	200014b0 	.word	0x200014b0
 80013c0:	08006860 	.word	0x08006860
 80013c4:	08006870 	.word	0x08006870
 80013c8:	080067d0 	.word	0x080067d0
 80013cc:	20002978 	.word	0x20002978
 80013d0:	08006878 	.word	0x08006878
 80013d4:	0800687c 	.word	0x0800687c
 80013d8:	200014b4 	.word	0x200014b4
 80013dc:	200015e2 	.word	0x200015e2
 80013e0:	200015e0 	.word	0x200015e0
 80013e4:	200015e1 	.word	0x200015e1
 80013e8:	08006884 	.word	0x08006884
 80013ec:	200015e4 	.word	0x200015e4
 80013f0:	08006888 	.word	0x08006888
 80013f4:	20002977 	.word	0x20002977
 80013f8:	0800688c 	.word	0x0800688c
 80013fc:	08006890 	.word	0x08006890
 8001400:	080068a0 	.word	0x080068a0
 8001404:	20002970 	.word	0x20002970
 8001408:	200015e8 	.word	0x200015e8
 800140c:	080068a4 	.word	0x080068a4
 8001410:	080068ac 	.word	0x080068ac
 8001414:	080068b4 	.word	0x080068b4
 8001418:	080068c4 	.word	0x080068c4
 800141c:	20002972 	.word	0x20002972
 8001420:	40020800 	.word	0x40020800
 8001424:	080068d8 	.word	0x080068d8
 8001428:	20002974 	.word	0x20002974
 800142c:	20000126 	.word	0x20000126
 8001430:	080068ec 	.word	0x080068ec
			break;
 8001434:	bf00      	nop
 8001436:	e004      	b.n	8001442 <Dev1_Molly_App+0x39e>
			break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <Dev1_Molly_App+0x39e>
			break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <Dev1_Molly_App+0x39e>
			break;
 8001440:	bf00      	nop
	}
}
 8001442:	bf00      	nop
 8001444:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <Dev2_Molly_App>:

void Dev2_Molly_App(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001452:	af00      	add	r7, sp, #0
	switch(molly_dev2_state)
 8001454:	4bbd      	ldr	r3, [pc, #756]	; (800174c <Dev2_Molly_App+0x300>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3b01      	subs	r3, #1
 800145a:	2b07      	cmp	r3, #7
 800145c:	f200 8165 	bhi.w	800172a <Dev2_Molly_App+0x2de>
 8001460:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <Dev2_Molly_App+0x1c>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	08001489 	.word	0x08001489
 800146c:	080014bb 	.word	0x080014bb
 8001470:	0800152f 	.word	0x0800152f
 8001474:	08001571 	.word	0x08001571
 8001478:	0800159d 	.word	0x0800159d
 800147c:	080015fb 	.word	0x080015fb
 8001480:	080016b3 	.word	0x080016b3
 8001484:	080016df 	.word	0x080016df
	{
		case FIND_DEBUG:
			if(Dev2_Find_Word("DEBUG"))
 8001488:	48b1      	ldr	r0, [pc, #708]	; (8001750 <Dev2_Molly_App+0x304>)
 800148a:	f7ff fc2a 	bl	8000ce2 <Dev2_Find_Word>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 81a3 	beq.w	80017dc <Dev2_Molly_App+0x390>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L|Found debug\n", 14, 1000);
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	220e      	movs	r2, #14
 800149c:	49ad      	ldr	r1, [pc, #692]	; (8001754 <Dev2_Molly_App+0x308>)
 800149e:	48ae      	ldr	r0, [pc, #696]	; (8001758 <Dev2_Molly_App+0x30c>)
 80014a0:	f002 fe8b 	bl	80041ba <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart5, (uint8_t*)"DEBUG", 5, 1000);
 80014a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a8:	2205      	movs	r2, #5
 80014aa:	49a9      	ldr	r1, [pc, #676]	; (8001750 <Dev2_Molly_App+0x304>)
 80014ac:	48ab      	ldr	r0, [pc, #684]	; (800175c <Dev2_Molly_App+0x310>)
 80014ae:	f002 fe84 	bl	80041ba <HAL_UART_Transmit>
				molly_dev2_state = GET_SETTINGS;
 80014b2:	4ba6      	ldr	r3, [pc, #664]	; (800174c <Dev2_Molly_App+0x300>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80014b8:	e190      	b.n	80017dc <Dev2_Molly_App+0x390>

		case GET_SETTINGS:
			memset(pi_uart_rxBuffer, 0, pi_buffer_size);
 80014ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80014be:	2100      	movs	r1, #0
 80014c0:	48a7      	ldr	r0, [pc, #668]	; (8001760 <Dev2_Molly_App+0x314>)
 80014c2:	f003 fecf 	bl	8005264 <memset>
			pi_array_end = 0;
 80014c6:	4ba7      	ldr	r3, [pc, #668]	; (8001764 <Dev2_Molly_App+0x318>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"send payload \r\n", 15, 1000);
 80014cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d0:	220f      	movs	r2, #15
 80014d2:	49a5      	ldr	r1, [pc, #660]	; (8001768 <Dev2_Molly_App+0x31c>)
 80014d4:	48a0      	ldr	r0, [pc, #640]	; (8001758 <Dev2_Molly_App+0x30c>)
 80014d6:	f002 fe70 	bl	80041ba <HAL_UART_Transmit>
			HAL_Delay(100);
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f001 fcc2 	bl	8002e64 <HAL_Delay>

			HAL_UART_Transmit(&huart1, (uint8_t*)"L| PL:", 6, 1000);
 80014e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e4:	2206      	movs	r2, #6
 80014e6:	49a1      	ldr	r1, [pc, #644]	; (800176c <Dev2_Molly_App+0x320>)
 80014e8:	489b      	ldr	r0, [pc, #620]	; (8001758 <Dev2_Molly_App+0x30c>)
 80014ea:	f002 fe66 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)(char*)pi_uart_rxBuffer, strlen((char*)pi_uart_rxBuffer), 1000);
 80014ee:	489c      	ldr	r0, [pc, #624]	; (8001760 <Dev2_Molly_App+0x314>)
 80014f0:	f7fe fe98 	bl	8000224 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fc:	4998      	ldr	r1, [pc, #608]	; (8001760 <Dev2_Molly_App+0x314>)
 80014fe:	4896      	ldr	r0, [pc, #600]	; (8001758 <Dev2_Molly_App+0x30c>)
 8001500:	f002 fe5b 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8001504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001508:	2201      	movs	r2, #1
 800150a:	4999      	ldr	r1, [pc, #612]	; (8001770 <Dev2_Molly_App+0x324>)
 800150c:	4892      	ldr	r0, [pc, #584]	; (8001758 <Dev2_Molly_App+0x30c>)
 800150e:	f002 fe54 	bl	80041ba <HAL_UART_Transmit>

			payload = pi_uart_rxBuffer;
 8001512:	4b98      	ldr	r3, [pc, #608]	; (8001774 <Dev2_Molly_App+0x328>)
 8001514:	4a92      	ldr	r2, [pc, #584]	; (8001760 <Dev2_Molly_App+0x314>)
 8001516:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart5, (uint8_t*)"$", 1, 500);
 8001518:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800151c:	2201      	movs	r2, #1
 800151e:	4996      	ldr	r1, [pc, #600]	; (8001778 <Dev2_Molly_App+0x32c>)
 8001520:	488e      	ldr	r0, [pc, #568]	; (800175c <Dev2_Molly_App+0x310>)
 8001522:	f002 fe4a 	bl	80041ba <HAL_UART_Transmit>
			molly_dev2_state = GET_MSG_P1;
 8001526:	4b89      	ldr	r3, [pc, #548]	; (800174c <Dev2_Molly_App+0x300>)
 8001528:	2203      	movs	r2, #3
 800152a:	701a      	strb	r2, [r3, #0]
			break;
 800152c:	e15d      	b.n	80017ea <Dev2_Molly_App+0x39e>

		case GET_MSG_P1:
			if(Dev2_Find_Word("NACK"))
 800152e:	4893      	ldr	r0, [pc, #588]	; (800177c <Dev2_Molly_App+0x330>)
 8001530:	f7ff fbd7 	bl	8000ce2 <Dev2_Find_Word>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8152 	beq.w	80017e0 <Dev2_Molly_App+0x394>
			{
				memset(getinfo_buffer, 0, getinfo_buffer_size);
 800153c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001540:	2100      	movs	r1, #0
 8001542:	488f      	ldr	r0, [pc, #572]	; (8001780 <Dev2_Molly_App+0x334>)
 8001544:	f003 fe8e 	bl	8005264 <memset>
				getinfo_buffer_head = 1;
 8001548:	4b8e      	ldr	r3, [pc, #568]	; (8001784 <Dev2_Molly_App+0x338>)
 800154a:	2201      	movs	r2, #1
 800154c:	801a      	strh	r2, [r3, #0]
				getinfo_fields_found_count = 0;
 800154e:	4b8e      	ldr	r3, [pc, #568]	; (8001788 <Dev2_Molly_App+0x33c>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
				getinfo_find_fields = 0;
 8001554:	4b8d      	ldr	r3, [pc, #564]	; (800178c <Dev2_Molly_App+0x340>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart5, (uint8_t*)"#", 1, 500);
 800155a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800155e:	2201      	movs	r2, #1
 8001560:	498b      	ldr	r1, [pc, #556]	; (8001790 <Dev2_Molly_App+0x344>)
 8001562:	487e      	ldr	r0, [pc, #504]	; (800175c <Dev2_Molly_App+0x310>)
 8001564:	f002 fe29 	bl	80041ba <HAL_UART_Transmit>
				molly_dev2_state = GET_MSG_P2;
 8001568:	4b78      	ldr	r3, [pc, #480]	; (800174c <Dev2_Molly_App+0x300>)
 800156a:	2204      	movs	r2, #4
 800156c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800156e:	e137      	b.n	80017e0 <Dev2_Molly_App+0x394>

		case GET_MSG_P2:
			brd_msg = Dev2_GetInfo();
 8001570:	f7ff fc62 	bl	8000e38 <Dev2_GetInfo>
 8001574:	4603      	mov	r3, r0
 8001576:	4a87      	ldr	r2, [pc, #540]	; (8001794 <Dev2_Molly_App+0x348>)
 8001578:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 800157a:	4b86      	ldr	r3, [pc, #536]	; (8001794 <Dev2_Molly_App+0x348>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b31      	cmp	r3, #49	; 0x31
 8001582:	f040 812f 	bne.w	80017e4 <Dev2_Molly_App+0x398>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 2, 1);
 8001586:	4b83      	ldr	r3, [pc, #524]	; (8001794 <Dev2_Molly_App+0x348>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fca2 	bl	8000ed8 <PrettySend_Skyla_Info_toPi>
				molly_dev2_state = MOLLY_P1;
 8001594:	4b6d      	ldr	r3, [pc, #436]	; (800174c <Dev2_Molly_App+0x300>)
 8001596:	2205      	movs	r2, #5
 8001598:	701a      	strb	r2, [r3, #0]
			}
			break;
 800159a:	e123      	b.n	80017e4 <Dev2_Molly_App+0x398>

		case MOLLY_P1:
			{
				if(Dev2_Find_Word("N"))
 800159c:	487e      	ldr	r0, [pc, #504]	; (8001798 <Dev2_Molly_App+0x34c>)
 800159e:	f7ff fba0 	bl	8000ce2 <Dev2_Find_Word>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <Dev2_Molly_App+0x162>
				{
					dev1_new_data = 0;
 80015a8:	4b7c      	ldr	r3, [pc, #496]	; (800179c <Dev2_Molly_App+0x350>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
				}

				char strC[500];
				char * settings_char = "$$";
 80015ae:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <Dev2_Molly_App+0x354>)
 80015b0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
				strncpy(strC, settings_char, 1);
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2201      	movs	r2, #1
 80015b8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 fef6 	bl	80053ae <strncpy>
				strC[1] = '\0';
 80015c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015ca:	2200      	movs	r2, #0
 80015cc:	705a      	strb	r2, [r3, #1]
				strcat(strC, (char*)payload);
 80015ce:	4b69      	ldr	r3, [pc, #420]	; (8001774 <Dev2_Molly_App+0x328>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 feda 	bl	8005390 <strcat>
				HAL_UART_Transmit(&huart5, (uint8_t*) strC, strlen(strC), 50);
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fe20 	bl	8000224 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	1d39      	adds	r1, r7, #4
 80015ea:	2332      	movs	r3, #50	; 0x32
 80015ec:	485b      	ldr	r0, [pc, #364]	; (800175c <Dev2_Molly_App+0x310>)
 80015ee:	f002 fde4 	bl	80041ba <HAL_UART_Transmit>
				molly_dev2_state = MOLLY_P2;
 80015f2:	4b56      	ldr	r3, [pc, #344]	; (800174c <Dev2_Molly_App+0x300>)
 80015f4:	2206      	movs	r2, #6
 80015f6:	701a      	strb	r2, [r3, #0]
				break;
 80015f8:	e0f7      	b.n	80017ea <Dev2_Molly_App+0x39e>
			}


		case MOLLY_P2:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| in molly \n", 13, 500);
 80015fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015fe:	220d      	movs	r2, #13
 8001600:	4968      	ldr	r1, [pc, #416]	; (80017a4 <Dev2_Molly_App+0x358>)
 8001602:	4855      	ldr	r0, [pc, #340]	; (8001758 <Dev2_Molly_App+0x30c>)
 8001604:	f002 fdd9 	bl	80041ba <HAL_UART_Transmit>
			while(1)
			{
				if(Dev2_Find_Word(":"))
 8001608:	4867      	ldr	r0, [pc, #412]	; (80017a8 <Dev2_Molly_App+0x35c>)
 800160a:	f7ff fb6a 	bl	8000ce2 <Dev2_Find_Word>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f9      	beq.n	8001608 <Dev2_Molly_App+0x1bc>
				{
					char * curr_string = (char*)&dev2_uart_rxBuffer[dev2_array_start+1];
 8001614:	4b65      	ldr	r3, [pc, #404]	; (80017ac <Dev2_Molly_App+0x360>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a65      	ldr	r2, [pc, #404]	; (80017b0 <Dev2_Molly_App+0x364>)
 800161c:	4413      	add	r3, r2
 800161e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
					char * find_pass = strstr(curr_string, "PASS");
 8001622:	4964      	ldr	r1, [pc, #400]	; (80017b4 <Dev2_Molly_App+0x368>)
 8001624:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001628:	f003 fed4 	bl	80053d4 <strstr>
 800162c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					char * find_fail = strstr(curr_string, "FAIL");
 8001630:	4961      	ldr	r1, [pc, #388]	; (80017b8 <Dev2_Molly_App+0x36c>)
 8001632:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001636:	f003 fecd 	bl	80053d4 <strstr>
 800163a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
					if(find_pass != NULL)
 800163e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001642:	2b00      	cmp	r3, #0
 8001644:	d020      	beq.n	8001688 <Dev2_Molly_App+0x23c>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD PASS \n", 15, 500);
 8001646:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800164a:	220f      	movs	r2, #15
 800164c:	495b      	ldr	r1, [pc, #364]	; (80017bc <Dev2_Molly_App+0x370>)
 800164e:	4842      	ldr	r0, [pc, #264]	; (8001758 <Dev2_Molly_App+0x30c>)
 8001650:	f002 fdb3 	bl	80041ba <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart5, (uint8_t*)"#", 1, 500);
 8001654:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001658:	2201      	movs	r2, #1
 800165a:	494d      	ldr	r1, [pc, #308]	; (8001790 <Dev2_Molly_App+0x344>)
 800165c:	483f      	ldr	r0, [pc, #252]	; (800175c <Dev2_Molly_App+0x310>)
 800165e:	f002 fdac 	bl	80041ba <HAL_UART_Transmit>
						memset(getinfo_buffer, 0, getinfo_buffer_size);
 8001662:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001666:	2100      	movs	r1, #0
 8001668:	4845      	ldr	r0, [pc, #276]	; (8001780 <Dev2_Molly_App+0x334>)
 800166a:	f003 fdfb 	bl	8005264 <memset>
						getinfo_buffer_head = 1;
 800166e:	4b45      	ldr	r3, [pc, #276]	; (8001784 <Dev2_Molly_App+0x338>)
 8001670:	2201      	movs	r2, #1
 8001672:	801a      	strh	r2, [r3, #0]
						getinfo_fields_found_count = 0;
 8001674:	4b44      	ldr	r3, [pc, #272]	; (8001788 <Dev2_Molly_App+0x33c>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
						getinfo_find_fields = 0;
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <Dev2_Molly_App+0x340>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
						molly_dev2_state = GET_MSG_P3;
 8001680:	4b32      	ldr	r3, [pc, #200]	; (800174c <Dev2_Molly_App+0x300>)
 8001682:	2207      	movs	r2, #7
 8001684:	701a      	strb	r2, [r3, #0]
						break;
 8001686:	e013      	b.n	80016b0 <Dev2_Molly_App+0x264>
					}
					else if(find_fail != NULL)
 8001688:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00a      	beq.n	80016a6 <Dev2_Molly_App+0x25a>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD FAIL!!! \n", 18, 500);
 8001690:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001694:	2212      	movs	r2, #18
 8001696:	494a      	ldr	r1, [pc, #296]	; (80017c0 <Dev2_Molly_App+0x374>)
 8001698:	482f      	ldr	r0, [pc, #188]	; (8001758 <Dev2_Molly_App+0x30c>)
 800169a:	f002 fd8e 	bl	80041ba <HAL_UART_Transmit>
						molly_dev2_state = FINISH_MOLLY;
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <Dev2_Molly_App+0x300>)
 80016a0:	2208      	movs	r2, #8
 80016a2:	701a      	strb	r2, [r3, #0]
						break;
 80016a4:	e004      	b.n	80016b0 <Dev2_Molly_App+0x264>
					}
					dev2_array_start = dev2_array_end;
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <Dev2_Molly_App+0x378>)
 80016a8:	881a      	ldrh	r2, [r3, #0]
 80016aa:	4b40      	ldr	r3, [pc, #256]	; (80017ac <Dev2_Molly_App+0x360>)
 80016ac:	801a      	strh	r2, [r3, #0]
				if(Dev2_Find_Word(":"))
 80016ae:	e7ab      	b.n	8001608 <Dev2_Molly_App+0x1bc>
				}
			}
			break;
 80016b0:	e09b      	b.n	80017ea <Dev2_Molly_App+0x39e>

		case GET_MSG_P3:
			{
				brd_msg = Dev2_GetInfo();
 80016b2:	f7ff fbc1 	bl	8000e38 <Dev2_GetInfo>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a36      	ldr	r2, [pc, #216]	; (8001794 <Dev2_Molly_App+0x348>)
 80016ba:	6013      	str	r3, [r2, #0]
				if(brd_msg[0] == '1')
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <Dev2_Molly_App+0x348>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b31      	cmp	r3, #49	; 0x31
 80016c4:	f040 8090 	bne.w	80017e8 <Dev2_Molly_App+0x39c>
				{
					PrettySend_Skyla_Info_toPi(brd_msg, 2, 0);
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <Dev2_Molly_App+0x348>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2200      	movs	r2, #0
 80016ce:	2102      	movs	r1, #2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fc01 	bl	8000ed8 <PrettySend_Skyla_Info_toPi>
					molly_dev2_state = FINISH_MOLLY;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <Dev2_Molly_App+0x300>)
 80016d8:	2208      	movs	r2, #8
 80016da:	701a      	strb	r2, [r3, #0]
				}
				break;
 80016dc:	e084      	b.n	80017e8 <Dev2_Molly_App+0x39c>
			}


		case FINISH_MOLLY:
			{
				HAL_GPIO_WritePin(DEV2_4_UART_RX_EN, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e4:	4838      	ldr	r0, [pc, #224]	; (80017c8 <Dev2_Molly_App+0x37c>)
 80016e6:	f001 ff19 	bl	800351c <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, (uint8_t*)"molly complete \r\n", 17, 1000);
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	2211      	movs	r2, #17
 80016f0:	4936      	ldr	r1, [pc, #216]	; (80017cc <Dev2_Molly_App+0x380>)
 80016f2:	4819      	ldr	r0, [pc, #100]	; (8001758 <Dev2_Molly_App+0x30c>)
 80016f4:	f002 fd61 	bl	80041ba <HAL_UART_Transmit>
				Power_Cycle_Dev(NODE2);
 80016f8:	2032      	movs	r0, #50	; 0x32
 80016fa:	f7ff fc73 	bl	8000fe4 <Power_Cycle_Dev>
				while(!(Dev_Restarted(dev2_send_flag, dev2_array_start, 30)))
 80016fe:	bf00      	nop
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <Dev2_Molly_App+0x384>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	4a29      	ldr	r2, [pc, #164]	; (80017ac <Dev2_Molly_App+0x360>)
 8001706:	8811      	ldrh	r1, [r2, #0]
 8001708:	221e      	movs	r2, #30
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc98 	bl	8001040 <Dev_Restarted>
 8001710:	4603      	mov	r3, r0
 8001712:	f083 0301 	eor.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f1      	bne.n	8001700 <Dev2_Molly_App+0x2b4>
				{
				}

				molly_dev2_state = DEFAULT;
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <Dev2_Molly_App+0x300>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
				application_state = MONITOR;
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <Dev2_Molly_App+0x388>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
				break;
 8001728:	e05f      	b.n	80017ea <Dev2_Molly_App+0x39e>
			}
		default:
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L| Received molly command. \r\n", 29, 1000);
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	221d      	movs	r2, #29
 8001730:	4929      	ldr	r1, [pc, #164]	; (80017d8 <Dev2_Molly_App+0x38c>)
 8001732:	4809      	ldr	r0, [pc, #36]	; (8001758 <Dev2_Molly_App+0x30c>)
 8001734:	f002 fd41 	bl	80041ba <HAL_UART_Transmit>
				HAL_GPIO_WritePin(DEV2_4_UART_RX_EN, GPIO_PIN_SET);
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173e:	4822      	ldr	r0, [pc, #136]	; (80017c8 <Dev2_Molly_App+0x37c>)
 8001740:	f001 feec 	bl	800351c <HAL_GPIO_WritePin>
				molly_dev2_state = FIND_DEBUG;
 8001744:	4b01      	ldr	r3, [pc, #4]	; (800174c <Dev2_Molly_App+0x300>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
				break;
 800174a:	e04e      	b.n	80017ea <Dev2_Molly_App+0x39e>
 800174c:	20000121 	.word	0x20000121
 8001750:	08006848 	.word	0x08006848
 8001754:	08006850 	.word	0x08006850
 8001758:	200064b8 	.word	0x200064b8
 800175c:	20006474 	.word	0x20006474
 8001760:	20000128 	.word	0x20000128
 8001764:	200014b0 	.word	0x200014b0
 8001768:	08006860 	.word	0x08006860
 800176c:	08006870 	.word	0x08006870
 8001770:	080067d0 	.word	0x080067d0
 8001774:	20002978 	.word	0x20002978
 8001778:	08006878 	.word	0x08006878
 800177c:	0800687c 	.word	0x0800687c
 8001780:	200014b4 	.word	0x200014b4
 8001784:	200015e2 	.word	0x200015e2
 8001788:	200015e0 	.word	0x200015e0
 800178c:	200015e1 	.word	0x200015e1
 8001790:	08006884 	.word	0x08006884
 8001794:	200015e4 	.word	0x200015e4
 8001798:	08006888 	.word	0x08006888
 800179c:	20002977 	.word	0x20002977
 80017a0:	0800688c 	.word	0x0800688c
 80017a4:	08006890 	.word	0x08006890
 80017a8:	080068a0 	.word	0x080068a0
 80017ac:	20005094 	.word	0x20005094
 80017b0:	20003d0c 	.word	0x20003d0c
 80017b4:	080068a4 	.word	0x080068a4
 80017b8:	080068ac 	.word	0x080068ac
 80017bc:	080068b4 	.word	0x080068b4
 80017c0:	080068c4 	.word	0x080068c4
 80017c4:	20005096 	.word	0x20005096
 80017c8:	40020400 	.word	0x40020400
 80017cc:	080068d8 	.word	0x080068d8
 80017d0:	20005098 	.word	0x20005098
 80017d4:	20000126 	.word	0x20000126
 80017d8:	080068ec 	.word	0x080068ec
			break;
 80017dc:	bf00      	nop
 80017de:	e004      	b.n	80017ea <Dev2_Molly_App+0x39e>
			break;
 80017e0:	bf00      	nop
 80017e2:	e002      	b.n	80017ea <Dev2_Molly_App+0x39e>
			break;
 80017e4:	bf00      	nop
 80017e6:	e000      	b.n	80017ea <Dev2_Molly_App+0x39e>
				break;
 80017e8:	bf00      	nop
			}

	}
}
 80017ea:	bf00      	nop
 80017ec:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <Get_Pi_UART_Data_Last>:


char Get_Pi_UART_Data_Last(uint16_t num_data)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
	char pi_selected_data = ' ';
 80017fe:	2320      	movs	r3, #32
 8001800:	737b      	strb	r3, [r7, #13]
	num_data -= 0;

	uint16_t arr_data_index = pi_array_end;
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <Get_Pi_UART_Data_Last+0x50>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	81fb      	strh	r3, [r7, #14]
	if(pi_array_end < num_data)
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <Get_Pi_UART_Data_Last+0x50>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	88fa      	ldrh	r2, [r7, #6]
 800180e:	429a      	cmp	r2, r3
 8001810:	d909      	bls.n	8001826 <Get_Pi_UART_Data_Last+0x32>
	{
		arr_data_index = pi_buffer_size - (num_data - pi_array_end);
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <Get_Pi_UART_Data_Last+0x50>)
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	b29b      	uxth	r3, r3
 800181c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001820:	3308      	adds	r3, #8
 8001822:	81fb      	strh	r3, [r7, #14]
 8001824:	e003      	b.n	800182e <Get_Pi_UART_Data_Last+0x3a>
	} else {
		arr_data_index -= num_data;
 8001826:	89fa      	ldrh	r2, [r7, #14]
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	81fb      	strh	r3, [r7, #14]
	}

	pi_selected_data = pi_uart_rxBuffer[arr_data_index];
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	4a05      	ldr	r2, [pc, #20]	; (8001848 <Get_Pi_UART_Data_Last+0x54>)
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	737b      	strb	r3, [r7, #13]
	return pi_selected_data;
 8001836:	7b7b      	ldrb	r3, [r7, #13]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	200014b0 	.word	0x200014b0
 8001848:	20000128 	.word	0x20000128

0800184c <Reset_Programmer_Relay>:

void Reset_Programmer_Relay(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DEV1_3_VCC_EN, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	4810      	ldr	r0, [pc, #64]	; (8001898 <Reset_Programmer_Relay+0x4c>)
 8001858:	f001 fe60 	bl	800351c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEV2_4_VCC_EN, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001862:	480e      	ldr	r0, [pc, #56]	; (800189c <Reset_Programmer_Relay+0x50>)
 8001864:	f001 fe5a 	bl	800351c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DEV1_UPDI_EN, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <Reset_Programmer_Relay+0x4c>)
 8001870:	f001 fe54 	bl	800351c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEV2_UPDI_EN, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4808      	ldr	r0, [pc, #32]	; (800189c <Reset_Programmer_Relay+0x50>)
 800187a:	f001 fe4f 	bl	800351c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEV3_UPDI_EN, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <Reset_Programmer_Relay+0x4c>)
 8001886:	f001 fe49 	bl	800351c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEV4_UPDI_EN, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	4803      	ldr	r0, [pc, #12]	; (800189c <Reset_Programmer_Relay+0x50>)
 8001890:	f001 fe44 	bl	800351c <HAL_GPIO_WritePin>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40020800 	.word	0x40020800
 800189c:	40020400 	.word	0x40020400

080018a0 <Dev1_Program_App>:

//Dev1 Program
void Dev1_Program_App(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	switch(program_dev1_state)
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <Dev1_Program_App+0x78>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	d112      	bne.n	80018d2 <Dev1_Program_App+0x32>
	{
		case FINISH_PROGRAM:
			//reset relays 
			HAL_GPIO_WritePin(DEV1_3_VCC_EN, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b2:	481a      	ldr	r0, [pc, #104]	; (800191c <Dev1_Program_App+0x7c>)
 80018b4:	f001 fe32 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV1_UPDI_EN, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018be:	4817      	ldr	r0, [pc, #92]	; (800191c <Dev1_Program_App+0x7c>)
 80018c0:	f001 fe2c 	bl	800351c <HAL_GPIO_WritePin>

			program_dev1_state = DEFAULT;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <Dev1_Program_App+0x78>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <Dev1_Program_App+0x80>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
			break;
 80018d0:	e020      	b.n	8001914 <Dev1_Program_App+0x74>
		default:
			Reset_Programmer_Relay();
 80018d2:	f7ff ffbb 	bl	800184c <Reset_Programmer_Relay>
			HAL_GPIO_WritePin(DEV1_3_VCC_EN, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018dc:	480f      	ldr	r0, [pc, #60]	; (800191c <Dev1_Program_App+0x7c>)
 80018de:	f001 fe1d 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV1_UPDI_EN, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <Dev1_Program_App+0x7c>)
 80018ea:	f001 fe17 	bl	800351c <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart1, (uint8_t*)"Ready to program Sklya1\r\n", 25, 1000);
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	2219      	movs	r2, #25
 80018f4:	490b      	ldr	r1, [pc, #44]	; (8001924 <Dev1_Program_App+0x84>)
 80018f6:	480c      	ldr	r0, [pc, #48]	; (8001928 <Dev1_Program_App+0x88>)
 80018f8:	f002 fc5f 	bl	80041ba <HAL_UART_Transmit>
			HAL_Delay(100);
 80018fc:	2064      	movs	r0, #100	; 0x64
 80018fe:	f001 fab1 	bl	8002e64 <HAL_Delay>
			
			while(pi_uart_rxData != PROCESS_FIN)
 8001902:	bf00      	nop
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <Dev1_Program_App+0x8c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b60      	cmp	r3, #96	; 0x60
 800190a:	d1fb      	bne.n	8001904 <Dev1_Program_App+0x64>
			{
			}
			
			program_dev1_state = FINISH_PROGRAM;
 800190c:	4b02      	ldr	r3, [pc, #8]	; (8001918 <Dev1_Program_App+0x78>)
 800190e:	2209      	movs	r2, #9
 8001910:	701a      	strb	r2, [r3, #0]
			break;
 8001912:	bf00      	nop
	}
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000122 	.word	0x20000122
 800191c:	40020800 	.word	0x40020800
 8001920:	20000126 	.word	0x20000126
 8001924:	0800690c 	.word	0x0800690c
 8001928:	200064b8 	.word	0x200064b8
 800192c:	200014b2 	.word	0x200014b2

08001930 <Dev2_Program_App>:

void Dev2_Program_App(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	switch(program_dev2_state)
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <Dev2_Program_App+0x74>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b09      	cmp	r3, #9
 800193a:	d111      	bne.n	8001960 <Dev2_Program_App+0x30>
	{
		case FINISH_PROGRAM:
			//reset relays 
			HAL_GPIO_WritePin(DEV2_4_VCC_EN, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001942:	4819      	ldr	r0, [pc, #100]	; (80019a8 <Dev2_Program_App+0x78>)
 8001944:	f001 fdea 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV2_UPDI_EN, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	4816      	ldr	r0, [pc, #88]	; (80019a8 <Dev2_Program_App+0x78>)
 800194e:	f001 fde5 	bl	800351c <HAL_GPIO_WritePin>

			program_dev2_state = DEFAULT;
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <Dev2_Program_App+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <Dev2_Program_App+0x7c>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
			break;
 800195e:	e01f      	b.n	80019a0 <Dev2_Program_App+0x70>
		default:
			Reset_Programmer_Relay();
 8001960:	f7ff ff74 	bl	800184c <Reset_Programmer_Relay>
			HAL_GPIO_WritePin(DEV2_4_VCC_EN, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800196a:	480f      	ldr	r0, [pc, #60]	; (80019a8 <Dev2_Program_App+0x78>)
 800196c:	f001 fdd6 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV2_UPDI_EN, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2140      	movs	r1, #64	; 0x40
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <Dev2_Program_App+0x78>)
 8001976:	f001 fdd1 	bl	800351c <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart1, (uint8_t*)"Ready to program Sklya2\r\n", 25, 1000);
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	2219      	movs	r2, #25
 8001980:	490b      	ldr	r1, [pc, #44]	; (80019b0 <Dev2_Program_App+0x80>)
 8001982:	480c      	ldr	r0, [pc, #48]	; (80019b4 <Dev2_Program_App+0x84>)
 8001984:	f002 fc19 	bl	80041ba <HAL_UART_Transmit>
			HAL_Delay(100);
 8001988:	2064      	movs	r0, #100	; 0x64
 800198a:	f001 fa6b 	bl	8002e64 <HAL_Delay>
			
			while(pi_uart_rxData != PROCESS_FIN)
 800198e:	bf00      	nop
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <Dev2_Program_App+0x88>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b60      	cmp	r3, #96	; 0x60
 8001996:	d1fb      	bne.n	8001990 <Dev2_Program_App+0x60>
			{
			}
			
			program_dev2_state = FINISH_PROGRAM;
 8001998:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <Dev2_Program_App+0x74>)
 800199a:	2209      	movs	r2, #9
 800199c:	701a      	strb	r2, [r3, #0]
			break;
 800199e:	bf00      	nop
	}
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000123 	.word	0x20000123
 80019a8:	40020400 	.word	0x40020400
 80019ac:	20000126 	.word	0x20000126
 80019b0:	08006928 	.word	0x08006928
 80019b4:	200064b8 	.word	0x200064b8
 80019b8:	200014b2 	.word	0x200014b2

080019bc <Dev3_Program_App>:

void Dev3_Program_App(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	switch(program_dev3_state)
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <Dev3_Program_App+0x78>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d112      	bne.n	80019ee <Dev3_Program_App+0x32>
	{
		case FINISH_PROGRAM:
			//reset relays 
			HAL_GPIO_WritePin(DEV1_3_VCC_EN, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ce:	481a      	ldr	r0, [pc, #104]	; (8001a38 <Dev3_Program_App+0x7c>)
 80019d0:	f001 fda4 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV3_UPDI_EN, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019da:	4817      	ldr	r0, [pc, #92]	; (8001a38 <Dev3_Program_App+0x7c>)
 80019dc:	f001 fd9e 	bl	800351c <HAL_GPIO_WritePin>

			program_dev3_state = DEFAULT;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <Dev3_Program_App+0x78>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <Dev3_Program_App+0x80>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
			break;
 80019ec:	e020      	b.n	8001a30 <Dev3_Program_App+0x74>
		default:
			Reset_Programmer_Relay();
 80019ee:	f7ff ff2d 	bl	800184c <Reset_Programmer_Relay>
			HAL_GPIO_WritePin(DEV1_3_VCC_EN, GPIO_PIN_SET);
 80019f2:	2201      	movs	r2, #1
 80019f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f8:	480f      	ldr	r0, [pc, #60]	; (8001a38 <Dev3_Program_App+0x7c>)
 80019fa:	f001 fd8f 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV3_UPDI_EN, GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <Dev3_Program_App+0x7c>)
 8001a06:	f001 fd89 	bl	800351c <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart1, (uint8_t*)"Ready to program Creed1\r\n", 25, 1000);
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	2219      	movs	r2, #25
 8001a10:	490b      	ldr	r1, [pc, #44]	; (8001a40 <Dev3_Program_App+0x84>)
 8001a12:	480c      	ldr	r0, [pc, #48]	; (8001a44 <Dev3_Program_App+0x88>)
 8001a14:	f002 fbd1 	bl	80041ba <HAL_UART_Transmit>
			HAL_Delay(100);
 8001a18:	2064      	movs	r0, #100	; 0x64
 8001a1a:	f001 fa23 	bl	8002e64 <HAL_Delay>
			
			while(pi_uart_rxData != PROCESS_FIN)
 8001a1e:	bf00      	nop
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <Dev3_Program_App+0x8c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b60      	cmp	r3, #96	; 0x60
 8001a26:	d1fb      	bne.n	8001a20 <Dev3_Program_App+0x64>
			{
			}
			
			program_dev3_state = FINISH_PROGRAM;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <Dev3_Program_App+0x78>)
 8001a2a:	2209      	movs	r2, #9
 8001a2c:	701a      	strb	r2, [r3, #0]
			break;
 8001a2e:	bf00      	nop
	}
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000124 	.word	0x20000124
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	20000126 	.word	0x20000126
 8001a40:	08006944 	.word	0x08006944
 8001a44:	200064b8 	.word	0x200064b8
 8001a48:	200014b2 	.word	0x200014b2

08001a4c <Dev4_Program_App>:

void Dev4_Program_App(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	switch(program_dev4_state)
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <Dev4_Program_App+0x74>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d111      	bne.n	8001a7c <Dev4_Program_App+0x30>
	{
		case FINISH_PROGRAM:
			//reset relays 
			HAL_GPIO_WritePin(DEV2_4_VCC_EN, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5e:	4819      	ldr	r0, [pc, #100]	; (8001ac4 <Dev4_Program_App+0x78>)
 8001a60:	f001 fd5c 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV4_UPDI_EN, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <Dev4_Program_App+0x78>)
 8001a6a:	f001 fd57 	bl	800351c <HAL_GPIO_WritePin>

			program_dev4_state = DEFAULT;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <Dev4_Program_App+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <Dev4_Program_App+0x7c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
			break;
 8001a7a:	e01f      	b.n	8001abc <Dev4_Program_App+0x70>
		default:
			Reset_Programmer_Relay();
 8001a7c:	f7ff fee6 	bl	800184c <Reset_Programmer_Relay>
			HAL_GPIO_WritePin(DEV2_4_VCC_EN, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a86:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <Dev4_Program_App+0x78>)
 8001a88:	f001 fd48 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV4_UPDI_EN, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <Dev4_Program_App+0x78>)
 8001a92:	f001 fd43 	bl	800351c <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart1, (uint8_t*)"Ready to program Creed2\r\n", 25, 1000);
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	2219      	movs	r2, #25
 8001a9c:	490b      	ldr	r1, [pc, #44]	; (8001acc <Dev4_Program_App+0x80>)
 8001a9e:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <Dev4_Program_App+0x84>)
 8001aa0:	f002 fb8b 	bl	80041ba <HAL_UART_Transmit>
			HAL_Delay(100);
 8001aa4:	2064      	movs	r0, #100	; 0x64
 8001aa6:	f001 f9dd 	bl	8002e64 <HAL_Delay>
			
			while(pi_uart_rxData != PROCESS_FIN)
 8001aaa:	bf00      	nop
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <Dev4_Program_App+0x88>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b60      	cmp	r3, #96	; 0x60
 8001ab2:	d1fb      	bne.n	8001aac <Dev4_Program_App+0x60>
			{
			}
			
			program_dev4_state = FINISH_PROGRAM;
 8001ab4:	4b02      	ldr	r3, [pc, #8]	; (8001ac0 <Dev4_Program_App+0x74>)
 8001ab6:	2209      	movs	r2, #9
 8001ab8:	701a      	strb	r2, [r3, #0]
			break;
 8001aba:	bf00      	nop
	}
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000125 	.word	0x20000125
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	20000126 	.word	0x20000126
 8001acc:	08006960 	.word	0x08006960
 8001ad0:	200064b8 	.word	0x200064b8
 8001ad4:	200014b2 	.word	0x200014b2

08001ad8 <Set_Device_Power_App>:




void Set_Device_Power_App(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001ade:	2064      	movs	r0, #100	; 0x64
 8001ae0:	f001 f9c0 	bl	8002e64 <HAL_Delay>
	char dev = (uint8_t) Get_Pi_UART_Data_Last(2);
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f7ff fe85 	bl	80017f4 <Get_Pi_UART_Data_Last>
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	char state = (uint8_t) Get_Pi_UART_Data_Last(1);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fe80 	bl	80017f4 <Get_Pi_UART_Data_Last>
 8001af4:	4603      	mov	r3, r0
 8001af6:	71bb      	strb	r3, [r7, #6]

	switch(state)
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	2b32      	cmp	r3, #50	; 0x32
 8001afc:	d00f      	beq.n	8001b1e <Set_Device_Power_App+0x46>
 8001afe:	2b32      	cmp	r3, #50	; 0x32
 8001b00:	dc12      	bgt.n	8001b28 <Set_Device_Power_App+0x50>
 8001b02:	2b30      	cmp	r3, #48	; 0x30
 8001b04:	d006      	beq.n	8001b14 <Set_Device_Power_App+0x3c>
 8001b06:	2b31      	cmp	r3, #49	; 0x31
 8001b08:	d10e      	bne.n	8001b28 <Set_Device_Power_App+0x50>
	{
		case ON:
			Power_Dev_ON(dev);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 f88d 	bl	8001c2c <Power_Dev_ON>
			break;
 8001b12:	e00d      	b.n	8001b30 <Set_Device_Power_App+0x58>
	
		case OFF:
			Power_Dev_OFF(dev);
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f820 	bl	8001b5c <Power_Dev_OFF>
			break;
 8001b1c:	e008      	b.n	8001b30 <Set_Device_Power_App+0x58>

		case CYCLE:
			Power_Cycle_Dev(dev);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fa5f 	bl	8000fe4 <Power_Cycle_Dev>
			break;
 8001b26:	e003      	b.n	8001b30 <Set_Device_Power_App+0x58>

		default:
			printf("Invalid state selected\n");
 8001b28:	4808      	ldr	r0, [pc, #32]	; (8001b4c <Set_Device_Power_App+0x74>)
 8001b2a:	f003 fc29 	bl	8005380 <puts>
			break;
 8001b2e:	bf00      	nop
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)"Power Set \n", sizeof("Power Set "), 500);
 8001b30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b34:	220b      	movs	r2, #11
 8001b36:	4906      	ldr	r1, [pc, #24]	; (8001b50 <Set_Device_Power_App+0x78>)
 8001b38:	4806      	ldr	r0, [pc, #24]	; (8001b54 <Set_Device_Power_App+0x7c>)
 8001b3a:	f002 fb3e 	bl	80041ba <HAL_UART_Transmit>
	application_state = DEFAULT;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <Set_Device_Power_App+0x80>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	0800697c 	.word	0x0800697c
 8001b50:	08006994 	.word	0x08006994
 8001b54:	200064b8 	.word	0x200064b8
 8001b58:	20000126 	.word	0x20000126

08001b5c <Power_Dev_OFF>:

void Power_Dev_OFF(uint8_t dev)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	switch(dev)
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b32      	cmp	r3, #50	; 0x32
 8001b6a:	d02c      	beq.n	8001bc6 <Power_Dev_OFF+0x6a>
 8001b6c:	2b32      	cmp	r3, #50	; 0x32
 8001b6e:	dc49      	bgt.n	8001c04 <Power_Dev_OFF+0xa8>
 8001b70:	2b30      	cmp	r3, #48	; 0x30
 8001b72:	d002      	beq.n	8001b7a <Power_Dev_OFF+0x1e>
 8001b74:	2b31      	cmp	r3, #49	; 0x31
 8001b76:	d007      	beq.n	8001b88 <Power_Dev_OFF+0x2c>
 8001b78:	e044      	b.n	8001c04 <Power_Dev_OFF+0xa8>
	{
		case BOTH:
			Power_Dev_OFF(NODE1);
 8001b7a:	2031      	movs	r0, #49	; 0x31
 8001b7c:	f7ff ffee 	bl	8001b5c <Power_Dev_OFF>
			Power_Dev_OFF(NODE2);
 8001b80:	2032      	movs	r0, #50	; 0x32
 8001b82:	f7ff ffeb 	bl	8001b5c <Power_Dev_OFF>
			break;
 8001b86:	e041      	b.n	8001c0c <Power_Dev_OFF+0xb0>
		case NODE1:
			printf("Powering off Node1\n");
 8001b88:	4822      	ldr	r0, [pc, #136]	; (8001c14 <Power_Dev_OFF+0xb8>)
 8001b8a:	f003 fbf9 	bl	8005380 <puts>
			HAL_GPIO_WritePin(DEV1_3_SEN_PWR ,GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b94:	4820      	ldr	r0, [pc, #128]	; (8001c18 <Power_Dev_OFF+0xbc>)
 8001b96:	f001 fcc1 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV1_3_UART_RX_EN ,GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba0:	481e      	ldr	r0, [pc, #120]	; (8001c1c <Power_Dev_OFF+0xc0>)
 8001ba2:	f001 fcbb 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV1_3_LTCH_EN ,GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2120      	movs	r1, #32
 8001baa:	481b      	ldr	r0, [pc, #108]	; (8001c18 <Power_Dev_OFF+0xbc>)
 8001bac:	f001 fcb6 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV1_PWR_EN ,GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2140      	movs	r1, #64	; 0x40
 8001bb4:	4819      	ldr	r0, [pc, #100]	; (8001c1c <Power_Dev_OFF+0xc0>)
 8001bb6:	f001 fcb1 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV3_PWR_EN ,GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	4817      	ldr	r0, [pc, #92]	; (8001c1c <Power_Dev_OFF+0xc0>)
 8001bc0:	f001 fcac 	bl	800351c <HAL_GPIO_WritePin>
			break;
 8001bc4:	e022      	b.n	8001c0c <Power_Dev_OFF+0xb0>
		case NODE2:
			printf("Powering off Node2\n");
 8001bc6:	4816      	ldr	r0, [pc, #88]	; (8001c20 <Power_Dev_OFF+0xc4>)
 8001bc8:	f003 fbda 	bl	8005380 <puts>
			HAL_GPIO_WritePin(DEV2_4_SEN_PWR ,GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2101      	movs	r1, #1
 8001bd0:	4814      	ldr	r0, [pc, #80]	; (8001c24 <Power_Dev_OFF+0xc8>)
 8001bd2:	f001 fca3 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV2_4_UART_RX_EN ,GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bdc:	4811      	ldr	r0, [pc, #68]	; (8001c24 <Power_Dev_OFF+0xc8>)
 8001bde:	f001 fc9d 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV2_4_LTCH_EN ,GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be8:	480b      	ldr	r0, [pc, #44]	; (8001c18 <Power_Dev_OFF+0xbc>)
 8001bea:	f001 fc97 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV2_PWR_EN ,GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	480c      	ldr	r0, [pc, #48]	; (8001c24 <Power_Dev_OFF+0xc8>)
 8001bf4:	f001 fc92 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV4_PWR_EN ,GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2120      	movs	r1, #32
 8001bfc:	4809      	ldr	r0, [pc, #36]	; (8001c24 <Power_Dev_OFF+0xc8>)
 8001bfe:	f001 fc8d 	bl	800351c <HAL_GPIO_WritePin>
			break;
 8001c02:	e003      	b.n	8001c0c <Power_Dev_OFF+0xb0>
		default:
			printf("Invalid node selected\n");
 8001c04:	4808      	ldr	r0, [pc, #32]	; (8001c28 <Power_Dev_OFF+0xcc>)
 8001c06:	f003 fbbb 	bl	8005380 <puts>
			break;
 8001c0a:	bf00      	nop
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	080069a0 	.word	0x080069a0
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	080069b4 	.word	0x080069b4
 8001c24:	40020400 	.word	0x40020400
 8001c28:	080069c8 	.word	0x080069c8

08001c2c <Power_Dev_ON>:

void Power_Dev_ON(uint8_t dev)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	switch(dev)
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b32      	cmp	r3, #50	; 0x32
 8001c3a:	d046      	beq.n	8001cca <Power_Dev_ON+0x9e>
 8001c3c:	2b32      	cmp	r3, #50	; 0x32
 8001c3e:	dc7d      	bgt.n	8001d3c <Power_Dev_ON+0x110>
 8001c40:	2b30      	cmp	r3, #48	; 0x30
 8001c42:	d002      	beq.n	8001c4a <Power_Dev_ON+0x1e>
 8001c44:	2b31      	cmp	r3, #49	; 0x31
 8001c46:	d007      	beq.n	8001c58 <Power_Dev_ON+0x2c>
 8001c48:	e078      	b.n	8001d3c <Power_Dev_ON+0x110>
	{
		case BOTH:
			Power_Dev_OFF(NODE1);
 8001c4a:	2031      	movs	r0, #49	; 0x31
 8001c4c:	f7ff ff86 	bl	8001b5c <Power_Dev_OFF>
			Power_Dev_OFF(NODE2);
 8001c50:	2032      	movs	r0, #50	; 0x32
 8001c52:	f7ff ff83 	bl	8001b5c <Power_Dev_OFF>
			break;
 8001c56:	e078      	b.n	8001d4a <Power_Dev_ON+0x11e>
		case NODE1:
			{
				HAL_GPIO_WritePin(DEV1_3_SEN_PWR, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c5e:	483d      	ldr	r0, [pc, #244]	; (8001d54 <Power_Dev_ON+0x128>)
 8001c60:	f001 fc5c 	bl	800351c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DEV1_3_UART_RX_EN, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c6a:	483b      	ldr	r0, [pc, #236]	; (8001d58 <Power_Dev_ON+0x12c>)
 8001c6c:	f001 fc56 	bl	800351c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DEV1_3_LTCH_EN ,GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2120      	movs	r1, #32
 8001c74:	4837      	ldr	r0, [pc, #220]	; (8001d54 <Power_Dev_ON+0x128>)
 8001c76:	f001 fc51 	bl	800351c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DEV1_PWR_EN, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2140      	movs	r1, #64	; 0x40
 8001c7e:	4836      	ldr	r0, [pc, #216]	; (8001d58 <Power_Dev_ON+0x12c>)
 8001c80:	f001 fc4c 	bl	800351c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DEV3_PWR_EN, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	4833      	ldr	r0, [pc, #204]	; (8001d58 <Power_Dev_ON+0x12c>)
 8001c8a:	f001 fc47 	bl	800351c <HAL_GPIO_WritePin>
				bool dev1_on = false;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73bb      	strb	r3, [r7, #14]
				dev1_on = Dev_Restarted(dev1_send_flag, dev1_array_start, 30);
 8001c92:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <Power_Dev_ON+0x130>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	4a32      	ldr	r2, [pc, #200]	; (8001d60 <Power_Dev_ON+0x134>)
 8001c98:	8811      	ldrh	r1, [r2, #0]
 8001c9a:	221e      	movs	r2, #30
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f9cf 	bl	8001040 <Dev_Restarted>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	73bb      	strb	r3, [r7, #14]
				if(dev1_on)
 8001ca6:	7bbb      	ldrb	r3, [r7, #14]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d04b      	beq.n	8001d44 <Power_Dev_ON+0x118>
				{
					HAL_UART_Transmit(&huart1, (uint8_t*)"Dev1 ON\n", 8, 500);
 8001cac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	492c      	ldr	r1, [pc, #176]	; (8001d64 <Power_Dev_ON+0x138>)
 8001cb4:	482c      	ldr	r0, [pc, #176]	; (8001d68 <Power_Dev_ON+0x13c>)
 8001cb6:	f002 fa80 	bl	80041ba <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)"Dev1 ON\n", 8, 500);
 8001cba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	4928      	ldr	r1, [pc, #160]	; (8001d64 <Power_Dev_ON+0x138>)
 8001cc2:	482a      	ldr	r0, [pc, #168]	; (8001d6c <Power_Dev_ON+0x140>)
 8001cc4:	f002 fa79 	bl	80041ba <HAL_UART_Transmit>
				}
				break;
 8001cc8:	e03c      	b.n	8001d44 <Power_Dev_ON+0x118>
			}

		case NODE2:
			{
				HAL_GPIO_WritePin(DEV2_4_SEN_PWR, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4828      	ldr	r0, [pc, #160]	; (8001d70 <Power_Dev_ON+0x144>)
 8001cd0:	f001 fc24 	bl	800351c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DEV2_4_UART_RX_EN, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cda:	4825      	ldr	r0, [pc, #148]	; (8001d70 <Power_Dev_ON+0x144>)
 8001cdc:	f001 fc1e 	bl	800351c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DEV2_4_LTCH_EN ,GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce6:	481b      	ldr	r0, [pc, #108]	; (8001d54 <Power_Dev_ON+0x128>)
 8001ce8:	f001 fc18 	bl	800351c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DEV2_PWR_EN, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2110      	movs	r1, #16
 8001cf0:	481f      	ldr	r0, [pc, #124]	; (8001d70 <Power_Dev_ON+0x144>)
 8001cf2:	f001 fc13 	bl	800351c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DEV4_PWR_EN, GPIO_PIN_SET);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	481d      	ldr	r0, [pc, #116]	; (8001d70 <Power_Dev_ON+0x144>)
 8001cfc:	f001 fc0e 	bl	800351c <HAL_GPIO_WritePin>
				bool dev2_on = false;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
				dev2_on = Dev_Restarted(dev2_send_flag, dev2_array_start, 30);
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <Power_Dev_ON+0x148>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <Power_Dev_ON+0x14c>)
 8001d0a:	8811      	ldrh	r1, [r2, #0]
 8001d0c:	221e      	movs	r2, #30
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f996 	bl	8001040 <Dev_Restarted>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]
				if(dev2_on)
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d014      	beq.n	8001d48 <Power_Dev_ON+0x11c>
				{
					HAL_UART_Transmit(&huart1, (uint8_t*)"Dev2 ON\n", 8, 500);
 8001d1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d22:	2208      	movs	r2, #8
 8001d24:	4915      	ldr	r1, [pc, #84]	; (8001d7c <Power_Dev_ON+0x150>)
 8001d26:	4810      	ldr	r0, [pc, #64]	; (8001d68 <Power_Dev_ON+0x13c>)
 8001d28:	f002 fa47 	bl	80041ba <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)"Dev2 ON\n", 8, 500);
 8001d2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d30:	2208      	movs	r2, #8
 8001d32:	4912      	ldr	r1, [pc, #72]	; (8001d7c <Power_Dev_ON+0x150>)
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <Power_Dev_ON+0x140>)
 8001d36:	f002 fa40 	bl	80041ba <HAL_UART_Transmit>
				}
				break;
 8001d3a:	e005      	b.n	8001d48 <Power_Dev_ON+0x11c>
			}

		default:
			{
				printf("Invalid node selected\n");
 8001d3c:	4810      	ldr	r0, [pc, #64]	; (8001d80 <Power_Dev_ON+0x154>)
 8001d3e:	f003 fb1f 	bl	8005380 <puts>
				break;
 8001d42:	e002      	b.n	8001d4a <Power_Dev_ON+0x11e>
				break;
 8001d44:	bf00      	nop
 8001d46:	e000      	b.n	8001d4a <Power_Dev_ON+0x11e>
				break;
 8001d48:	bf00      	nop
			}
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	20002974 	.word	0x20002974
 8001d60:	20002970 	.word	0x20002970
 8001d64:	080069e0 	.word	0x080069e0
 8001d68:	200064b8 	.word	0x200064b8
 8001d6c:	200064fc 	.word	0x200064fc
 8001d70:	40020400 	.word	0x40020400
 8001d74:	20005098 	.word	0x20005098
 8001d78:	20005094 	.word	0x20005094
 8001d7c:	080069ec 	.word	0x080069ec
 8001d80:	080069c8 	.word	0x080069c8

08001d84 <Set_Sensor>:


void Set_Sensor(uint8_t dev, uint8_t selected_sensor)
{
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
	if (selected_sensor > (NUM_SENS_AVAILABLE-1))
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d903      	bls.n	8001da2 <Set_Sensor+0x1e>
	{
		printf("Invalid Sensor Selected\n");
 8001d9a:	485e      	ldr	r0, [pc, #376]	; (8001f14 <Set_Sensor+0x190>)
 8001d9c:	f003 faf0 	bl	8005380 <puts>
 8001da0:	e0b4      	b.n	8001f0c <Set_Sensor+0x188>
		return;
	}

	char sensorName[NUM_SENS_AVAILABLE][10] = {
 8001da2:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <Set_Sensor+0x194>)
 8001da4:	f107 0408 	add.w	r4, r7, #8
 8001da8:	461d      	mov	r5, r3
 8001daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001db6:	e884 0003 	stmia.w	r4, {r0, r1}
		    "3x TMP107",
		    "DS18B20",
		    "SHT30"
	};

	switch(dev)
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2b32      	cmp	r3, #50	; 0x32
 8001dbe:	d059      	beq.n	8001e74 <Set_Sensor+0xf0>
 8001dc0:	2b32      	cmp	r3, #50	; 0x32
 8001dc2:	f300 809f 	bgt.w	8001f04 <Set_Sensor+0x180>
 8001dc6:	2b30      	cmp	r3, #48	; 0x30
 8001dc8:	d002      	beq.n	8001dd0 <Set_Sensor+0x4c>
 8001dca:	2b31      	cmp	r3, #49	; 0x31
 8001dcc:	d00b      	beq.n	8001de6 <Set_Sensor+0x62>
 8001dce:	e099      	b.n	8001f04 <Set_Sensor+0x180>
	{
		case BOTH:
			Set_Sensor(NODE1, selected_sensor);
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	2031      	movs	r0, #49	; 0x31
 8001dd6:	f7ff ffd5 	bl	8001d84 <Set_Sensor>
			Set_Sensor(NODE2, selected_sensor);
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	2032      	movs	r0, #50	; 0x32
 8001de0:	f7ff ffd0 	bl	8001d84 <Set_Sensor>
			break;
 8001de4:	e092      	b.n	8001f0c <Set_Sensor+0x188>
		case NODE1:
			HAL_GPIO_WritePin(DEV1_3_LTCH_EN, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2120      	movs	r1, #32
 8001dea:	484c      	ldr	r0, [pc, #304]	; (8001f1c <Set_Sensor+0x198>)
 8001dec:	f001 fb96 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV1_3_MUX_INH, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2108      	movs	r1, #8
 8001df4:	484a      	ldr	r0, [pc, #296]	; (8001f20 <Set_Sensor+0x19c>)
 8001df6:	f001 fb91 	bl	800351c <HAL_GPIO_WritePin>

			Power_Dev_OFF(NODE1);
 8001dfa:	2031      	movs	r0, #49	; 0x31
 8001dfc:	f7ff feae 	bl	8001b5c <Power_Dev_OFF>

			HAL_GPIO_WritePin(DEV1_3_SEL_A, SENS_SEL_A_STATE(selected_sensor));
 8001e00:	79bb      	ldrb	r3, [r7, #6]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4844      	ldr	r0, [pc, #272]	; (8001f20 <Set_Sensor+0x19c>)
 8001e0e:	f001 fb85 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV1_3_SEL_B, SENS_SEL_B_STATE(selected_sensor));
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	2102      	movs	r1, #2
 8001e26:	483e      	ldr	r0, [pc, #248]	; (8001f20 <Set_Sensor+0x19c>)
 8001e28:	f001 fb78 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV1_3_SEL_C, SENS_SEL_C_STATE(selected_sensor));
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf14      	ite	ne
 8001e36:	2301      	movne	r3, #1
 8001e38:	2300      	moveq	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2104      	movs	r1, #4
 8001e40:	4837      	ldr	r0, [pc, #220]	; (8001f20 <Set_Sensor+0x19c>)
 8001e42:	f001 fb6b 	bl	800351c <HAL_GPIO_WritePin>

			printf("Node 1 %s sensor selected\n", sensorName[selected_sensor]);
 8001e46:	79ba      	ldrb	r2, [r7, #6]
 8001e48:	f107 0108 	add.w	r1, r7, #8
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	440b      	add	r3, r1
 8001e56:	4619      	mov	r1, r3
 8001e58:	4832      	ldr	r0, [pc, #200]	; (8001f24 <Set_Sensor+0x1a0>)
 8001e5a:	f003 fa0b 	bl	8005274 <iprintf>

			HAL_GPIO_WritePin(DEV1_3_LTCH_EN, GPIO_PIN_SET);
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2120      	movs	r1, #32
 8001e62:	482e      	ldr	r0, [pc, #184]	; (8001f1c <Set_Sensor+0x198>)
 8001e64:	f001 fb5a 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV1_3_MUX_INH, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	482c      	ldr	r0, [pc, #176]	; (8001f20 <Set_Sensor+0x19c>)
 8001e6e:	f001 fb55 	bl	800351c <HAL_GPIO_WritePin>
			break;
 8001e72:	e04b      	b.n	8001f0c <Set_Sensor+0x188>
		case NODE2:
			HAL_GPIO_WritePin(DEV2_4_LTCH_EN, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e7a:	4828      	ldr	r0, [pc, #160]	; (8001f1c <Set_Sensor+0x198>)
 8001e7c:	f001 fb4e 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV2_4_MUX_INH, GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2110      	movs	r1, #16
 8001e84:	4825      	ldr	r0, [pc, #148]	; (8001f1c <Set_Sensor+0x198>)
 8001e86:	f001 fb49 	bl	800351c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(DEV2_4_SEL_A, SENS_SEL_A_STATE(selected_sensor));
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	2110      	movs	r1, #16
 8001e96:	4822      	ldr	r0, [pc, #136]	; (8001f20 <Set_Sensor+0x19c>)
 8001e98:	f001 fb40 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV2_4_SEL_B, SENS_SEL_B_STATE(selected_sensor));
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf14      	ite	ne
 8001ea6:	2301      	movne	r3, #1
 8001ea8:	2300      	moveq	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb2:	481d      	ldr	r0, [pc, #116]	; (8001f28 <Set_Sensor+0x1a4>)
 8001eb4:	f001 fb32 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV2_4_SEL_C, SENS_SEL_C_STATE(selected_sensor));
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ece:	4816      	ldr	r0, [pc, #88]	; (8001f28 <Set_Sensor+0x1a4>)
 8001ed0:	f001 fb24 	bl	800351c <HAL_GPIO_WritePin>

			printf("Node 2 %s sensor selected\n", sensorName[selected_sensor]);
 8001ed4:	79ba      	ldrb	r2, [r7, #6]
 8001ed6:	f107 0108 	add.w	r1, r7, #8
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	440b      	add	r3, r1
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4811      	ldr	r0, [pc, #68]	; (8001f2c <Set_Sensor+0x1a8>)
 8001ee8:	f003 f9c4 	bl	8005274 <iprintf>

			HAL_GPIO_WritePin(DEV2_4_LTCH_EN, GPIO_PIN_SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef2:	480a      	ldr	r0, [pc, #40]	; (8001f1c <Set_Sensor+0x198>)
 8001ef4:	f001 fb12 	bl	800351c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEV2_4_MUX_INH, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2110      	movs	r1, #16
 8001efc:	4807      	ldr	r0, [pc, #28]	; (8001f1c <Set_Sensor+0x198>)
 8001efe:	f001 fb0d 	bl	800351c <HAL_GPIO_WritePin>
			break;
 8001f02:	e003      	b.n	8001f0c <Set_Sensor+0x188>
		default:
			printf("Invalid Node Selected\n");
 8001f04:	480a      	ldr	r0, [pc, #40]	; (8001f30 <Set_Sensor+0x1ac>)
 8001f06:	f003 fa3b 	bl	8005380 <puts>
			break;
 8001f0a:	bf00      	nop
	}
}
 8001f0c:	3730      	adds	r7, #48	; 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bdb0      	pop	{r4, r5, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	080069f8 	.word	0x080069f8
 8001f18:	08006a60 	.word	0x08006a60
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020800 	.word	0x40020800
 8001f24:	08006a10 	.word	0x08006a10
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	08006a2c 	.word	0x08006a2c
 8001f30:	08006a48 	.word	0x08006a48

08001f34 <Sensor_Select_App>:

void Sensor_Select_App(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001f3a:	2064      	movs	r0, #100	; 0x64
 8001f3c:	f000 ff92 	bl	8002e64 <HAL_Delay>
	char dev = (uint8_t) Get_Pi_UART_Data_Last(2);
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7ff fc57 	bl	80017f4 <Get_Pi_UART_Data_Last>
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
	char sens_num = (uint8_t) Get_Pi_UART_Data_Last(1);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff fc52 	bl	80017f4 <Get_Pi_UART_Data_Last>
 8001f50:	4603      	mov	r3, r0
 8001f52:	71bb      	strb	r3, [r7, #6]

	Set_Sensor(dev, sens_num);
 8001f54:	79ba      	ldrb	r2, [r7, #6]
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff12 	bl	8001d84 <Set_Sensor>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Sensor Selected \n", sizeof("Sensor Selected\n"),500);
 8001f60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f64:	2211      	movs	r2, #17
 8001f66:	4905      	ldr	r1, [pc, #20]	; (8001f7c <Sensor_Select_App+0x48>)
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <Sensor_Select_App+0x4c>)
 8001f6a:	f002 f926 	bl	80041ba <HAL_UART_Transmit>

	application_state = DEFAULT;
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <Sensor_Select_App+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	08006a88 	.word	0x08006a88
 8001f80:	200064b8 	.word	0x200064b8
 8001f84:	20000126 	.word	0x20000126

08001f88 <Set_Charger_State>:

void Set_Charger_State(uint8_t dev, uint8_t charger_state)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	460a      	mov	r2, r1
 8001f92:	71fb      	strb	r3, [r7, #7]
 8001f94:	4613      	mov	r3, r2
 8001f96:	71bb      	strb	r3, [r7, #6]
	switch(dev)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	2b32      	cmp	r3, #50	; 0x32
 8001f9c:	d019      	beq.n	8001fd2 <Set_Charger_State+0x4a>
 8001f9e:	2b32      	cmp	r3, #50	; 0x32
 8001fa0:	dc1f      	bgt.n	8001fe2 <Set_Charger_State+0x5a>
 8001fa2:	2b30      	cmp	r3, #48	; 0x30
 8001fa4:	d002      	beq.n	8001fac <Set_Charger_State+0x24>
 8001fa6:	2b31      	cmp	r3, #49	; 0x31
 8001fa8:	d00b      	beq.n	8001fc2 <Set_Charger_State+0x3a>
 8001faa:	e01a      	b.n	8001fe2 <Set_Charger_State+0x5a>
	{
		case BOTH:
			Set_Charger_State(NODE1, charger_state);
 8001fac:	79bb      	ldrb	r3, [r7, #6]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	2031      	movs	r0, #49	; 0x31
 8001fb2:	f7ff ffe9 	bl	8001f88 <Set_Charger_State>
			Set_Charger_State(NODE2, charger_state);
 8001fb6:	79bb      	ldrb	r3, [r7, #6]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2032      	movs	r0, #50	; 0x32
 8001fbc:	f7ff ffe4 	bl	8001f88 <Set_Charger_State>
			break;
 8001fc0:	e01a      	b.n	8001ff8 <Set_Charger_State+0x70>
		case NODE1:
			HAL_GPIO_WritePin(DEV1_CHG_EN, (GPIO_PinState)charger_state);
 8001fc2:	79bb      	ldrb	r3, [r7, #6]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fca:	480d      	ldr	r0, [pc, #52]	; (8002000 <Set_Charger_State+0x78>)
 8001fcc:	f001 faa6 	bl	800351c <HAL_GPIO_WritePin>
			break;
 8001fd0:	e012      	b.n	8001ff8 <Set_Charger_State+0x70>
		case NODE2:
			HAL_GPIO_WritePin(DEV1_CHG_EN, (GPIO_PinState)charger_state);
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fda:	4809      	ldr	r0, [pc, #36]	; (8002000 <Set_Charger_State+0x78>)
 8001fdc:	f001 fa9e 	bl	800351c <HAL_GPIO_WritePin>
			break;
 8001fe0:	e00a      	b.n	8001ff8 <Set_Charger_State+0x70>
		default:
			HAL_UART_Transmit(&huart2, (uint8_t*)("Invalid device selected"), sizeof(("Invalid device selected")), 500);
 8001fe2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fe6:	2218      	movs	r2, #24
 8001fe8:	4906      	ldr	r1, [pc, #24]	; (8002004 <Set_Charger_State+0x7c>)
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <Set_Charger_State+0x80>)
 8001fec:	f002 f8e5 	bl	80041ba <HAL_UART_Transmit>
			printf("Invalid device selected");
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <Set_Charger_State+0x7c>)
 8001ff2:	f003 f93f 	bl	8005274 <iprintf>
	}	
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40020800 	.word	0x40020800
 8002004:	08006a9c 	.word	0x08006a9c
 8002008:	200064fc 	.word	0x200064fc

0800200c <Set_Charger_App>:


void Set_Charger_App(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8002012:	2064      	movs	r0, #100	; 0x64
 8002014:	f000 ff26 	bl	8002e64 <HAL_Delay>

	uint8_t dev = (uint8_t) Get_Pi_UART_Data_Last(2);
 8002018:	2002      	movs	r0, #2
 800201a:	f7ff fbeb 	bl	80017f4 <Get_Pi_UART_Data_Last>
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
	uint8_t chg_state = ((uint8_t) Get_Pi_UART_Data_Last(1));
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff fbe6 	bl	80017f4 <Get_Pi_UART_Data_Last>
 8002028:	4603      	mov	r3, r0
 800202a:	71bb      	strb	r3, [r7, #6]

	Set_Charger_State(dev, chg_state);
 800202c:	79ba      	ldrb	r2, [r7, #6]
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ffa8 	bl	8001f88 <Set_Charger_State>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Charger State Set \n", sizeof("Charger State Set\n"), 500);
 8002038:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800203c:	2213      	movs	r2, #19
 800203e:	4905      	ldr	r1, [pc, #20]	; (8002054 <Set_Charger_App+0x48>)
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <Set_Charger_App+0x4c>)
 8002042:	f002 f8ba 	bl	80041ba <HAL_UART_Transmit>

	application_state = DEFAULT;
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <Set_Charger_App+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	08006ab4 	.word	0x08006ab4
 8002058:	200064b8 	.word	0x200064b8
 800205c:	20000126 	.word	0x20000126

08002060 <Dev1_Check_Flag>:


void Dev1_Check_Flag(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
	if(dev1_send_flag != dev1_array_start){
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <Dev1_Check_Flag+0xa0>)
 8002068:	881a      	ldrh	r2, [r3, #0]
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <Dev1_Check_Flag+0xa4>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d042      	beq.n	80020f8 <Dev1_Check_Flag+0x98>
		uint16_t num_bytes;
		if(dev1_send_flag > dev1_array_start){
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <Dev1_Check_Flag+0xa0>)
 8002074:	881a      	ldrh	r2, [r3, #0]
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <Dev1_Check_Flag+0xa4>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d918      	bls.n	80020b0 <Dev1_Check_Flag+0x50>
			num_bytes = dev1_send_flag - dev1_array_start;
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <Dev1_Check_Flag+0xa0>)
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <Dev1_Check_Flag+0xa4>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS1|", 4, 500);
 800208a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800208e:	2204      	movs	r2, #4
 8002090:	491d      	ldr	r1, [pc, #116]	; (8002108 <Dev1_Check_Flag+0xa8>)
 8002092:	481e      	ldr	r0, [pc, #120]	; (800210c <Dev1_Check_Flag+0xac>)
 8002094:	f002 f891 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev1_uart_rxBuffer[dev1_array_start+1], num_bytes, 500);
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <Dev1_Check_Flag+0xa4>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <Dev1_Check_Flag+0xb0>)
 80020a0:	1899      	adds	r1, r3, r2
 80020a2:	88fa      	ldrh	r2, [r7, #6]
 80020a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020a8:	4818      	ldr	r0, [pc, #96]	; (800210c <Dev1_Check_Flag+0xac>)
 80020aa:	f002 f886 	bl	80041ba <HAL_UART_Transmit>
 80020ae:	e01f      	b.n	80020f0 <Dev1_Check_Flag+0x90>
		}
		else
		{
			num_bytes = dev1_uart_buffer_size - dev1_array_start;
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <Dev1_Check_Flag+0xa4>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80020b8:	3308      	adds	r3, #8
 80020ba:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS1|", 4, 500);
 80020bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020c0:	2204      	movs	r2, #4
 80020c2:	4911      	ldr	r1, [pc, #68]	; (8002108 <Dev1_Check_Flag+0xa8>)
 80020c4:	4811      	ldr	r0, [pc, #68]	; (800210c <Dev1_Check_Flag+0xac>)
 80020c6:	f002 f878 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev1_uart_rxBuffer[dev1_array_start+1], num_bytes, 500);
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <Dev1_Check_Flag+0xa4>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <Dev1_Check_Flag+0xb0>)
 80020d2:	1899      	adds	r1, r3, r2
 80020d4:	88fa      	ldrh	r2, [r7, #6]
 80020d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020da:	480c      	ldr	r0, [pc, #48]	; (800210c <Dev1_Check_Flag+0xac>)
 80020dc:	f002 f86d 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev1_uart_rxBuffer[0], dev1_send_flag, 500);
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <Dev1_Check_Flag+0xa0>)
 80020e2:	881a      	ldrh	r2, [r3, #0]
 80020e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020e8:	4909      	ldr	r1, [pc, #36]	; (8002110 <Dev1_Check_Flag+0xb0>)
 80020ea:	4808      	ldr	r0, [pc, #32]	; (800210c <Dev1_Check_Flag+0xac>)
 80020ec:	f002 f865 	bl	80041ba <HAL_UART_Transmit>
		}
		dev1_array_start = dev1_send_flag;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <Dev1_Check_Flag+0xa0>)
 80020f2:	881a      	ldrh	r2, [r3, #0]
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <Dev1_Check_Flag+0xa4>)
 80020f6:	801a      	strh	r2, [r3, #0]
	}
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20002974 	.word	0x20002974
 8002104:	20002970 	.word	0x20002970
 8002108:	08006ac8 	.word	0x08006ac8
 800210c:	200064b8 	.word	0x200064b8
 8002110:	200015e8 	.word	0x200015e8

08002114 <Dev3_Check_Flag>:

void Dev3_Check_Flag(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
	if(dev3_send_flag != dev3_array_start){
 800211a:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <Dev3_Check_Flag+0xa0>)
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <Dev3_Check_Flag+0xa4>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d042      	beq.n	80021ac <Dev3_Check_Flag+0x98>
		uint16_t num_bytes;
		if(dev3_send_flag > dev3_array_start){
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <Dev3_Check_Flag+0xa0>)
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <Dev3_Check_Flag+0xa4>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d918      	bls.n	8002164 <Dev3_Check_Flag+0x50>
			num_bytes = dev3_send_flag - dev3_array_start;
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <Dev3_Check_Flag+0xa0>)
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <Dev3_Check_Flag+0xa4>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC1|", 4, 500);
 800213e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002142:	2204      	movs	r2, #4
 8002144:	491d      	ldr	r1, [pc, #116]	; (80021bc <Dev3_Check_Flag+0xa8>)
 8002146:	481e      	ldr	r0, [pc, #120]	; (80021c0 <Dev3_Check_Flag+0xac>)
 8002148:	f002 f837 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev3_uart_rxBuffer[dev3_array_start+1], num_bytes, 500);
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <Dev3_Check_Flag+0xa4>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <Dev3_Check_Flag+0xb0>)
 8002154:	1899      	adds	r1, r3, r2
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800215c:	4818      	ldr	r0, [pc, #96]	; (80021c0 <Dev3_Check_Flag+0xac>)
 800215e:	f002 f82c 	bl	80041ba <HAL_UART_Transmit>
 8002162:	e01f      	b.n	80021a4 <Dev3_Check_Flag+0x90>
		}
		else
		{
			num_bytes = dev3_uart_buffer_size - dev3_array_start;
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <Dev3_Check_Flag+0xa4>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800216c:	3308      	adds	r3, #8
 800216e:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC1|", 4, 500);
 8002170:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002174:	2204      	movs	r2, #4
 8002176:	4911      	ldr	r1, [pc, #68]	; (80021bc <Dev3_Check_Flag+0xa8>)
 8002178:	4811      	ldr	r0, [pc, #68]	; (80021c0 <Dev3_Check_Flag+0xac>)
 800217a:	f002 f81e 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev3_uart_rxBuffer[dev3_array_start+1], num_bytes, 500);
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <Dev3_Check_Flag+0xa4>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <Dev3_Check_Flag+0xb0>)
 8002186:	1899      	adds	r1, r3, r2
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800218e:	480c      	ldr	r0, [pc, #48]	; (80021c0 <Dev3_Check_Flag+0xac>)
 8002190:	f002 f813 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev3_uart_rxBuffer[0], dev3_send_flag, 500);
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <Dev3_Check_Flag+0xa0>)
 8002196:	881a      	ldrh	r2, [r3, #0]
 8002198:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800219c:	4909      	ldr	r1, [pc, #36]	; (80021c4 <Dev3_Check_Flag+0xb0>)
 800219e:	4808      	ldr	r0, [pc, #32]	; (80021c0 <Dev3_Check_Flag+0xac>)
 80021a0:	f002 f80b 	bl	80041ba <HAL_UART_Transmit>
		}
		dev3_array_start = dev3_send_flag;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <Dev3_Check_Flag+0xa0>)
 80021a6:	881a      	ldrh	r2, [r3, #0]
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <Dev3_Check_Flag+0xa4>)
 80021aa:	801a      	strh	r2, [r3, #0]
	}
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20003d08 	.word	0x20003d08
 80021b8:	20003d04 	.word	0x20003d04
 80021bc:	08006ad0 	.word	0x08006ad0
 80021c0:	200064b8 	.word	0x200064b8
 80021c4:	2000297c 	.word	0x2000297c

080021c8 <Dev2_Check_Flag>:

void Dev2_Check_Flag(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
	if(dev2_send_flag != dev2_array_start){
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <Dev2_Check_Flag+0xa0>)
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <Dev2_Check_Flag+0xa4>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d042      	beq.n	8002260 <Dev2_Check_Flag+0x98>
		uint16_t num_bytes;
		if(dev2_send_flag > dev2_array_start){
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <Dev2_Check_Flag+0xa0>)
 80021dc:	881a      	ldrh	r2, [r3, #0]
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <Dev2_Check_Flag+0xa4>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d918      	bls.n	8002218 <Dev2_Check_Flag+0x50>
			num_bytes = dev2_send_flag - dev2_array_start;
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <Dev2_Check_Flag+0xa0>)
 80021e8:	881a      	ldrh	r2, [r3, #0]
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <Dev2_Check_Flag+0xa4>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS2|", 4, 500);
 80021f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021f6:	2204      	movs	r2, #4
 80021f8:	491d      	ldr	r1, [pc, #116]	; (8002270 <Dev2_Check_Flag+0xa8>)
 80021fa:	481e      	ldr	r0, [pc, #120]	; (8002274 <Dev2_Check_Flag+0xac>)
 80021fc:	f001 ffdd 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev2_uart_rxBuffer[dev2_array_start+1], num_bytes, 500);
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <Dev2_Check_Flag+0xa4>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <Dev2_Check_Flag+0xb0>)
 8002208:	1899      	adds	r1, r3, r2
 800220a:	88fa      	ldrh	r2, [r7, #6]
 800220c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002210:	4818      	ldr	r0, [pc, #96]	; (8002274 <Dev2_Check_Flag+0xac>)
 8002212:	f001 ffd2 	bl	80041ba <HAL_UART_Transmit>
 8002216:	e01f      	b.n	8002258 <Dev2_Check_Flag+0x90>
		}
		else
		{
			num_bytes = dev2_uart_buffer_size - dev2_array_start;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <Dev2_Check_Flag+0xa4>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002220:	3308      	adds	r3, #8
 8002222:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS2|", 4, 500);
 8002224:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002228:	2204      	movs	r2, #4
 800222a:	4911      	ldr	r1, [pc, #68]	; (8002270 <Dev2_Check_Flag+0xa8>)
 800222c:	4811      	ldr	r0, [pc, #68]	; (8002274 <Dev2_Check_Flag+0xac>)
 800222e:	f001 ffc4 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev2_uart_rxBuffer[dev2_array_start+1], num_bytes, 500);
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <Dev2_Check_Flag+0xa4>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <Dev2_Check_Flag+0xb0>)
 800223a:	1899      	adds	r1, r3, r2
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002242:	480c      	ldr	r0, [pc, #48]	; (8002274 <Dev2_Check_Flag+0xac>)
 8002244:	f001 ffb9 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev2_uart_rxBuffer[0], dev2_send_flag, 500);
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <Dev2_Check_Flag+0xa0>)
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002250:	4909      	ldr	r1, [pc, #36]	; (8002278 <Dev2_Check_Flag+0xb0>)
 8002252:	4808      	ldr	r0, [pc, #32]	; (8002274 <Dev2_Check_Flag+0xac>)
 8002254:	f001 ffb1 	bl	80041ba <HAL_UART_Transmit>
		}
		dev2_array_start = dev2_send_flag;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <Dev2_Check_Flag+0xa0>)
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <Dev2_Check_Flag+0xa4>)
 800225e:	801a      	strh	r2, [r3, #0]
	}
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20005098 	.word	0x20005098
 800226c:	20005094 	.word	0x20005094
 8002270:	08006ad8 	.word	0x08006ad8
 8002274:	200064b8 	.word	0x200064b8
 8002278:	20003d0c 	.word	0x20003d0c

0800227c <Dev4_Check_Flag>:

void Dev4_Check_Flag(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
	if(dev4_send_flag != dev4_array_start){
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <Dev4_Check_Flag+0xa0>)
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <Dev4_Check_Flag+0xa4>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d042      	beq.n	8002314 <Dev4_Check_Flag+0x98>
		uint16_t num_bytes;
		if(dev4_send_flag > dev4_array_start){
 800228e:	4b23      	ldr	r3, [pc, #140]	; (800231c <Dev4_Check_Flag+0xa0>)
 8002290:	881a      	ldrh	r2, [r3, #0]
 8002292:	4b23      	ldr	r3, [pc, #140]	; (8002320 <Dev4_Check_Flag+0xa4>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d918      	bls.n	80022cc <Dev4_Check_Flag+0x50>
			num_bytes = dev4_send_flag - dev4_array_start;
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <Dev4_Check_Flag+0xa0>)
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <Dev4_Check_Flag+0xa4>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC2|", 4, 500);
 80022a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022aa:	2204      	movs	r2, #4
 80022ac:	491d      	ldr	r1, [pc, #116]	; (8002324 <Dev4_Check_Flag+0xa8>)
 80022ae:	481e      	ldr	r0, [pc, #120]	; (8002328 <Dev4_Check_Flag+0xac>)
 80022b0:	f001 ff83 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev4_uart_rxBuffer[dev4_array_start+1], num_bytes, 500);
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <Dev4_Check_Flag+0xa4>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <Dev4_Check_Flag+0xb0>)
 80022bc:	1899      	adds	r1, r3, r2
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022c4:	4818      	ldr	r0, [pc, #96]	; (8002328 <Dev4_Check_Flag+0xac>)
 80022c6:	f001 ff78 	bl	80041ba <HAL_UART_Transmit>
 80022ca:	e01f      	b.n	800230c <Dev4_Check_Flag+0x90>
		}
		else
		{
			num_bytes = dev4_uart_buffer_size - dev4_array_start;
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <Dev4_Check_Flag+0xa4>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80022d4:	3308      	adds	r3, #8
 80022d6:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC2|", 4, 500);
 80022d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022dc:	2204      	movs	r2, #4
 80022de:	4911      	ldr	r1, [pc, #68]	; (8002324 <Dev4_Check_Flag+0xa8>)
 80022e0:	4811      	ldr	r0, [pc, #68]	; (8002328 <Dev4_Check_Flag+0xac>)
 80022e2:	f001 ff6a 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev4_uart_rxBuffer[dev4_array_start+1], num_bytes, 500);
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <Dev4_Check_Flag+0xa4>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	3301      	adds	r3, #1
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <Dev4_Check_Flag+0xb0>)
 80022ee:	1899      	adds	r1, r3, r2
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022f6:	480c      	ldr	r0, [pc, #48]	; (8002328 <Dev4_Check_Flag+0xac>)
 80022f8:	f001 ff5f 	bl	80041ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev4_uart_rxBuffer[0], dev4_send_flag, 500);
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <Dev4_Check_Flag+0xa0>)
 80022fe:	881a      	ldrh	r2, [r3, #0]
 8002300:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002304:	4909      	ldr	r1, [pc, #36]	; (800232c <Dev4_Check_Flag+0xb0>)
 8002306:	4808      	ldr	r0, [pc, #32]	; (8002328 <Dev4_Check_Flag+0xac>)
 8002308:	f001 ff57 	bl	80041ba <HAL_UART_Transmit>
		}
		dev4_array_start = dev4_send_flag;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <Dev4_Check_Flag+0xa0>)
 800230e:	881a      	ldrh	r2, [r3, #0]
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <Dev4_Check_Flag+0xa4>)
 8002312:	801a      	strh	r2, [r3, #0]
	}
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20006428 	.word	0x20006428
 8002320:	20006424 	.word	0x20006424
 8002324:	08006ae0 	.word	0x08006ae0
 8002328:	200064b8 	.word	0x200064b8
 800232c:	2000509c 	.word	0x2000509c

08002330 <Chip_Update>:
* Description: 	This routine update any low level chip functions
* Parameters:  	(none)
* Returns:    	 	(none)
******************************************************************************/
void Chip_Update(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <SystemClock_Config>:
* 				files by STM32CubeIDE.
* Parameters:  	(none)
* Returns:     	(none)
******************************************************************************/
void SystemClock_Config(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b094      	sub	sp, #80	; 0x50
 8002344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	2234      	movs	r2, #52	; 0x34
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f002 ff88 	bl	8005264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002354:	f107 0308 	add.w	r3, r7, #8
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <SystemClock_Config+0xd4>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	4a29      	ldr	r2, [pc, #164]	; (8002414 <SystemClock_Config+0xd4>)
 800236e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002372:	6413      	str	r3, [r2, #64]	; 0x40
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <SystemClock_Config+0xd4>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002380:	2300      	movs	r3, #0
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <SystemClock_Config+0xd8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <SystemClock_Config+0xd8>)
 800238e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b20      	ldr	r3, [pc, #128]	; (8002418 <SystemClock_Config+0xd8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a8:	2310      	movs	r3, #16
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ac:	2302      	movs	r3, #2
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80023b4:	2310      	movs	r3, #16
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80023bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023be:	2304      	movs	r3, #4
 80023c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80023c2:	2302      	movs	r3, #2
 80023c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023c6:	2302      	movs	r3, #2
 80023c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4618      	mov	r0, r3
 80023d0:	f001 fc08 	bl	8003be4 <HAL_RCC_OscConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80023da:	f000 f81f 	bl	800241c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023de:	230f      	movs	r3, #15
 80023e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e2:	2302      	movs	r3, #2
 80023e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023f4:	f107 0308 	add.w	r3, r7, #8
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f001 f8a8 	bl	8003550 <HAL_RCC_ClockConfig>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002406:	f000 f809 	bl	800241c <Error_Handler>
  }
}
 800240a:	bf00      	nop
 800240c:	3750      	adds	r7, #80	; 0x50
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40007000 	.word	0x40007000

0800241c <Error_Handler>:
* 				in to main.c of generated files by STM32CubeIDE.
* Parameters:  	(none)
* Returns:     	(none)
******************************************************************************/
void Error_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
  __disable_irq();
  while (1)
 8002424:	e7fe      	b.n	8002424 <Error_Handler+0x8>
	...

08002428 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <MX_GPIO_Init+0xd4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a2d      	ldr	r2, [pc, #180]	; (80024fc <MX_GPIO_Init+0xd4>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <MX_GPIO_Init+0xd4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b27      	ldr	r3, [pc, #156]	; (80024fc <MX_GPIO_Init+0xd4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a26      	ldr	r2, [pc, #152]	; (80024fc <MX_GPIO_Init+0xd4>)
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <MX_GPIO_Init+0xd4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <MX_GPIO_Init+0xd4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <MX_GPIO_Init+0xd4>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <MX_GPIO_Init+0xd4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	4b19      	ldr	r3, [pc, #100]	; (80024fc <MX_GPIO_Init+0xd4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <MX_GPIO_Init+0xd4>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <MX_GPIO_Init+0xd4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <MX_GPIO_Init+0xd4>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a11      	ldr	r2, [pc, #68]	; (80024fc <MX_GPIO_Init+0xd4>)
 80024b8:	f043 0308 	orr.w	r3, r3, #8
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <MX_GPIO_Init+0xd4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	f640 4102 	movw	r1, #3074	; 0xc02
 80024d0:	480b      	ldr	r0, [pc, #44]	; (8002500 <MX_GPIO_Init+0xd8>)
 80024d2:	f001 f823 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80024d6:	f640 4302 	movw	r3, #3074	; 0xc02
 80024da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024dc:	2301      	movs	r3, #1
 80024de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	4619      	mov	r1, r3
 80024ee:	4804      	ldr	r0, [pc, #16]	; (8002500 <MX_GPIO_Init+0xd8>)
 80024f0:	f000 fe80 	bl	80031f4 <HAL_GPIO_Init>

}
 80024f4:	bf00      	nop
 80024f6:	3728      	adds	r7, #40	; 0x28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020800 	.word	0x40020800

08002504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_MspInit+0x4c>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_MspInit+0x4c>)
 8002514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002518:	6453      	str	r3, [r2, #68]	; 0x44
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_MspInit+0x4c>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_MspInit+0x4c>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_MspInit+0x4c>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_MspInit+0x4c>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002542:	2007      	movs	r0, #7
 8002544:	f000 fd82 	bl	800304c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler+0x4>

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <MemManage_Handler+0x4>

08002566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler+0x4>

08002572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a0:	f000 fc40 	bl	8002e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <USART1_IRQHandler+0x10>)
 80025ae:	f001 fec7 	bl	8004340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200064b8 	.word	0x200064b8

080025bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <USART3_IRQHandler+0x10>)
 80025c2:	f001 febd 	bl	8004340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20006540 	.word	0x20006540

080025d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <UART4_IRQHandler+0x10>)
 80025d6:	f001 feb3 	bl	8004340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20006430 	.word	0x20006430

080025e4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <UART5_IRQHandler+0x10>)
 80025ea:	f001 fea9 	bl	8004340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20006474 	.word	0x20006474

080025f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <USART6_IRQHandler+0x10>)
 80025fe:	f001 fe9f 	bl	8004340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20006584 	.word	0x20006584

0800260c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
	return 1;
 8002610:	2301      	movs	r3, #1
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <_kill>:

int _kill(int pid, int sig)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002626:	f002 fdf3 	bl	8005210 <__errno>
 800262a:	4603      	mov	r3, r0
 800262c:	2216      	movs	r2, #22
 800262e:	601a      	str	r2, [r3, #0]
	return -1;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_exit>:

void _exit (int status)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ffe7 	bl	800261c <_kill>
	while (1) {}		/* Make sure we hang here */
 800264e:	e7fe      	b.n	800264e <_exit+0x12>

08002650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e00a      	b.n	8002678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002662:	f3af 8000 	nop.w
 8002666:	4601      	mov	r1, r0
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	60ba      	str	r2, [r7, #8]
 800266e:	b2ca      	uxtb	r2, r1
 8002670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbf0      	blt.n	8002662 <_read+0x12>
	}

return len;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e009      	b.n	80026b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	60ba      	str	r2, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3301      	adds	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dbf1      	blt.n	800269c <_write+0x12>
	}
	return len;
 80026b8:	687b      	ldr	r3, [r7, #4]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_close>:

int _close(int file)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	return -1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ea:	605a      	str	r2, [r3, #4]
	return 0;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <_isatty>:

int _isatty(int file)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
	return 1;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
	return 0;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <_sbrk+0x5c>)
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <_sbrk+0x60>)
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <_sbrk+0x64>)
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <_sbrk+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800275c:	f002 fd58 	bl	8005210 <__errno>
 8002760:	4603      	mov	r3, r0
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e009      	b.n	8002780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <_sbrk+0x64>)
 800277c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20020000 	.word	0x20020000
 800278c:	00000400 	.word	0x00000400
 8002790:	2000642c 	.word	0x2000642c
 8002794:	200065e0 	.word	0x200065e0

08002798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <SystemInit+0x20>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <SystemInit+0x20>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_UART4_Init+0x4c>)
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <MX_UART4_Init+0x50>)
 80027c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <MX_UART4_Init+0x4c>)
 80027c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_UART4_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_UART4_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <MX_UART4_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <MX_UART4_Init+0x4c>)
 80027e2:	220c      	movs	r2, #12
 80027e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <MX_UART4_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <MX_UART4_Init+0x4c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <MX_UART4_Init+0x4c>)
 80027f4:	f001 fc94 	bl	8004120 <HAL_UART_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80027fe:	f7ff fe0d 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20006430 	.word	0x20006430
 800280c:	40004c00 	.word	0x40004c00

08002810 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <MX_UART5_Init+0x4c>)
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <MX_UART5_Init+0x50>)
 8002818:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <MX_UART5_Init+0x4c>)
 800281c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002820:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <MX_UART5_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_UART5_Init+0x4c>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <MX_UART5_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_UART5_Init+0x4c>)
 8002836:	220c      	movs	r2, #12
 8002838:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <MX_UART5_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_UART5_Init+0x4c>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_UART5_Init+0x4c>)
 8002848:	f001 fc6a 	bl	8004120 <HAL_UART_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002852:	f7ff fde3 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20006474 	.word	0x20006474
 8002860:	40005000 	.word	0x40005000

08002864 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <MX_USART1_UART_Init+0x50>)
 800286c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 800288a:	220c      	movs	r2, #12
 800288c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_USART1_UART_Init+0x4c>)
 800289c:	f001 fc40 	bl	8004120 <HAL_UART_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028a6:	f7ff fdb9 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200064b8 	.word	0x200064b8
 80028b4:	40011000 	.word	0x40011000

080028b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_USART2_UART_Init+0x4c>)
 80028be:	4a12      	ldr	r2, [pc, #72]	; (8002908 <MX_USART2_UART_Init+0x50>)
 80028c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <MX_USART2_UART_Init+0x4c>)
 80028c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_USART2_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <MX_USART2_UART_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <MX_USART2_UART_Init+0x4c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_USART2_UART_Init+0x4c>)
 80028de:	220c      	movs	r2, #12
 80028e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <MX_USART2_UART_Init+0x4c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_USART2_UART_Init+0x4c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028ee:	4805      	ldr	r0, [pc, #20]	; (8002904 <MX_USART2_UART_Init+0x4c>)
 80028f0:	f001 fc16 	bl	8004120 <HAL_UART_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028fa:	f7ff fd8f 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200064fc 	.word	0x200064fc
 8002908:	40004400 	.word	0x40004400

0800290c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <MX_USART3_UART_Init+0x50>)
 8002914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800291c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <MX_USART3_UART_Init+0x4c>)
 8002944:	f001 fbec 	bl	8004120 <HAL_UART_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800294e:	f7ff fd65 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20006540 	.word	0x20006540
 800295c:	40004800 	.word	0x40004800

08002960 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <MX_USART6_UART_Init+0x4c>)
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <MX_USART6_UART_Init+0x50>)
 8002968:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <MX_USART6_UART_Init+0x4c>)
 800296c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002970:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_USART6_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <MX_USART6_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <MX_USART6_UART_Init+0x4c>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <MX_USART6_UART_Init+0x4c>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <MX_USART6_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <MX_USART6_UART_Init+0x4c>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <MX_USART6_UART_Init+0x4c>)
 8002998:	f001 fbc2 	bl	8004120 <HAL_UART_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80029a2:	f7ff fd3b 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20006584 	.word	0x20006584
 80029b0:	40011400 	.word	0x40011400

080029b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b096      	sub	sp, #88	; 0x58
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a7e      	ldr	r2, [pc, #504]	; (8002bcc <HAL_UART_MspInit+0x218>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d134      	bne.n	8002a40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	643b      	str	r3, [r7, #64]	; 0x40
 80029da:	4b7d      	ldr	r3, [pc, #500]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a7c      	ldr	r2, [pc, #496]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 80029e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b7a      	ldr	r3, [pc, #488]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ee:	643b      	str	r3, [r7, #64]	; 0x40
 80029f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a75      	ldr	r2, [pc, #468]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a1e:	2308      	movs	r3, #8
 8002a20:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a26:	4619      	mov	r1, r3
 8002a28:	486a      	ldr	r0, [pc, #424]	; (8002bd4 <HAL_UART_MspInit+0x220>)
 8002a2a:	f000 fbe3 	bl	80031f4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2034      	movs	r0, #52	; 0x34
 8002a34:	f000 fb15 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a38:	2034      	movs	r0, #52	; 0x34
 8002a3a:	f000 fb2e 	bl	800309a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002a3e:	e167      	b.n	8002d10 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==UART5)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a64      	ldr	r2, [pc, #400]	; (8002bd8 <HAL_UART_MspInit+0x224>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d153      	bne.n	8002af2 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a4e:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a5f      	ldr	r2, [pc, #380]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	637b      	str	r3, [r7, #52]	; 0x34
 8002a6a:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
 8002a86:	4b52      	ldr	r3, [pc, #328]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a51      	ldr	r2, [pc, #324]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a8c:	f043 0308 	orr.w	r3, r3, #8
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aac:	2303      	movs	r3, #3
 8002aae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4848      	ldr	r0, [pc, #288]	; (8002bdc <HAL_UART_MspInit+0x228>)
 8002abc:	f000 fb9a 	bl	80031f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002acc:	2303      	movs	r3, #3
 8002ace:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4841      	ldr	r0, [pc, #260]	; (8002be0 <HAL_UART_MspInit+0x22c>)
 8002adc:	f000 fb8a 	bl	80031f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2035      	movs	r0, #53	; 0x35
 8002ae6:	f000 fabc 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002aea:	2035      	movs	r0, #53	; 0x35
 8002aec:	f000 fad5 	bl	800309a <HAL_NVIC_EnableIRQ>
}
 8002af0:	e10e      	b.n	8002d10 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a3b      	ldr	r2, [pc, #236]	; (8002be4 <HAL_UART_MspInit+0x230>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d135      	bne.n	8002b68 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b00:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	4a32      	ldr	r2, [pc, #200]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b06:	f043 0310 	orr.w	r3, r3, #16
 8002b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0c:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6313      	str	r3, [r2, #48]	; 0x30
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b38:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b46:	2307      	movs	r3, #7
 8002b48:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4820      	ldr	r0, [pc, #128]	; (8002bd4 <HAL_UART_MspInit+0x220>)
 8002b52:	f000 fb4f 	bl	80031f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2025      	movs	r0, #37	; 0x25
 8002b5c:	f000 fa81 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b60:	2025      	movs	r0, #37	; 0x25
 8002b62:	f000 fa9a 	bl	800309a <HAL_NVIC_EnableIRQ>
}
 8002b66:	e0d3      	b.n	8002d10 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_UART_MspInit+0x234>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d13c      	bne.n	8002bec <HAL_UART_MspInit+0x238>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_UART_MspInit+0x21c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	623b      	str	r3, [r7, #32]
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002baa:	230c      	movs	r3, #12
 8002bac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <HAL_UART_MspInit+0x220>)
 8002bc6:	f000 fb15 	bl	80031f4 <HAL_GPIO_Init>
}
 8002bca:	e0a1      	b.n	8002d10 <HAL_UART_MspInit+0x35c>
 8002bcc:	40004c00 	.word	0x40004c00
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	40005000 	.word	0x40005000
 8002bdc:	40020800 	.word	0x40020800
 8002be0:	40020c00 	.word	0x40020c00
 8002be4:	40011000 	.word	0x40011000
 8002be8:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a49      	ldr	r2, [pc, #292]	; (8002d18 <HAL_UART_MspInit+0x364>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d153      	bne.n	8002c9e <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a47      	ldr	r2, [pc, #284]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b45      	ldr	r3, [pc, #276]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a40      	ldr	r2, [pc, #256]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a39      	ldr	r2, [pc, #228]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c62:	4619      	mov	r1, r3
 8002c64:	482e      	ldr	r0, [pc, #184]	; (8002d20 <HAL_UART_MspInit+0x36c>)
 8002c66:	f000 fac5 	bl	80031f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c7c:	2307      	movs	r3, #7
 8002c7e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c84:	4619      	mov	r1, r3
 8002c86:	4827      	ldr	r0, [pc, #156]	; (8002d24 <HAL_UART_MspInit+0x370>)
 8002c88:	f000 fab4 	bl	80031f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2027      	movs	r0, #39	; 0x27
 8002c92:	f000 f9e6 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c96:	2027      	movs	r0, #39	; 0x27
 8002c98:	f000 f9ff 	bl	800309a <HAL_NVIC_EnableIRQ>
}
 8002c9c:	e038      	b.n	8002d10 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART6)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_UART_MspInit+0x374>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d133      	bne.n	8002d10 <HAL_UART_MspInit+0x35c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	4a1a      	ldr	r2, [pc, #104]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002cb2:	f043 0320 	orr.w	r3, r3, #32
 8002cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <HAL_UART_MspInit+0x368>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ce0:	23c0      	movs	r3, #192	; 0xc0
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4809      	ldr	r0, [pc, #36]	; (8002d20 <HAL_UART_MspInit+0x36c>)
 8002cfc:	f000 fa7a 	bl	80031f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d00:	2200      	movs	r2, #0
 8002d02:	2100      	movs	r1, #0
 8002d04:	2047      	movs	r0, #71	; 0x47
 8002d06:	f000 f9ac 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d0a:	2047      	movs	r0, #71	; 0x47
 8002d0c:	f000 f9c5 	bl	800309a <HAL_NVIC_EnableIRQ>
}
 8002d10:	bf00      	nop
 8002d12:	3758      	adds	r7, #88	; 0x58
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40004800 	.word	0x40004800
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40011400 	.word	0x40011400

08002d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d32:	490e      	ldr	r1, [pc, #56]	; (8002d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d34:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d38:	e002      	b.n	8002d40 <LoopCopyDataInit>

08002d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3e:	3304      	adds	r3, #4

08002d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d44:	d3f9      	bcc.n	8002d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d46:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d48:	4c0b      	ldr	r4, [pc, #44]	; (8002d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d4c:	e001      	b.n	8002d52 <LoopFillZerobss>

08002d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d50:	3204      	adds	r2, #4

08002d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d54:	d3fb      	bcc.n	8002d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d56:	f7ff fd1f 	bl	8002798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d5a:	f002 fa5f 	bl	800521c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d5e:	f7fd fd31 	bl	80007c4 <main>
  bx  lr    
 8002d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d6c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002d70:	08006c58 	.word	0x08006c58
  ldr r2, =_sbss
 8002d74:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8002d78:	200065dc 	.word	0x200065dc

08002d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d7c:	e7fe      	b.n	8002d7c <ADC_IRQHandler>
	...

08002d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <HAL_Init+0x40>)
 8002d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <HAL_Init+0x40>)
 8002d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <HAL_Init+0x40>)
 8002da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da8:	2003      	movs	r0, #3
 8002daa:	f000 f94f 	bl	800304c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f000 f808 	bl	8002dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db4:	f7ff fba6 	bl	8002504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00

08002dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_InitTick+0x54>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_InitTick+0x58>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f967 	bl	80030b6 <HAL_SYSTICK_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00e      	b.n	8002e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	d80a      	bhi.n	8002e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f000 f92f 	bl	8003062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e04:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <HAL_InitTick+0x5c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000094 	.word	0x20000094
 8002e1c:	2000009c 	.word	0x2000009c
 8002e20:	20000098 	.word	0x20000098

08002e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_IncTick+0x20>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_IncTick+0x24>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_IncTick+0x24>)
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	2000009c 	.word	0x2000009c
 8002e48:	200065c8 	.word	0x200065c8

08002e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_GetTick+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	200065c8 	.word	0x200065c8

08002e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7ff ffee 	bl	8002e4c <HAL_GetTick>
 8002e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d005      	beq.n	8002e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_Delay+0x44>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e8a:	bf00      	nop
 8002e8c:	f7ff ffde 	bl	8002e4c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d8f7      	bhi.n	8002e8c <HAL_Delay+0x28>
  {
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	2000009c 	.word	0x2000009c

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0b      	blt.n	8002f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4907      	ldr	r1, [pc, #28]	; (8002f48 <__NVIC_EnableIRQ+0x38>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db0a      	blt.n	8002f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	490c      	ldr	r1, [pc, #48]	; (8002f98 <__NVIC_SetPriority+0x4c>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f74:	e00a      	b.n	8002f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4908      	ldr	r1, [pc, #32]	; (8002f9c <__NVIC_SetPriority+0x50>)
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	3b04      	subs	r3, #4
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	440b      	add	r3, r1
 8002f8a:	761a      	strb	r2, [r3, #24]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f1c3 0307 	rsb	r3, r3, #7
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	bf28      	it	cs
 8002fbe:	2304      	movcs	r3, #4
 8002fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d902      	bls.n	8002fd0 <NVIC_EncodePriority+0x30>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3b03      	subs	r3, #3
 8002fce:	e000      	b.n	8002fd2 <NVIC_EncodePriority+0x32>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43d9      	mvns	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	4313      	orrs	r3, r2
         );
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003018:	d301      	bcc.n	800301e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301a:	2301      	movs	r3, #1
 800301c:	e00f      	b.n	800303e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <SysTick_Config+0x40>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003026:	210f      	movs	r1, #15
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f7ff ff8e 	bl	8002f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <SysTick_Config+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <SysTick_Config+0x40>)
 8003038:	2207      	movs	r2, #7
 800303a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	e000e010 	.word	0xe000e010

0800304c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff29 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003074:	f7ff ff3e 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 8003078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f7ff ff8e 	bl	8002fa0 <NVIC_EncodePriority>
 8003084:	4602      	mov	r2, r0
 8003086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff5d 	bl	8002f4c <__NVIC_SetPriority>
}
 8003092:	bf00      	nop
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff31 	bl	8002f10 <__NVIC_EnableIRQ>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ffa2 	bl	8003008 <SysTick_Config>
 80030c4:	4603      	mov	r3, r0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff feb6 	bl	8002e4c <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d008      	beq.n	8003100 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2280      	movs	r2, #128	; 0x80
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e052      	b.n	80031a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0216 	bic.w	r2, r2, #22
 800310e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <HAL_DMA_Abort+0x62>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0208 	bic.w	r2, r2, #8
 800313e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003150:	e013      	b.n	800317a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003152:	f7ff fe7b 	bl	8002e4c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b05      	cmp	r3, #5
 800315e:	d90c      	bls.n	800317a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e015      	b.n	80031a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e4      	bne.n	8003152 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	223f      	movs	r2, #63	; 0x3f
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d004      	beq.n	80031cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e00c      	b.n	80031e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2205      	movs	r2, #5
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e165      	b.n	80034dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003210:	2201      	movs	r2, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	f040 8154 	bne.w	80034d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d005      	beq.n	8003246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003242:	2b02      	cmp	r3, #2
 8003244:	d130      	bne.n	80032a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 0201 	and.w	r2, r3, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d017      	beq.n	80032e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d123      	bne.n	8003338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	08da      	lsrs	r2, r3, #3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3208      	adds	r2, #8
 80032f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	220f      	movs	r2, #15
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0203 	and.w	r2, r3, #3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80ae 	beq.w	80034d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b5d      	ldr	r3, [pc, #372]	; (80034f4 <HAL_GPIO_Init+0x300>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	4a5c      	ldr	r2, [pc, #368]	; (80034f4 <HAL_GPIO_Init+0x300>)
 8003384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003388:	6453      	str	r3, [r2, #68]	; 0x44
 800338a:	4b5a      	ldr	r3, [pc, #360]	; (80034f4 <HAL_GPIO_Init+0x300>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003396:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_GPIO_Init+0x304>)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3302      	adds	r3, #2
 800339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4f      	ldr	r2, [pc, #316]	; (80034fc <HAL_GPIO_Init+0x308>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d025      	beq.n	800340e <HAL_GPIO_Init+0x21a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4e      	ldr	r2, [pc, #312]	; (8003500 <HAL_GPIO_Init+0x30c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <HAL_GPIO_Init+0x216>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4d      	ldr	r2, [pc, #308]	; (8003504 <HAL_GPIO_Init+0x310>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_Init+0x212>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4c      	ldr	r2, [pc, #304]	; (8003508 <HAL_GPIO_Init+0x314>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x20e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4b      	ldr	r2, [pc, #300]	; (800350c <HAL_GPIO_Init+0x318>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x20a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4a      	ldr	r2, [pc, #296]	; (8003510 <HAL_GPIO_Init+0x31c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x206>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a49      	ldr	r2, [pc, #292]	; (8003514 <HAL_GPIO_Init+0x320>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x202>
 80033f2:	2306      	movs	r3, #6
 80033f4:	e00c      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 80033f6:	2307      	movs	r3, #7
 80033f8:	e00a      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 80033fa:	2305      	movs	r3, #5
 80033fc:	e008      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 80033fe:	2304      	movs	r3, #4
 8003400:	e006      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 8003402:	2303      	movs	r3, #3
 8003404:	e004      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 8003406:	2302      	movs	r3, #2
 8003408:	e002      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 800340e:	2300      	movs	r3, #0
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	f002 0203 	and.w	r2, r2, #3
 8003416:	0092      	lsls	r2, r2, #2
 8003418:	4093      	lsls	r3, r2
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003420:	4935      	ldr	r1, [pc, #212]	; (80034f8 <HAL_GPIO_Init+0x304>)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	3302      	adds	r3, #2
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800342e:	4b3a      	ldr	r3, [pc, #232]	; (8003518 <HAL_GPIO_Init+0x324>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003452:	4a31      	ldr	r2, [pc, #196]	; (8003518 <HAL_GPIO_Init+0x324>)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003458:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_GPIO_Init+0x324>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800347c:	4a26      	ldr	r2, [pc, #152]	; (8003518 <HAL_GPIO_Init+0x324>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003482:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_GPIO_Init+0x324>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a6:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_GPIO_Init+0x324>)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_GPIO_Init+0x324>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d0:	4a11      	ldr	r2, [pc, #68]	; (8003518 <HAL_GPIO_Init+0x324>)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3301      	adds	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b0f      	cmp	r3, #15
 80034e0:	f67f ae96 	bls.w	8003210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3724      	adds	r7, #36	; 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40013800 	.word	0x40013800
 80034fc:	40020000 	.word	0x40020000
 8003500:	40020400 	.word	0x40020400
 8003504:	40020800 	.word	0x40020800
 8003508:	40020c00 	.word	0x40020c00
 800350c:	40021000 	.word	0x40021000
 8003510:	40021400 	.word	0x40021400
 8003514:	40021800 	.word	0x40021800
 8003518:	40013c00 	.word	0x40013c00

0800351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
 8003528:	4613      	mov	r3, r2
 800352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800352c:	787b      	ldrb	r3, [r7, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003538:	e003      	b.n	8003542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	619a      	str	r2, [r3, #24]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0cc      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b68      	ldr	r3, [pc, #416]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d90c      	bls.n	800358c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b65      	ldr	r3, [pc, #404]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0b8      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a4:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a58      	ldr	r2, [pc, #352]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a52      	ldr	r2, [pc, #328]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	494d      	ldr	r1, [pc, #308]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d044      	beq.n	8003670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d119      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d003      	beq.n	800360e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360a:	2b03      	cmp	r3, #3
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	4b3f      	ldr	r3, [pc, #252]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361e:	4b3b      	ldr	r3, [pc, #236]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e067      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362e:	4b37      	ldr	r3, [pc, #220]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f023 0203 	bic.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4934      	ldr	r1, [pc, #208]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003640:	f7ff fc04 	bl	8002e4c <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	e00a      	b.n	800365e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7ff fc00 	bl	8002e4c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e04f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	4b2b      	ldr	r3, [pc, #172]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 020c 	and.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1eb      	bne.n	8003648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003670:	4b25      	ldr	r3, [pc, #148]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d20c      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b22      	ldr	r3, [pc, #136]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e032      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4916      	ldr	r1, [pc, #88]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	490e      	ldr	r1, [pc, #56]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036d6:	f000 f855 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	490a      	ldr	r1, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fb64 	bl	8002dc4 <HAL_InitTick>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023c00 	.word	0x40023c00
 800370c:	40023800 	.word	0x40023800
 8003710:	08006ae8 	.word	0x08006ae8
 8003714:	20000094 	.word	0x20000094
 8003718:	20000098 	.word	0x20000098

0800371c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_RCC_GetHCLKFreq+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000094 	.word	0x20000094

08003734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003738:	f7ff fff0 	bl	800371c <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0a9b      	lsrs	r3, r3, #10
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4903      	ldr	r1, [pc, #12]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	08006af8 	.word	0x08006af8

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003760:	f7ff ffdc 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0b5b      	lsrs	r3, r3, #13
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	; (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	08006af8 	.word	0x08006af8

08003784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003788:	b0ae      	sub	sp, #184	; 0xb8
 800378a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037aa:	4bcb      	ldr	r3, [pc, #812]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b0c      	cmp	r3, #12
 80037b4:	f200 8206 	bhi.w	8003bc4 <HAL_RCC_GetSysClockFreq+0x440>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	08003bc5 	.word	0x08003bc5
 80037c8:	08003bc5 	.word	0x08003bc5
 80037cc:	08003bc5 	.word	0x08003bc5
 80037d0:	080037fd 	.word	0x080037fd
 80037d4:	08003bc5 	.word	0x08003bc5
 80037d8:	08003bc5 	.word	0x08003bc5
 80037dc:	08003bc5 	.word	0x08003bc5
 80037e0:	08003805 	.word	0x08003805
 80037e4:	08003bc5 	.word	0x08003bc5
 80037e8:	08003bc5 	.word	0x08003bc5
 80037ec:	08003bc5 	.word	0x08003bc5
 80037f0:	080039f5 	.word	0x080039f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4bb9      	ldr	r3, [pc, #740]	; (8003adc <HAL_RCC_GetSysClockFreq+0x358>)
 80037f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80037fa:	e1e7      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037fc:	4bb8      	ldr	r3, [pc, #736]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80037fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003802:	e1e3      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003804:	4bb4      	ldr	r3, [pc, #720]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800380c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003810:	4bb1      	ldr	r3, [pc, #708]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d071      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381c:	4bae      	ldr	r3, [pc, #696]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x354>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	2200      	movs	r2, #0
 8003824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003828:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800382c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800383e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003842:	4622      	mov	r2, r4
 8003844:	462b      	mov	r3, r5
 8003846:	f04f 0000 	mov.w	r0, #0
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	0159      	lsls	r1, r3, #5
 8003850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003854:	0150      	lsls	r0, r2, #5
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4621      	mov	r1, r4
 800385c:	1a51      	subs	r1, r2, r1
 800385e:	6439      	str	r1, [r7, #64]	; 0x40
 8003860:	4629      	mov	r1, r5
 8003862:	eb63 0301 	sbc.w	r3, r3, r1
 8003866:	647b      	str	r3, [r7, #68]	; 0x44
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003874:	4649      	mov	r1, r9
 8003876:	018b      	lsls	r3, r1, #6
 8003878:	4641      	mov	r1, r8
 800387a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800387e:	4641      	mov	r1, r8
 8003880:	018a      	lsls	r2, r1, #6
 8003882:	4641      	mov	r1, r8
 8003884:	1a51      	subs	r1, r2, r1
 8003886:	63b9      	str	r1, [r7, #56]	; 0x38
 8003888:	4649      	mov	r1, r9
 800388a:	eb63 0301 	sbc.w	r3, r3, r1
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800389c:	4649      	mov	r1, r9
 800389e:	00cb      	lsls	r3, r1, #3
 80038a0:	4641      	mov	r1, r8
 80038a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a6:	4641      	mov	r1, r8
 80038a8:	00ca      	lsls	r2, r1, #3
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	4622      	mov	r2, r4
 80038b2:	189b      	adds	r3, r3, r2
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30
 80038b6:	462b      	mov	r3, r5
 80038b8:	460a      	mov	r2, r1
 80038ba:	eb42 0303 	adc.w	r3, r2, r3
 80038be:	637b      	str	r3, [r7, #52]	; 0x34
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038cc:	4629      	mov	r1, r5
 80038ce:	024b      	lsls	r3, r1, #9
 80038d0:	4621      	mov	r1, r4
 80038d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038d6:	4621      	mov	r1, r4
 80038d8:	024a      	lsls	r2, r1, #9
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80038f0:	f7fc fcf6 	bl	80002e0 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4613      	mov	r3, r2
 80038fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038fe:	e067      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003900:	4b75      	ldr	r3, [pc, #468]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	2200      	movs	r2, #0
 8003908:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800390c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003910:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003918:	67bb      	str	r3, [r7, #120]	; 0x78
 800391a:	2300      	movs	r3, #0
 800391c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800391e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003922:	4622      	mov	r2, r4
 8003924:	462b      	mov	r3, r5
 8003926:	f04f 0000 	mov.w	r0, #0
 800392a:	f04f 0100 	mov.w	r1, #0
 800392e:	0159      	lsls	r1, r3, #5
 8003930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003934:	0150      	lsls	r0, r2, #5
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4621      	mov	r1, r4
 800393c:	1a51      	subs	r1, r2, r1
 800393e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003940:	4629      	mov	r1, r5
 8003942:	eb63 0301 	sbc.w	r3, r3, r1
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003954:	4649      	mov	r1, r9
 8003956:	018b      	lsls	r3, r1, #6
 8003958:	4641      	mov	r1, r8
 800395a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800395e:	4641      	mov	r1, r8
 8003960:	018a      	lsls	r2, r1, #6
 8003962:	4641      	mov	r1, r8
 8003964:	ebb2 0a01 	subs.w	sl, r2, r1
 8003968:	4649      	mov	r1, r9
 800396a:	eb63 0b01 	sbc.w	fp, r3, r1
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800397a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800397e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003982:	4692      	mov	sl, r2
 8003984:	469b      	mov	fp, r3
 8003986:	4623      	mov	r3, r4
 8003988:	eb1a 0303 	adds.w	r3, sl, r3
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	462b      	mov	r3, r5
 8003990:	eb4b 0303 	adc.w	r3, fp, r3
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80039a2:	4629      	mov	r1, r5
 80039a4:	028b      	lsls	r3, r1, #10
 80039a6:	4621      	mov	r1, r4
 80039a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ac:	4621      	mov	r1, r4
 80039ae:	028a      	lsls	r2, r1, #10
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039b8:	2200      	movs	r2, #0
 80039ba:	673b      	str	r3, [r7, #112]	; 0x70
 80039bc:	677a      	str	r2, [r7, #116]	; 0x74
 80039be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80039c2:	f7fc fc8d 	bl	80002e0 <__aeabi_uldivmod>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4613      	mov	r3, r2
 80039cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d0:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80039e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039f2:	e0eb      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f4:	4b38      	ldr	r3, [pc, #224]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d06b      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0c:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	2200      	movs	r2, #0
 8003a14:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a20:	2300      	movs	r3, #0
 8003a22:	667b      	str	r3, [r7, #100]	; 0x64
 8003a24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a28:	4622      	mov	r2, r4
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	f04f 0000 	mov.w	r0, #0
 8003a30:	f04f 0100 	mov.w	r1, #0
 8003a34:	0159      	lsls	r1, r3, #5
 8003a36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a3a:	0150      	lsls	r0, r2, #5
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4621      	mov	r1, r4
 8003a42:	1a51      	subs	r1, r2, r1
 8003a44:	61b9      	str	r1, [r7, #24]
 8003a46:	4629      	mov	r1, r5
 8003a48:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a5a:	4659      	mov	r1, fp
 8003a5c:	018b      	lsls	r3, r1, #6
 8003a5e:	4651      	mov	r1, sl
 8003a60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a64:	4651      	mov	r1, sl
 8003a66:	018a      	lsls	r2, r1, #6
 8003a68:	4651      	mov	r1, sl
 8003a6a:	ebb2 0801 	subs.w	r8, r2, r1
 8003a6e:	4659      	mov	r1, fp
 8003a70:	eb63 0901 	sbc.w	r9, r3, r1
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a88:	4690      	mov	r8, r2
 8003a8a:	4699      	mov	r9, r3
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	eb18 0303 	adds.w	r3, r8, r3
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	462b      	mov	r3, r5
 8003a96:	eb49 0303 	adc.w	r3, r9, r3
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	024b      	lsls	r3, r1, #9
 8003aac:	4621      	mov	r1, r4
 8003aae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	024a      	lsls	r2, r1, #9
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003abe:	2200      	movs	r2, #0
 8003ac0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ac2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ac4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ac8:	f7fc fc0a 	bl	80002e0 <__aeabi_uldivmod>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ad6:	e065      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x420>
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae4:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x458>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	2200      	movs	r2, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	4611      	mov	r1, r2
 8003af0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003af4:	653b      	str	r3, [r7, #80]	; 0x50
 8003af6:	2300      	movs	r3, #0
 8003af8:	657b      	str	r3, [r7, #84]	; 0x54
 8003afa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003afe:	4642      	mov	r2, r8
 8003b00:	464b      	mov	r3, r9
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	0159      	lsls	r1, r3, #5
 8003b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b10:	0150      	lsls	r0, r2, #5
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4641      	mov	r1, r8
 8003b18:	1a51      	subs	r1, r2, r1
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b30:	4659      	mov	r1, fp
 8003b32:	018b      	lsls	r3, r1, #6
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	018a      	lsls	r2, r1, #6
 8003b3e:	4651      	mov	r1, sl
 8003b40:	1a54      	subs	r4, r2, r1
 8003b42:	4659      	mov	r1, fp
 8003b44:	eb63 0501 	sbc.w	r5, r3, r1
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	00eb      	lsls	r3, r5, #3
 8003b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b56:	00e2      	lsls	r2, r4, #3
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	4643      	mov	r3, r8
 8003b5e:	18e3      	adds	r3, r4, r3
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	464b      	mov	r3, r9
 8003b64:	eb45 0303 	adc.w	r3, r5, r3
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b76:	4629      	mov	r1, r5
 8003b78:	028b      	lsls	r3, r1, #10
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b80:	4621      	mov	r1, r4
 8003b82:	028a      	lsls	r2, r1, #10
 8003b84:	4610      	mov	r0, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b90:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003b92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b96:	f7fc fba3 	bl	80002e0 <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x458>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	0f1b      	lsrs	r3, r3, #28
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bc2:	e003      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	37b8      	adds	r7, #184	; 0xb8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	00f42400 	.word	0x00f42400

08003be4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e28d      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8083 	beq.w	8003d0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c04:	4b94      	ldr	r3, [pc, #592]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d019      	beq.n	8003c44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c10:	4b91      	ldr	r3, [pc, #580]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d106      	bne.n	8003c2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c1c:	4b8e      	ldr	r3, [pc, #568]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c28:	d00c      	beq.n	8003c44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4b8b      	ldr	r3, [pc, #556]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	d112      	bne.n	8003c5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c36:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	4b84      	ldr	r3, [pc, #528]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d05b      	beq.n	8003d08 <HAL_RCC_OscConfig+0x124>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d157      	bne.n	8003d08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e25a      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d106      	bne.n	8003c74 <HAL_RCC_OscConfig+0x90>
 8003c66:	4b7c      	ldr	r3, [pc, #496]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7b      	ldr	r2, [pc, #492]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e01d      	b.n	8003cb0 <HAL_RCC_OscConfig+0xcc>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0xb4>
 8003c7e:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a75      	ldr	r2, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a72      	ldr	r2, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0xcc>
 8003c98:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a6b      	ldr	r2, [pc, #428]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d013      	beq.n	8003ce0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7ff f8c8 	bl	8002e4c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7ff f8c4 	bl	8002e4c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e21f      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	4b61      	ldr	r3, [pc, #388]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xdc>
 8003cde:	e014      	b.n	8003d0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7ff f8b4 	bl	8002e4c <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7ff f8b0 	bl	8002e4c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e20b      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x104>
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06f      	beq.n	8003df6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d16:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d017      	beq.n	8003d52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d22:	4b4d      	ldr	r3, [pc, #308]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d105      	bne.n	8003d3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d2e:	4b4a      	ldr	r3, [pc, #296]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d11c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d46:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_RCC_OscConfig+0x186>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1d3      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4937      	ldr	r1, [pc, #220]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	e03a      	b.n	8003df6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d88:	4b34      	ldr	r3, [pc, #208]	; (8003e5c <HAL_RCC_OscConfig+0x278>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7ff f85d 	bl	8002e4c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d96:	f7ff f859 	bl	8002e4c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e1b4      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4925      	ldr	r1, [pc, #148]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
 8003dc8:	e015      	b.n	8003df6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <HAL_RCC_OscConfig+0x278>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7ff f83c 	bl	8002e4c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7ff f838 	bl	8002e4c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e193      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d036      	beq.n	8003e70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_RCC_OscConfig+0x27c>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7ff f81c 	bl	8002e4c <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e18:	f7ff f818 	bl	8002e4c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e173      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x234>
 8003e36:	e01b      	b.n	8003e70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e38:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3e:	f7ff f805 	bl	8002e4c <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	e00e      	b.n	8003e64 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e46:	f7ff f801 	bl	8002e4c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d907      	bls.n	8003e64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e15c      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	42470000 	.word	0x42470000
 8003e60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	4b8a      	ldr	r3, [pc, #552]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ea      	bne.n	8003e46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8097 	beq.w	8003fac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e82:	4b83      	ldr	r3, [pc, #524]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	4b7f      	ldr	r3, [pc, #508]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a7e      	ldr	r2, [pc, #504]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b7c      	ldr	r3, [pc, #496]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b79      	ldr	r3, [pc, #484]	; (8004094 <HAL_RCC_OscConfig+0x4b0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	4b76      	ldr	r3, [pc, #472]	; (8004094 <HAL_RCC_OscConfig+0x4b0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a75      	ldr	r2, [pc, #468]	; (8004094 <HAL_RCC_OscConfig+0x4b0>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe ffc1 	bl	8002e4c <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fe ffbd 	bl	8002e4c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e118      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <HAL_RCC_OscConfig+0x4b0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_OscConfig+0x31e>
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a65      	ldr	r2, [pc, #404]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	e01c      	b.n	8003f3c <HAL_RCC_OscConfig+0x358>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x340>
 8003f0a:	4b61      	ldr	r3, [pc, #388]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	4a60      	ldr	r2, [pc, #384]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	6713      	str	r3, [r2, #112]	; 0x70
 8003f16:	4b5e      	ldr	r3, [pc, #376]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a5d      	ldr	r2, [pc, #372]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	6713      	str	r3, [r2, #112]	; 0x70
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0x358>
 8003f24:	4b5a      	ldr	r3, [pc, #360]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	4a59      	ldr	r2, [pc, #356]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f30:	4b57      	ldr	r3, [pc, #348]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a56      	ldr	r2, [pc, #344]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f36:	f023 0304 	bic.w	r3, r3, #4
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d015      	beq.n	8003f70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7fe ff82 	bl	8002e4c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7fe ff7e 	bl	8002e4c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0d7      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0ee      	beq.n	8003f4c <HAL_RCC_OscConfig+0x368>
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fe ff6c 	bl	8002e4c <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7fe ff68 	bl	8002e4c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0c1      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ee      	bne.n	8003f78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d105      	bne.n	8003fac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80ad 	beq.w	8004110 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fb6:	4b36      	ldr	r3, [pc, #216]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d060      	beq.n	8004084 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d145      	bne.n	8004056 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b33      	ldr	r3, [pc, #204]	; (8004098 <HAL_RCC_OscConfig+0x4b4>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe ff3c 	bl	8002e4c <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fe ff38 	bl	8002e4c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e093      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	4b29      	ldr	r3, [pc, #164]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	019b      	lsls	r3, r3, #6
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	085b      	lsrs	r3, r3, #1
 800400e:	3b01      	subs	r3, #1
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	071b      	lsls	r3, r3, #28
 8004022:	491b      	ldr	r1, [pc, #108]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_RCC_OscConfig+0x4b4>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fe ff0d 	bl	8002e4c <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004036:	f7fe ff09 	bl	8002e4c <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e064      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x452>
 8004054:	e05c      	b.n	8004110 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_RCC_OscConfig+0x4b4>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe fef6 	bl	8002e4c <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004064:	f7fe fef2 	bl	8002e4c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e04d      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x480>
 8004082:	e045      	b.n	8004110 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e040      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
 8004090:	40023800 	.word	0x40023800
 8004094:	40007000 	.word	0x40007000
 8004098:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800409c:	4b1f      	ldr	r3, [pc, #124]	; (800411c <HAL_RCC_OscConfig+0x538>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d030      	beq.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d129      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d122      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040cc:	4013      	ands	r3, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d119      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	3b01      	subs	r3, #1
 80040e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d10f      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e03f      	b.n	80041b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fe fc34 	bl	80029b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2224      	movs	r2, #36	; 0x24
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fddf 	bl	8004d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08a      	sub	sp, #40	; 0x28
 80041be:	af02      	add	r7, sp, #8
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	603b      	str	r3, [r7, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d17c      	bne.n	80042d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_UART_Transmit+0x2c>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e075      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_UART_Transmit+0x3e>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e06e      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2221      	movs	r2, #33	; 0x21
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800420e:	f7fe fe1d 	bl	8002e4c <HAL_GetTick>
 8004212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	88fa      	ldrh	r2, [r7, #6]
 8004218:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d108      	bne.n	800423c <HAL_UART_Transmit+0x82>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e003      	b.n	8004244 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800424c:	e02a      	b.n	80042a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fb1f 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e036      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800427c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	3302      	adds	r3, #2
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	e007      	b.n	8004296 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3301      	adds	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1cf      	bne.n	800424e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2140      	movs	r1, #64	; 0x40
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 faef 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e006      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d11d      	bne.n	8004334 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_UART_Receive_IT+0x26>
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e016      	b.n	8004336 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_UART_Receive_IT+0x38>
 8004312:	2302      	movs	r3, #2
 8004314:	e00f      	b.n	8004336 <HAL_UART_Receive_IT+0x58>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	461a      	mov	r2, r3
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fb24 	bl	8004978 <UART_Start_Receive_IT>
 8004330:	4603      	mov	r3, r0
 8004332:	e000      	b.n	8004336 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b0ba      	sub	sp, #232	; 0xe8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800437e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10f      	bne.n	80043a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_UART_IRQHandler+0x66>
 8004392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fc07 	bl	8004bb2 <UART_Receive_IT>
      return;
 80043a4:	e256      	b.n	8004854 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80de 	beq.w	800456c <HAL_UART_IRQHandler+0x22c>
 80043b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80d1 	beq.w	800456c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_UART_IRQHandler+0xae>
 80043d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_UART_IRQHandler+0xd2>
 80043fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0202 	orr.w	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <HAL_UART_IRQHandler+0xf6>
 800441e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0204 	orr.w	r2, r3, #4
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d011      	beq.n	8004466 <HAL_UART_IRQHandler+0x126>
 8004442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800444e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f043 0208 	orr.w	r2, r3, #8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 81ed 	beq.w	800484a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_UART_IRQHandler+0x14e>
 800447c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fb92 	bl	8004bb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <HAL_UART_IRQHandler+0x17a>
 80044b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d04f      	beq.n	800455a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa9a 	bl	80049f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d141      	bne.n	8004552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3314      	adds	r3, #20
 80044f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1d9      	bne.n	80044ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	2b00      	cmp	r3, #0
 8004520:	d013      	beq.n	800454a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4a7d      	ldr	r2, [pc, #500]	; (800471c <HAL_UART_IRQHandler+0x3dc>)
 8004528:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fe3d 	bl	80031ae <HAL_DMA_Abort_IT>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004544:	4610      	mov	r0, r2
 8004546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004548:	e00e      	b.n	8004568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f990 	bl	8004870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	e00a      	b.n	8004568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f98c 	bl	8004870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	e006      	b.n	8004568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f988 	bl	8004870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004566:	e170      	b.n	800484a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	bf00      	nop
    return;
 800456a:	e16e      	b.n	800484a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	2b01      	cmp	r3, #1
 8004572:	f040 814a 	bne.w	800480a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8143 	beq.w	800480a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 813c 	beq.w	800480a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	f040 80b4 	bne.w	8004720 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8140 	beq.w	800484e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045d6:	429a      	cmp	r2, r3
 80045d8:	f080 8139 	bcs.w	800484e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ee:	f000 8088 	beq.w	8004702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800460c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800461e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800462a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1d9      	bne.n	80045f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3314      	adds	r3, #20
 8004644:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800464e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3314      	adds	r3, #20
 800465e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004662:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004666:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800466a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e1      	bne.n	800463e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3314      	adds	r3, #20
 8004680:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800468a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800469e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e3      	bne.n	800467a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d2:	f023 0310 	bic.w	r3, r3, #16
 80046d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80046e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e3      	bne.n	80046c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe fce6 	bl	80030ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800470a:	b29b      	uxth	r3, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	b29b      	uxth	r3, r3
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8b6 	bl	8004884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004718:	e099      	b.n	800484e <HAL_UART_IRQHandler+0x50e>
 800471a:	bf00      	nop
 800471c:	08004abb 	.word	0x08004abb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004728:	b29b      	uxth	r3, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 808b 	beq.w	8004852 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800473c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8086 	beq.w	8004852 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800475c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800476a:	647a      	str	r2, [r7, #68]	; 0x44
 800476c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e3      	bne.n	8004746 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3314      	adds	r3, #20
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	623b      	str	r3, [r7, #32]
   return(result);
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3314      	adds	r3, #20
 800479e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047a2:	633a      	str	r2, [r7, #48]	; 0x30
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e3      	bne.n	800477e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	330c      	adds	r3, #12
 80047ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0310 	bic.w	r3, r3, #16
 80047da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047e8:	61fa      	str	r2, [r7, #28]
 80047ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	69b9      	ldr	r1, [r7, #24]
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	617b      	str	r3, [r7, #20]
   return(result);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e3      	bne.n	80047c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f83e 	bl	8004884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004808:	e023      	b.n	8004852 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_UART_IRQHandler+0x4ea>
 8004816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f95d 	bl	8004ae2 <UART_Transmit_IT>
    return;
 8004828:	e014      	b.n	8004854 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00e      	beq.n	8004854 <HAL_UART_IRQHandler+0x514>
 8004836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f99d 	bl	8004b82 <UART_EndTransmit_IT>
    return;
 8004848:	e004      	b.n	8004854 <HAL_UART_IRQHandler+0x514>
    return;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <HAL_UART_IRQHandler+0x514>
      return;
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <HAL_UART_IRQHandler+0x514>
      return;
 8004852:	bf00      	nop
  }
}
 8004854:	37e8      	adds	r7, #232	; 0xe8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop

0800485c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b090      	sub	sp, #64	; 0x40
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ac:	e050      	b.n	8004950 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d04c      	beq.n	8004950 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <UART_WaitOnFlagUntilTimeout+0x30>
 80048bc:	f7fe fac6 	bl	8002e4c <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d241      	bcs.n	8004950 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ec:	637a      	str	r2, [r7, #52]	; 0x34
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3314      	adds	r3, #20
 8004906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	613b      	str	r3, [r7, #16]
   return(result);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	63bb      	str	r3, [r7, #56]	; 0x38
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3314      	adds	r3, #20
 800491e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004920:	623a      	str	r2, [r7, #32]
 8004922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	69f9      	ldr	r1, [r7, #28]
 8004926:	6a3a      	ldr	r2, [r7, #32]
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	61bb      	str	r3, [r7, #24]
   return(result);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e00f      	b.n	8004970 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4013      	ands	r3, r2
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	429a      	cmp	r2, r3
 800496c:	d09f      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3740      	adds	r7, #64	; 0x40
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2222      	movs	r2, #34	; 0x22
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0220 	orr.w	r2, r2, #32
 80049e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b095      	sub	sp, #84	; 0x54
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a1c:	643a      	str	r2, [r7, #64]	; 0x40
 8004a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e5      	bne.n	80049fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3314      	adds	r3, #20
 8004a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d119      	bne.n	8004aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f023 0310 	bic.w	r3, r3, #16
 8004a82:	647b      	str	r3, [r7, #68]	; 0x44
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a8c:	61ba      	str	r2, [r7, #24]
 8004a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	6979      	ldr	r1, [r7, #20]
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e5      	bne.n	8004a6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004aae:	bf00      	nop
 8004ab0:	3754      	adds	r7, #84	; 0x54
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff fecb 	bl	8004870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b21      	cmp	r3, #33	; 0x21
 8004af4:	d13e      	bne.n	8004b74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	d114      	bne.n	8004b2a <UART_Transmit_IT+0x48>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d110      	bne.n	8004b2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	1c9a      	adds	r2, r3, #2
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	621a      	str	r2, [r3, #32]
 8004b28:	e008      	b.n	8004b3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6211      	str	r1, [r2, #32]
 8004b34:	781a      	ldrb	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10f      	bne.n	8004b70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e000      	b.n	8004b76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b74:	2302      	movs	r3, #2
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff fe5a 	bl	800485c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b08c      	sub	sp, #48	; 0x30
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b22      	cmp	r3, #34	; 0x22
 8004bc4:	f040 80ab 	bne.w	8004d1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd0:	d117      	bne.n	8004c02 <UART_Receive_IT+0x50>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d113      	bne.n	8004c02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004c00:	e026      	b.n	8004c50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c14:	d007      	beq.n	8004c26 <UART_Receive_IT+0x74>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <UART_Receive_IT+0x82>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	e008      	b.n	8004c46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d15a      	bne.n	8004d1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0220 	bic.w	r2, r2, #32
 8004c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d135      	bne.n	8004d10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f023 0310 	bic.w	r3, r3, #16
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cca:	623a      	str	r2, [r7, #32]
 8004ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	69f9      	ldr	r1, [r7, #28]
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e5      	bne.n	8004caa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d10a      	bne.n	8004d02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff fdbb 	bl	8004884 <HAL_UARTEx_RxEventCallback>
 8004d0e:	e002      	b.n	8004d16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fb fda7 	bl	8000864 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e002      	b.n	8004d20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3730      	adds	r7, #48	; 0x30
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b0c0      	sub	sp, #256	; 0x100
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	68d9      	ldr	r1, [r3, #12]
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	ea40 0301 	orr.w	r3, r0, r1
 8004d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d80:	f021 010c 	bic.w	r1, r1, #12
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	6999      	ldr	r1, [r3, #24]
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	ea40 0301 	orr.w	r3, r0, r1
 8004dae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b8f      	ldr	r3, [pc, #572]	; (8004ff4 <UART_SetConfig+0x2cc>)
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d005      	beq.n	8004dc8 <UART_SetConfig+0xa0>
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b8d      	ldr	r3, [pc, #564]	; (8004ff8 <UART_SetConfig+0x2d0>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d104      	bne.n	8004dd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fe fcc8 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 8004dcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004dd0:	e003      	b.n	8004dda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dd2:	f7fe fcaf 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8004dd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de4:	f040 810c 	bne.w	8005000 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004df2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004df6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	1891      	adds	r1, r2, r2
 8004e00:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e02:	415b      	adcs	r3, r3
 8004e04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	eb12 0801 	adds.w	r8, r2, r1
 8004e10:	4629      	mov	r1, r5
 8004e12:	eb43 0901 	adc.w	r9, r3, r1
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	eb18 0303 	adds.w	r3, r8, r3
 8004e34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e38:	462b      	mov	r3, r5
 8004e3a:	eb49 0303 	adc.w	r3, r9, r3
 8004e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e56:	460b      	mov	r3, r1
 8004e58:	18db      	adds	r3, r3, r3
 8004e5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	eb42 0303 	adc.w	r3, r2, r3
 8004e62:	657b      	str	r3, [r7, #84]	; 0x54
 8004e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e6c:	f7fb fa38 	bl	80002e0 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4b61      	ldr	r3, [pc, #388]	; (8004ffc <UART_SetConfig+0x2d4>)
 8004e76:	fba3 2302 	umull	r2, r3, r3, r2
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	011c      	lsls	r4, r3, #4
 8004e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	1891      	adds	r1, r2, r2
 8004e96:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e98:	415b      	adcs	r3, r3
 8004e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	eb43 0b01 	adc.w	fp, r3, r1
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec0:	4692      	mov	sl, r2
 8004ec2:	469b      	mov	fp, r3
 8004ec4:	4643      	mov	r3, r8
 8004ec6:	eb1a 0303 	adds.w	r3, sl, r3
 8004eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ee4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ee8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004eec:	460b      	mov	r3, r1
 8004eee:	18db      	adds	r3, r3, r3
 8004ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	eb42 0303 	adc.w	r3, r2, r3
 8004ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8004efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004efe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f02:	f7fb f9ed 	bl	80002e0 <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <UART_SetConfig+0x2d4>)
 8004f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2264      	movs	r2, #100	; 0x64
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	1acb      	subs	r3, r1, r3
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f22:	4b36      	ldr	r3, [pc, #216]	; (8004ffc <UART_SetConfig+0x2d4>)
 8004f24:	fba3 2302 	umull	r2, r3, r3, r2
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f30:	441c      	add	r4, r3
 8004f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f44:	4642      	mov	r2, r8
 8004f46:	464b      	mov	r3, r9
 8004f48:	1891      	adds	r1, r2, r2
 8004f4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f4c:	415b      	adcs	r3, r3
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f54:	4641      	mov	r1, r8
 8004f56:	1851      	adds	r1, r2, r1
 8004f58:	6339      	str	r1, [r7, #48]	; 0x30
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	414b      	adcs	r3, r1
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	00cb      	lsls	r3, r1, #3
 8004f70:	4651      	mov	r1, sl
 8004f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f76:	4651      	mov	r1, sl
 8004f78:	00ca      	lsls	r2, r1, #3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4642      	mov	r2, r8
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f88:	464b      	mov	r3, r9
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	eb42 0303 	adc.w	r3, r2, r3
 8004f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fa8:	460b      	mov	r3, r1
 8004faa:	18db      	adds	r3, r3, r3
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fae:	4613      	mov	r3, r2
 8004fb0:	eb42 0303 	adc.w	r3, r2, r3
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fbe:	f7fb f98f 	bl	80002e0 <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <UART_SetConfig+0x2d4>)
 8004fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	2164      	movs	r1, #100	; 0x64
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	3332      	adds	r3, #50	; 0x32
 8004fda:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <UART_SetConfig+0x2d4>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	f003 0207 	and.w	r2, r3, #7
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4422      	add	r2, r4
 8004fee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ff0:	e105      	b.n	80051fe <UART_SetConfig+0x4d6>
 8004ff2:	bf00      	nop
 8004ff4:	40011000 	.word	0x40011000
 8004ff8:	40011400 	.word	0x40011400
 8004ffc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005004:	2200      	movs	r2, #0
 8005006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800500a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800500e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005012:	4642      	mov	r2, r8
 8005014:	464b      	mov	r3, r9
 8005016:	1891      	adds	r1, r2, r2
 8005018:	6239      	str	r1, [r7, #32]
 800501a:	415b      	adcs	r3, r3
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
 800501e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005022:	4641      	mov	r1, r8
 8005024:	1854      	adds	r4, r2, r1
 8005026:	4649      	mov	r1, r9
 8005028:	eb43 0501 	adc.w	r5, r3, r1
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	00eb      	lsls	r3, r5, #3
 8005036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800503a:	00e2      	lsls	r2, r4, #3
 800503c:	4614      	mov	r4, r2
 800503e:	461d      	mov	r5, r3
 8005040:	4643      	mov	r3, r8
 8005042:	18e3      	adds	r3, r4, r3
 8005044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005048:	464b      	mov	r3, r9
 800504a:	eb45 0303 	adc.w	r3, r5, r3
 800504e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800505e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800506e:	4629      	mov	r1, r5
 8005070:	008b      	lsls	r3, r1, #2
 8005072:	4621      	mov	r1, r4
 8005074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005078:	4621      	mov	r1, r4
 800507a:	008a      	lsls	r2, r1, #2
 800507c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005080:	f7fb f92e 	bl	80002e0 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4b60      	ldr	r3, [pc, #384]	; (800520c <UART_SetConfig+0x4e4>)
 800508a:	fba3 2302 	umull	r2, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	011c      	lsls	r4, r3, #4
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800509c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	61b9      	str	r1, [r7, #24]
 80050ac:	415b      	adcs	r3, r3
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b4:	4641      	mov	r1, r8
 80050b6:	1851      	adds	r1, r2, r1
 80050b8:	6139      	str	r1, [r7, #16]
 80050ba:	4649      	mov	r1, r9
 80050bc:	414b      	adcs	r3, r1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050cc:	4659      	mov	r1, fp
 80050ce:	00cb      	lsls	r3, r1, #3
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	4651      	mov	r1, sl
 80050d8:	00ca      	lsls	r2, r1, #3
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	4603      	mov	r3, r0
 80050e0:	4642      	mov	r2, r8
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050e8:	464b      	mov	r3, r9
 80050ea:	460a      	mov	r2, r1
 80050ec:	eb42 0303 	adc.w	r3, r2, r3
 80050f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80050fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800510c:	4649      	mov	r1, r9
 800510e:	008b      	lsls	r3, r1, #2
 8005110:	4641      	mov	r1, r8
 8005112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005116:	4641      	mov	r1, r8
 8005118:	008a      	lsls	r2, r1, #2
 800511a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800511e:	f7fb f8df 	bl	80002e0 <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4b39      	ldr	r3, [pc, #228]	; (800520c <UART_SetConfig+0x4e4>)
 8005128:	fba3 1302 	umull	r1, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	2164      	movs	r1, #100	; 0x64
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	3332      	adds	r3, #50	; 0x32
 800513a:	4a34      	ldr	r2, [pc, #208]	; (800520c <UART_SetConfig+0x4e4>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005146:	441c      	add	r4, r3
 8005148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514c:	2200      	movs	r2, #0
 800514e:	673b      	str	r3, [r7, #112]	; 0x70
 8005150:	677a      	str	r2, [r7, #116]	; 0x74
 8005152:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005156:	4642      	mov	r2, r8
 8005158:	464b      	mov	r3, r9
 800515a:	1891      	adds	r1, r2, r2
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	415b      	adcs	r3, r3
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005166:	4641      	mov	r1, r8
 8005168:	1851      	adds	r1, r2, r1
 800516a:	6039      	str	r1, [r7, #0]
 800516c:	4649      	mov	r1, r9
 800516e:	414b      	adcs	r3, r1
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800517e:	4659      	mov	r1, fp
 8005180:	00cb      	lsls	r3, r1, #3
 8005182:	4651      	mov	r1, sl
 8005184:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005188:	4651      	mov	r1, sl
 800518a:	00ca      	lsls	r2, r1, #3
 800518c:	4610      	mov	r0, r2
 800518e:	4619      	mov	r1, r3
 8005190:	4603      	mov	r3, r0
 8005192:	4642      	mov	r2, r8
 8005194:	189b      	adds	r3, r3, r2
 8005196:	66bb      	str	r3, [r7, #104]	; 0x68
 8005198:	464b      	mov	r3, r9
 800519a:	460a      	mov	r2, r1
 800519c:	eb42 0303 	adc.w	r3, r2, r3
 80051a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	663b      	str	r3, [r7, #96]	; 0x60
 80051ac:	667a      	str	r2, [r7, #100]	; 0x64
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051ba:	4649      	mov	r1, r9
 80051bc:	008b      	lsls	r3, r1, #2
 80051be:	4641      	mov	r1, r8
 80051c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c4:	4641      	mov	r1, r8
 80051c6:	008a      	lsls	r2, r1, #2
 80051c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051cc:	f7fb f888 	bl	80002e0 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4b0d      	ldr	r3, [pc, #52]	; (800520c <UART_SetConfig+0x4e4>)
 80051d6:	fba3 1302 	umull	r1, r3, r3, r2
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	2164      	movs	r1, #100	; 0x64
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	3332      	adds	r3, #50	; 0x32
 80051e8:	4a08      	ldr	r2, [pc, #32]	; (800520c <UART_SetConfig+0x4e4>)
 80051ea:	fba2 2303 	umull	r2, r3, r2, r3
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	f003 020f 	and.w	r2, r3, #15
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4422      	add	r2, r4
 80051fc:	609a      	str	r2, [r3, #8]
}
 80051fe:	bf00      	nop
 8005200:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005204:	46bd      	mov	sp, r7
 8005206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520a:	bf00      	nop
 800520c:	51eb851f 	.word	0x51eb851f

08005210 <__errno>:
 8005210:	4b01      	ldr	r3, [pc, #4]	; (8005218 <__errno+0x8>)
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	200000a0 	.word	0x200000a0

0800521c <__libc_init_array>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	4d0d      	ldr	r5, [pc, #52]	; (8005254 <__libc_init_array+0x38>)
 8005220:	4c0d      	ldr	r4, [pc, #52]	; (8005258 <__libc_init_array+0x3c>)
 8005222:	1b64      	subs	r4, r4, r5
 8005224:	10a4      	asrs	r4, r4, #2
 8005226:	2600      	movs	r6, #0
 8005228:	42a6      	cmp	r6, r4
 800522a:	d109      	bne.n	8005240 <__libc_init_array+0x24>
 800522c:	4d0b      	ldr	r5, [pc, #44]	; (800525c <__libc_init_array+0x40>)
 800522e:	4c0c      	ldr	r4, [pc, #48]	; (8005260 <__libc_init_array+0x44>)
 8005230:	f001 f93c 	bl	80064ac <_init>
 8005234:	1b64      	subs	r4, r4, r5
 8005236:	10a4      	asrs	r4, r4, #2
 8005238:	2600      	movs	r6, #0
 800523a:	42a6      	cmp	r6, r4
 800523c:	d105      	bne.n	800524a <__libc_init_array+0x2e>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	f855 3b04 	ldr.w	r3, [r5], #4
 8005244:	4798      	blx	r3
 8005246:	3601      	adds	r6, #1
 8005248:	e7ee      	b.n	8005228 <__libc_init_array+0xc>
 800524a:	f855 3b04 	ldr.w	r3, [r5], #4
 800524e:	4798      	blx	r3
 8005250:	3601      	adds	r6, #1
 8005252:	e7f2      	b.n	800523a <__libc_init_array+0x1e>
 8005254:	08006c50 	.word	0x08006c50
 8005258:	08006c50 	.word	0x08006c50
 800525c:	08006c50 	.word	0x08006c50
 8005260:	08006c54 	.word	0x08006c54

08005264 <memset>:
 8005264:	4402      	add	r2, r0
 8005266:	4603      	mov	r3, r0
 8005268:	4293      	cmp	r3, r2
 800526a:	d100      	bne.n	800526e <memset+0xa>
 800526c:	4770      	bx	lr
 800526e:	f803 1b01 	strb.w	r1, [r3], #1
 8005272:	e7f9      	b.n	8005268 <memset+0x4>

08005274 <iprintf>:
 8005274:	b40f      	push	{r0, r1, r2, r3}
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <iprintf+0x2c>)
 8005278:	b513      	push	{r0, r1, r4, lr}
 800527a:	681c      	ldr	r4, [r3, #0]
 800527c:	b124      	cbz	r4, 8005288 <iprintf+0x14>
 800527e:	69a3      	ldr	r3, [r4, #24]
 8005280:	b913      	cbnz	r3, 8005288 <iprintf+0x14>
 8005282:	4620      	mov	r0, r4
 8005284:	f000 fb10 	bl	80058a8 <__sinit>
 8005288:	ab05      	add	r3, sp, #20
 800528a:	9a04      	ldr	r2, [sp, #16]
 800528c:	68a1      	ldr	r1, [r4, #8]
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	4620      	mov	r0, r4
 8005292:	f000 fd33 	bl	8005cfc <_vfiprintf_r>
 8005296:	b002      	add	sp, #8
 8005298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800529c:	b004      	add	sp, #16
 800529e:	4770      	bx	lr
 80052a0:	200000a0 	.word	0x200000a0

080052a4 <_puts_r>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	460e      	mov	r6, r1
 80052a8:	4605      	mov	r5, r0
 80052aa:	b118      	cbz	r0, 80052b4 <_puts_r+0x10>
 80052ac:	6983      	ldr	r3, [r0, #24]
 80052ae:	b90b      	cbnz	r3, 80052b4 <_puts_r+0x10>
 80052b0:	f000 fafa 	bl	80058a8 <__sinit>
 80052b4:	69ab      	ldr	r3, [r5, #24]
 80052b6:	68ac      	ldr	r4, [r5, #8]
 80052b8:	b913      	cbnz	r3, 80052c0 <_puts_r+0x1c>
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 faf4 	bl	80058a8 <__sinit>
 80052c0:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <_puts_r+0xd0>)
 80052c2:	429c      	cmp	r4, r3
 80052c4:	d120      	bne.n	8005308 <_puts_r+0x64>
 80052c6:	686c      	ldr	r4, [r5, #4]
 80052c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ca:	07db      	lsls	r3, r3, #31
 80052cc:	d405      	bmi.n	80052da <_puts_r+0x36>
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	0598      	lsls	r0, r3, #22
 80052d2:	d402      	bmi.n	80052da <_puts_r+0x36>
 80052d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d6:	f000 fb97 	bl	8005a08 <__retarget_lock_acquire_recursive>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	0719      	lsls	r1, r3, #28
 80052de:	d51d      	bpl.n	800531c <_puts_r+0x78>
 80052e0:	6923      	ldr	r3, [r4, #16]
 80052e2:	b1db      	cbz	r3, 800531c <_puts_r+0x78>
 80052e4:	3e01      	subs	r6, #1
 80052e6:	68a3      	ldr	r3, [r4, #8]
 80052e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052ec:	3b01      	subs	r3, #1
 80052ee:	60a3      	str	r3, [r4, #8]
 80052f0:	bb39      	cbnz	r1, 8005342 <_puts_r+0x9e>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da38      	bge.n	8005368 <_puts_r+0xc4>
 80052f6:	4622      	mov	r2, r4
 80052f8:	210a      	movs	r1, #10
 80052fa:	4628      	mov	r0, r5
 80052fc:	f000 f8dc 	bl	80054b8 <__swbuf_r>
 8005300:	3001      	adds	r0, #1
 8005302:	d011      	beq.n	8005328 <_puts_r+0x84>
 8005304:	250a      	movs	r5, #10
 8005306:	e011      	b.n	800532c <_puts_r+0x88>
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <_puts_r+0xd4>)
 800530a:	429c      	cmp	r4, r3
 800530c:	d101      	bne.n	8005312 <_puts_r+0x6e>
 800530e:	68ac      	ldr	r4, [r5, #8]
 8005310:	e7da      	b.n	80052c8 <_puts_r+0x24>
 8005312:	4b1a      	ldr	r3, [pc, #104]	; (800537c <_puts_r+0xd8>)
 8005314:	429c      	cmp	r4, r3
 8005316:	bf08      	it	eq
 8005318:	68ec      	ldreq	r4, [r5, #12]
 800531a:	e7d5      	b.n	80052c8 <_puts_r+0x24>
 800531c:	4621      	mov	r1, r4
 800531e:	4628      	mov	r0, r5
 8005320:	f000 f91c 	bl	800555c <__swsetup_r>
 8005324:	2800      	cmp	r0, #0
 8005326:	d0dd      	beq.n	80052e4 <_puts_r+0x40>
 8005328:	f04f 35ff 	mov.w	r5, #4294967295
 800532c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800532e:	07da      	lsls	r2, r3, #31
 8005330:	d405      	bmi.n	800533e <_puts_r+0x9a>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	059b      	lsls	r3, r3, #22
 8005336:	d402      	bmi.n	800533e <_puts_r+0x9a>
 8005338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800533a:	f000 fb66 	bl	8005a0a <__retarget_lock_release_recursive>
 800533e:	4628      	mov	r0, r5
 8005340:	bd70      	pop	{r4, r5, r6, pc}
 8005342:	2b00      	cmp	r3, #0
 8005344:	da04      	bge.n	8005350 <_puts_r+0xac>
 8005346:	69a2      	ldr	r2, [r4, #24]
 8005348:	429a      	cmp	r2, r3
 800534a:	dc06      	bgt.n	800535a <_puts_r+0xb6>
 800534c:	290a      	cmp	r1, #10
 800534e:	d004      	beq.n	800535a <_puts_r+0xb6>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	7019      	strb	r1, [r3, #0]
 8005358:	e7c5      	b.n	80052e6 <_puts_r+0x42>
 800535a:	4622      	mov	r2, r4
 800535c:	4628      	mov	r0, r5
 800535e:	f000 f8ab 	bl	80054b8 <__swbuf_r>
 8005362:	3001      	adds	r0, #1
 8005364:	d1bf      	bne.n	80052e6 <_puts_r+0x42>
 8005366:	e7df      	b.n	8005328 <_puts_r+0x84>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	250a      	movs	r5, #10
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	6022      	str	r2, [r4, #0]
 8005370:	701d      	strb	r5, [r3, #0]
 8005372:	e7db      	b.n	800532c <_puts_r+0x88>
 8005374:	08006bd4 	.word	0x08006bd4
 8005378:	08006bf4 	.word	0x08006bf4
 800537c:	08006bb4 	.word	0x08006bb4

08005380 <puts>:
 8005380:	4b02      	ldr	r3, [pc, #8]	; (800538c <puts+0xc>)
 8005382:	4601      	mov	r1, r0
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	f7ff bf8d 	b.w	80052a4 <_puts_r>
 800538a:	bf00      	nop
 800538c:	200000a0 	.word	0x200000a0

08005390 <strcat>:
 8005390:	b510      	push	{r4, lr}
 8005392:	4602      	mov	r2, r0
 8005394:	7814      	ldrb	r4, [r2, #0]
 8005396:	4613      	mov	r3, r2
 8005398:	3201      	adds	r2, #1
 800539a:	2c00      	cmp	r4, #0
 800539c:	d1fa      	bne.n	8005394 <strcat+0x4>
 800539e:	3b01      	subs	r3, #1
 80053a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053a8:	2a00      	cmp	r2, #0
 80053aa:	d1f9      	bne.n	80053a0 <strcat+0x10>
 80053ac:	bd10      	pop	{r4, pc}

080053ae <strncpy>:
 80053ae:	b510      	push	{r4, lr}
 80053b0:	3901      	subs	r1, #1
 80053b2:	4603      	mov	r3, r0
 80053b4:	b132      	cbz	r2, 80053c4 <strncpy+0x16>
 80053b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80053ba:	f803 4b01 	strb.w	r4, [r3], #1
 80053be:	3a01      	subs	r2, #1
 80053c0:	2c00      	cmp	r4, #0
 80053c2:	d1f7      	bne.n	80053b4 <strncpy+0x6>
 80053c4:	441a      	add	r2, r3
 80053c6:	2100      	movs	r1, #0
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d100      	bne.n	80053ce <strncpy+0x20>
 80053cc:	bd10      	pop	{r4, pc}
 80053ce:	f803 1b01 	strb.w	r1, [r3], #1
 80053d2:	e7f9      	b.n	80053c8 <strncpy+0x1a>

080053d4 <strstr>:
 80053d4:	780a      	ldrb	r2, [r1, #0]
 80053d6:	b570      	push	{r4, r5, r6, lr}
 80053d8:	b96a      	cbnz	r2, 80053f6 <strstr+0x22>
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	429a      	cmp	r2, r3
 80053de:	d109      	bne.n	80053f4 <strstr+0x20>
 80053e0:	460c      	mov	r4, r1
 80053e2:	4605      	mov	r5, r0
 80053e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0f6      	beq.n	80053da <strstr+0x6>
 80053ec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80053f0:	429e      	cmp	r6, r3
 80053f2:	d0f7      	beq.n	80053e4 <strstr+0x10>
 80053f4:	3001      	adds	r0, #1
 80053f6:	7803      	ldrb	r3, [r0, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1ef      	bne.n	80053dc <strstr+0x8>
 80053fc:	4618      	mov	r0, r3
 80053fe:	e7ec      	b.n	80053da <strstr+0x6>

08005400 <strtok>:
 8005400:	4b16      	ldr	r3, [pc, #88]	; (800545c <strtok+0x5c>)
 8005402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005404:	681e      	ldr	r6, [r3, #0]
 8005406:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005408:	4605      	mov	r5, r0
 800540a:	b9fc      	cbnz	r4, 800544c <strtok+0x4c>
 800540c:	2050      	movs	r0, #80	; 0x50
 800540e:	9101      	str	r1, [sp, #4]
 8005410:	f000 fb62 	bl	8005ad8 <malloc>
 8005414:	9901      	ldr	r1, [sp, #4]
 8005416:	65b0      	str	r0, [r6, #88]	; 0x58
 8005418:	4602      	mov	r2, r0
 800541a:	b920      	cbnz	r0, 8005426 <strtok+0x26>
 800541c:	4b10      	ldr	r3, [pc, #64]	; (8005460 <strtok+0x60>)
 800541e:	4811      	ldr	r0, [pc, #68]	; (8005464 <strtok+0x64>)
 8005420:	2157      	movs	r1, #87	; 0x57
 8005422:	f000 f909 	bl	8005638 <__assert_func>
 8005426:	e9c0 4400 	strd	r4, r4, [r0]
 800542a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800542e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005432:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005436:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800543a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800543e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005442:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005446:	6184      	str	r4, [r0, #24]
 8005448:	7704      	strb	r4, [r0, #28]
 800544a:	6244      	str	r4, [r0, #36]	; 0x24
 800544c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800544e:	2301      	movs	r3, #1
 8005450:	4628      	mov	r0, r5
 8005452:	b002      	add	sp, #8
 8005454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005458:	f000 b806 	b.w	8005468 <__strtok_r>
 800545c:	200000a0 	.word	0x200000a0
 8005460:	08006b04 	.word	0x08006b04
 8005464:	08006b1b 	.word	0x08006b1b

08005468 <__strtok_r>:
 8005468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546a:	b908      	cbnz	r0, 8005470 <__strtok_r+0x8>
 800546c:	6810      	ldr	r0, [r2, #0]
 800546e:	b188      	cbz	r0, 8005494 <__strtok_r+0x2c>
 8005470:	4604      	mov	r4, r0
 8005472:	4620      	mov	r0, r4
 8005474:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005478:	460f      	mov	r7, r1
 800547a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800547e:	b91e      	cbnz	r6, 8005488 <__strtok_r+0x20>
 8005480:	b965      	cbnz	r5, 800549c <__strtok_r+0x34>
 8005482:	6015      	str	r5, [r2, #0]
 8005484:	4628      	mov	r0, r5
 8005486:	e005      	b.n	8005494 <__strtok_r+0x2c>
 8005488:	42b5      	cmp	r5, r6
 800548a:	d1f6      	bne.n	800547a <__strtok_r+0x12>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f0      	bne.n	8005472 <__strtok_r+0xa>
 8005490:	6014      	str	r4, [r2, #0]
 8005492:	7003      	strb	r3, [r0, #0]
 8005494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005496:	461c      	mov	r4, r3
 8005498:	e00c      	b.n	80054b4 <__strtok_r+0x4c>
 800549a:	b915      	cbnz	r5, 80054a2 <__strtok_r+0x3a>
 800549c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80054a0:	460e      	mov	r6, r1
 80054a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80054a6:	42ab      	cmp	r3, r5
 80054a8:	d1f7      	bne.n	800549a <__strtok_r+0x32>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f3      	beq.n	8005496 <__strtok_r+0x2e>
 80054ae:	2300      	movs	r3, #0
 80054b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80054b4:	6014      	str	r4, [r2, #0]
 80054b6:	e7ed      	b.n	8005494 <__strtok_r+0x2c>

080054b8 <__swbuf_r>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	460e      	mov	r6, r1
 80054bc:	4614      	mov	r4, r2
 80054be:	4605      	mov	r5, r0
 80054c0:	b118      	cbz	r0, 80054ca <__swbuf_r+0x12>
 80054c2:	6983      	ldr	r3, [r0, #24]
 80054c4:	b90b      	cbnz	r3, 80054ca <__swbuf_r+0x12>
 80054c6:	f000 f9ef 	bl	80058a8 <__sinit>
 80054ca:	4b21      	ldr	r3, [pc, #132]	; (8005550 <__swbuf_r+0x98>)
 80054cc:	429c      	cmp	r4, r3
 80054ce:	d12b      	bne.n	8005528 <__swbuf_r+0x70>
 80054d0:	686c      	ldr	r4, [r5, #4]
 80054d2:	69a3      	ldr	r3, [r4, #24]
 80054d4:	60a3      	str	r3, [r4, #8]
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	071a      	lsls	r2, r3, #28
 80054da:	d52f      	bpl.n	800553c <__swbuf_r+0x84>
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	b36b      	cbz	r3, 800553c <__swbuf_r+0x84>
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	1ac0      	subs	r0, r0, r3
 80054e6:	6963      	ldr	r3, [r4, #20]
 80054e8:	b2f6      	uxtb	r6, r6
 80054ea:	4283      	cmp	r3, r0
 80054ec:	4637      	mov	r7, r6
 80054ee:	dc04      	bgt.n	80054fa <__swbuf_r+0x42>
 80054f0:	4621      	mov	r1, r4
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 f944 	bl	8005780 <_fflush_r>
 80054f8:	bb30      	cbnz	r0, 8005548 <__swbuf_r+0x90>
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	60a3      	str	r3, [r4, #8]
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	6022      	str	r2, [r4, #0]
 8005506:	701e      	strb	r6, [r3, #0]
 8005508:	6963      	ldr	r3, [r4, #20]
 800550a:	3001      	adds	r0, #1
 800550c:	4283      	cmp	r3, r0
 800550e:	d004      	beq.n	800551a <__swbuf_r+0x62>
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	07db      	lsls	r3, r3, #31
 8005514:	d506      	bpl.n	8005524 <__swbuf_r+0x6c>
 8005516:	2e0a      	cmp	r6, #10
 8005518:	d104      	bne.n	8005524 <__swbuf_r+0x6c>
 800551a:	4621      	mov	r1, r4
 800551c:	4628      	mov	r0, r5
 800551e:	f000 f92f 	bl	8005780 <_fflush_r>
 8005522:	b988      	cbnz	r0, 8005548 <__swbuf_r+0x90>
 8005524:	4638      	mov	r0, r7
 8005526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <__swbuf_r+0x9c>)
 800552a:	429c      	cmp	r4, r3
 800552c:	d101      	bne.n	8005532 <__swbuf_r+0x7a>
 800552e:	68ac      	ldr	r4, [r5, #8]
 8005530:	e7cf      	b.n	80054d2 <__swbuf_r+0x1a>
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <__swbuf_r+0xa0>)
 8005534:	429c      	cmp	r4, r3
 8005536:	bf08      	it	eq
 8005538:	68ec      	ldreq	r4, [r5, #12]
 800553a:	e7ca      	b.n	80054d2 <__swbuf_r+0x1a>
 800553c:	4621      	mov	r1, r4
 800553e:	4628      	mov	r0, r5
 8005540:	f000 f80c 	bl	800555c <__swsetup_r>
 8005544:	2800      	cmp	r0, #0
 8005546:	d0cb      	beq.n	80054e0 <__swbuf_r+0x28>
 8005548:	f04f 37ff 	mov.w	r7, #4294967295
 800554c:	e7ea      	b.n	8005524 <__swbuf_r+0x6c>
 800554e:	bf00      	nop
 8005550:	08006bd4 	.word	0x08006bd4
 8005554:	08006bf4 	.word	0x08006bf4
 8005558:	08006bb4 	.word	0x08006bb4

0800555c <__swsetup_r>:
 800555c:	4b32      	ldr	r3, [pc, #200]	; (8005628 <__swsetup_r+0xcc>)
 800555e:	b570      	push	{r4, r5, r6, lr}
 8005560:	681d      	ldr	r5, [r3, #0]
 8005562:	4606      	mov	r6, r0
 8005564:	460c      	mov	r4, r1
 8005566:	b125      	cbz	r5, 8005572 <__swsetup_r+0x16>
 8005568:	69ab      	ldr	r3, [r5, #24]
 800556a:	b913      	cbnz	r3, 8005572 <__swsetup_r+0x16>
 800556c:	4628      	mov	r0, r5
 800556e:	f000 f99b 	bl	80058a8 <__sinit>
 8005572:	4b2e      	ldr	r3, [pc, #184]	; (800562c <__swsetup_r+0xd0>)
 8005574:	429c      	cmp	r4, r3
 8005576:	d10f      	bne.n	8005598 <__swsetup_r+0x3c>
 8005578:	686c      	ldr	r4, [r5, #4]
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005580:	0719      	lsls	r1, r3, #28
 8005582:	d42c      	bmi.n	80055de <__swsetup_r+0x82>
 8005584:	06dd      	lsls	r5, r3, #27
 8005586:	d411      	bmi.n	80055ac <__swsetup_r+0x50>
 8005588:	2309      	movs	r3, #9
 800558a:	6033      	str	r3, [r6, #0]
 800558c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005590:	81a3      	strh	r3, [r4, #12]
 8005592:	f04f 30ff 	mov.w	r0, #4294967295
 8005596:	e03e      	b.n	8005616 <__swsetup_r+0xba>
 8005598:	4b25      	ldr	r3, [pc, #148]	; (8005630 <__swsetup_r+0xd4>)
 800559a:	429c      	cmp	r4, r3
 800559c:	d101      	bne.n	80055a2 <__swsetup_r+0x46>
 800559e:	68ac      	ldr	r4, [r5, #8]
 80055a0:	e7eb      	b.n	800557a <__swsetup_r+0x1e>
 80055a2:	4b24      	ldr	r3, [pc, #144]	; (8005634 <__swsetup_r+0xd8>)
 80055a4:	429c      	cmp	r4, r3
 80055a6:	bf08      	it	eq
 80055a8:	68ec      	ldreq	r4, [r5, #12]
 80055aa:	e7e6      	b.n	800557a <__swsetup_r+0x1e>
 80055ac:	0758      	lsls	r0, r3, #29
 80055ae:	d512      	bpl.n	80055d6 <__swsetup_r+0x7a>
 80055b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055b2:	b141      	cbz	r1, 80055c6 <__swsetup_r+0x6a>
 80055b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b8:	4299      	cmp	r1, r3
 80055ba:	d002      	beq.n	80055c2 <__swsetup_r+0x66>
 80055bc:	4630      	mov	r0, r6
 80055be:	f000 fa93 	bl	8005ae8 <_free_r>
 80055c2:	2300      	movs	r3, #0
 80055c4:	6363      	str	r3, [r4, #52]	; 0x34
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055cc:	81a3      	strh	r3, [r4, #12]
 80055ce:	2300      	movs	r3, #0
 80055d0:	6063      	str	r3, [r4, #4]
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	f043 0308 	orr.w	r3, r3, #8
 80055dc:	81a3      	strh	r3, [r4, #12]
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	b94b      	cbnz	r3, 80055f6 <__swsetup_r+0x9a>
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ec:	d003      	beq.n	80055f6 <__swsetup_r+0x9a>
 80055ee:	4621      	mov	r1, r4
 80055f0:	4630      	mov	r0, r6
 80055f2:	f000 fa31 	bl	8005a58 <__smakebuf_r>
 80055f6:	89a0      	ldrh	r0, [r4, #12]
 80055f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055fc:	f010 0301 	ands.w	r3, r0, #1
 8005600:	d00a      	beq.n	8005618 <__swsetup_r+0xbc>
 8005602:	2300      	movs	r3, #0
 8005604:	60a3      	str	r3, [r4, #8]
 8005606:	6963      	ldr	r3, [r4, #20]
 8005608:	425b      	negs	r3, r3
 800560a:	61a3      	str	r3, [r4, #24]
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	b943      	cbnz	r3, 8005622 <__swsetup_r+0xc6>
 8005610:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005614:	d1ba      	bne.n	800558c <__swsetup_r+0x30>
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	0781      	lsls	r1, r0, #30
 800561a:	bf58      	it	pl
 800561c:	6963      	ldrpl	r3, [r4, #20]
 800561e:	60a3      	str	r3, [r4, #8]
 8005620:	e7f4      	b.n	800560c <__swsetup_r+0xb0>
 8005622:	2000      	movs	r0, #0
 8005624:	e7f7      	b.n	8005616 <__swsetup_r+0xba>
 8005626:	bf00      	nop
 8005628:	200000a0 	.word	0x200000a0
 800562c:	08006bd4 	.word	0x08006bd4
 8005630:	08006bf4 	.word	0x08006bf4
 8005634:	08006bb4 	.word	0x08006bb4

08005638 <__assert_func>:
 8005638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800563a:	4614      	mov	r4, r2
 800563c:	461a      	mov	r2, r3
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <__assert_func+0x2c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4605      	mov	r5, r0
 8005644:	68d8      	ldr	r0, [r3, #12]
 8005646:	b14c      	cbz	r4, 800565c <__assert_func+0x24>
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <__assert_func+0x30>)
 800564a:	9100      	str	r1, [sp, #0]
 800564c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005650:	4906      	ldr	r1, [pc, #24]	; (800566c <__assert_func+0x34>)
 8005652:	462b      	mov	r3, r5
 8005654:	f000 f9a6 	bl	80059a4 <fiprintf>
 8005658:	f000 fe7a 	bl	8006350 <abort>
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <__assert_func+0x38>)
 800565e:	461c      	mov	r4, r3
 8005660:	e7f3      	b.n	800564a <__assert_func+0x12>
 8005662:	bf00      	nop
 8005664:	200000a0 	.word	0x200000a0
 8005668:	08006b78 	.word	0x08006b78
 800566c:	08006b85 	.word	0x08006b85
 8005670:	08006bb3 	.word	0x08006bb3

08005674 <__sflush_r>:
 8005674:	898a      	ldrh	r2, [r1, #12]
 8005676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567a:	4605      	mov	r5, r0
 800567c:	0710      	lsls	r0, r2, #28
 800567e:	460c      	mov	r4, r1
 8005680:	d458      	bmi.n	8005734 <__sflush_r+0xc0>
 8005682:	684b      	ldr	r3, [r1, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	dc05      	bgt.n	8005694 <__sflush_r+0x20>
 8005688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	dc02      	bgt.n	8005694 <__sflush_r+0x20>
 800568e:	2000      	movs	r0, #0
 8005690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005696:	2e00      	cmp	r6, #0
 8005698:	d0f9      	beq.n	800568e <__sflush_r+0x1a>
 800569a:	2300      	movs	r3, #0
 800569c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056a0:	682f      	ldr	r7, [r5, #0]
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	d032      	beq.n	800570c <__sflush_r+0x98>
 80056a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	075a      	lsls	r2, r3, #29
 80056ac:	d505      	bpl.n	80056ba <__sflush_r+0x46>
 80056ae:	6863      	ldr	r3, [r4, #4]
 80056b0:	1ac0      	subs	r0, r0, r3
 80056b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056b4:	b10b      	cbz	r3, 80056ba <__sflush_r+0x46>
 80056b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056b8:	1ac0      	subs	r0, r0, r3
 80056ba:	2300      	movs	r3, #0
 80056bc:	4602      	mov	r2, r0
 80056be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056c0:	6a21      	ldr	r1, [r4, #32]
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b0      	blx	r6
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	d106      	bne.n	80056da <__sflush_r+0x66>
 80056cc:	6829      	ldr	r1, [r5, #0]
 80056ce:	291d      	cmp	r1, #29
 80056d0:	d82c      	bhi.n	800572c <__sflush_r+0xb8>
 80056d2:	4a2a      	ldr	r2, [pc, #168]	; (800577c <__sflush_r+0x108>)
 80056d4:	40ca      	lsrs	r2, r1
 80056d6:	07d6      	lsls	r6, r2, #31
 80056d8:	d528      	bpl.n	800572c <__sflush_r+0xb8>
 80056da:	2200      	movs	r2, #0
 80056dc:	6062      	str	r2, [r4, #4]
 80056de:	04d9      	lsls	r1, r3, #19
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	6022      	str	r2, [r4, #0]
 80056e4:	d504      	bpl.n	80056f0 <__sflush_r+0x7c>
 80056e6:	1c42      	adds	r2, r0, #1
 80056e8:	d101      	bne.n	80056ee <__sflush_r+0x7a>
 80056ea:	682b      	ldr	r3, [r5, #0]
 80056ec:	b903      	cbnz	r3, 80056f0 <__sflush_r+0x7c>
 80056ee:	6560      	str	r0, [r4, #84]	; 0x54
 80056f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056f2:	602f      	str	r7, [r5, #0]
 80056f4:	2900      	cmp	r1, #0
 80056f6:	d0ca      	beq.n	800568e <__sflush_r+0x1a>
 80056f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056fc:	4299      	cmp	r1, r3
 80056fe:	d002      	beq.n	8005706 <__sflush_r+0x92>
 8005700:	4628      	mov	r0, r5
 8005702:	f000 f9f1 	bl	8005ae8 <_free_r>
 8005706:	2000      	movs	r0, #0
 8005708:	6360      	str	r0, [r4, #52]	; 0x34
 800570a:	e7c1      	b.n	8005690 <__sflush_r+0x1c>
 800570c:	6a21      	ldr	r1, [r4, #32]
 800570e:	2301      	movs	r3, #1
 8005710:	4628      	mov	r0, r5
 8005712:	47b0      	blx	r6
 8005714:	1c41      	adds	r1, r0, #1
 8005716:	d1c7      	bne.n	80056a8 <__sflush_r+0x34>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0c4      	beq.n	80056a8 <__sflush_r+0x34>
 800571e:	2b1d      	cmp	r3, #29
 8005720:	d001      	beq.n	8005726 <__sflush_r+0xb2>
 8005722:	2b16      	cmp	r3, #22
 8005724:	d101      	bne.n	800572a <__sflush_r+0xb6>
 8005726:	602f      	str	r7, [r5, #0]
 8005728:	e7b1      	b.n	800568e <__sflush_r+0x1a>
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005730:	81a3      	strh	r3, [r4, #12]
 8005732:	e7ad      	b.n	8005690 <__sflush_r+0x1c>
 8005734:	690f      	ldr	r7, [r1, #16]
 8005736:	2f00      	cmp	r7, #0
 8005738:	d0a9      	beq.n	800568e <__sflush_r+0x1a>
 800573a:	0793      	lsls	r3, r2, #30
 800573c:	680e      	ldr	r6, [r1, #0]
 800573e:	bf08      	it	eq
 8005740:	694b      	ldreq	r3, [r1, #20]
 8005742:	600f      	str	r7, [r1, #0]
 8005744:	bf18      	it	ne
 8005746:	2300      	movne	r3, #0
 8005748:	eba6 0807 	sub.w	r8, r6, r7
 800574c:	608b      	str	r3, [r1, #8]
 800574e:	f1b8 0f00 	cmp.w	r8, #0
 8005752:	dd9c      	ble.n	800568e <__sflush_r+0x1a>
 8005754:	6a21      	ldr	r1, [r4, #32]
 8005756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005758:	4643      	mov	r3, r8
 800575a:	463a      	mov	r2, r7
 800575c:	4628      	mov	r0, r5
 800575e:	47b0      	blx	r6
 8005760:	2800      	cmp	r0, #0
 8005762:	dc06      	bgt.n	8005772 <__sflush_r+0xfe>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	e78e      	b.n	8005690 <__sflush_r+0x1c>
 8005772:	4407      	add	r7, r0
 8005774:	eba8 0800 	sub.w	r8, r8, r0
 8005778:	e7e9      	b.n	800574e <__sflush_r+0xda>
 800577a:	bf00      	nop
 800577c:	20400001 	.word	0x20400001

08005780 <_fflush_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	690b      	ldr	r3, [r1, #16]
 8005784:	4605      	mov	r5, r0
 8005786:	460c      	mov	r4, r1
 8005788:	b913      	cbnz	r3, 8005790 <_fflush_r+0x10>
 800578a:	2500      	movs	r5, #0
 800578c:	4628      	mov	r0, r5
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	b118      	cbz	r0, 800579a <_fflush_r+0x1a>
 8005792:	6983      	ldr	r3, [r0, #24]
 8005794:	b90b      	cbnz	r3, 800579a <_fflush_r+0x1a>
 8005796:	f000 f887 	bl	80058a8 <__sinit>
 800579a:	4b14      	ldr	r3, [pc, #80]	; (80057ec <_fflush_r+0x6c>)
 800579c:	429c      	cmp	r4, r3
 800579e:	d11b      	bne.n	80057d8 <_fflush_r+0x58>
 80057a0:	686c      	ldr	r4, [r5, #4]
 80057a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0ef      	beq.n	800578a <_fflush_r+0xa>
 80057aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057ac:	07d0      	lsls	r0, r2, #31
 80057ae:	d404      	bmi.n	80057ba <_fflush_r+0x3a>
 80057b0:	0599      	lsls	r1, r3, #22
 80057b2:	d402      	bmi.n	80057ba <_fflush_r+0x3a>
 80057b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057b6:	f000 f927 	bl	8005a08 <__retarget_lock_acquire_recursive>
 80057ba:	4628      	mov	r0, r5
 80057bc:	4621      	mov	r1, r4
 80057be:	f7ff ff59 	bl	8005674 <__sflush_r>
 80057c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057c4:	07da      	lsls	r2, r3, #31
 80057c6:	4605      	mov	r5, r0
 80057c8:	d4e0      	bmi.n	800578c <_fflush_r+0xc>
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	059b      	lsls	r3, r3, #22
 80057ce:	d4dd      	bmi.n	800578c <_fflush_r+0xc>
 80057d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057d2:	f000 f91a 	bl	8005a0a <__retarget_lock_release_recursive>
 80057d6:	e7d9      	b.n	800578c <_fflush_r+0xc>
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <_fflush_r+0x70>)
 80057da:	429c      	cmp	r4, r3
 80057dc:	d101      	bne.n	80057e2 <_fflush_r+0x62>
 80057de:	68ac      	ldr	r4, [r5, #8]
 80057e0:	e7df      	b.n	80057a2 <_fflush_r+0x22>
 80057e2:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <_fflush_r+0x74>)
 80057e4:	429c      	cmp	r4, r3
 80057e6:	bf08      	it	eq
 80057e8:	68ec      	ldreq	r4, [r5, #12]
 80057ea:	e7da      	b.n	80057a2 <_fflush_r+0x22>
 80057ec:	08006bd4 	.word	0x08006bd4
 80057f0:	08006bf4 	.word	0x08006bf4
 80057f4:	08006bb4 	.word	0x08006bb4

080057f8 <std>:
 80057f8:	2300      	movs	r3, #0
 80057fa:	b510      	push	{r4, lr}
 80057fc:	4604      	mov	r4, r0
 80057fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005806:	6083      	str	r3, [r0, #8]
 8005808:	8181      	strh	r1, [r0, #12]
 800580a:	6643      	str	r3, [r0, #100]	; 0x64
 800580c:	81c2      	strh	r2, [r0, #14]
 800580e:	6183      	str	r3, [r0, #24]
 8005810:	4619      	mov	r1, r3
 8005812:	2208      	movs	r2, #8
 8005814:	305c      	adds	r0, #92	; 0x5c
 8005816:	f7ff fd25 	bl	8005264 <memset>
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <std+0x38>)
 800581c:	6263      	str	r3, [r4, #36]	; 0x24
 800581e:	4b05      	ldr	r3, [pc, #20]	; (8005834 <std+0x3c>)
 8005820:	62a3      	str	r3, [r4, #40]	; 0x28
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <std+0x40>)
 8005824:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005826:	4b05      	ldr	r3, [pc, #20]	; (800583c <std+0x44>)
 8005828:	6224      	str	r4, [r4, #32]
 800582a:	6323      	str	r3, [r4, #48]	; 0x30
 800582c:	bd10      	pop	{r4, pc}
 800582e:	bf00      	nop
 8005830:	080062a5 	.word	0x080062a5
 8005834:	080062c7 	.word	0x080062c7
 8005838:	080062ff 	.word	0x080062ff
 800583c:	08006323 	.word	0x08006323

08005840 <_cleanup_r>:
 8005840:	4901      	ldr	r1, [pc, #4]	; (8005848 <_cleanup_r+0x8>)
 8005842:	f000 b8c1 	b.w	80059c8 <_fwalk_reent>
 8005846:	bf00      	nop
 8005848:	08005781 	.word	0x08005781

0800584c <__sfmoreglue>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	2268      	movs	r2, #104	; 0x68
 8005850:	1e4d      	subs	r5, r1, #1
 8005852:	4355      	muls	r5, r2
 8005854:	460e      	mov	r6, r1
 8005856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800585a:	f000 f9b1 	bl	8005bc0 <_malloc_r>
 800585e:	4604      	mov	r4, r0
 8005860:	b140      	cbz	r0, 8005874 <__sfmoreglue+0x28>
 8005862:	2100      	movs	r1, #0
 8005864:	e9c0 1600 	strd	r1, r6, [r0]
 8005868:	300c      	adds	r0, #12
 800586a:	60a0      	str	r0, [r4, #8]
 800586c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005870:	f7ff fcf8 	bl	8005264 <memset>
 8005874:	4620      	mov	r0, r4
 8005876:	bd70      	pop	{r4, r5, r6, pc}

08005878 <__sfp_lock_acquire>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__sfp_lock_acquire+0x8>)
 800587a:	f000 b8c5 	b.w	8005a08 <__retarget_lock_acquire_recursive>
 800587e:	bf00      	nop
 8005880:	200065cd 	.word	0x200065cd

08005884 <__sfp_lock_release>:
 8005884:	4801      	ldr	r0, [pc, #4]	; (800588c <__sfp_lock_release+0x8>)
 8005886:	f000 b8c0 	b.w	8005a0a <__retarget_lock_release_recursive>
 800588a:	bf00      	nop
 800588c:	200065cd 	.word	0x200065cd

08005890 <__sinit_lock_acquire>:
 8005890:	4801      	ldr	r0, [pc, #4]	; (8005898 <__sinit_lock_acquire+0x8>)
 8005892:	f000 b8b9 	b.w	8005a08 <__retarget_lock_acquire_recursive>
 8005896:	bf00      	nop
 8005898:	200065ce 	.word	0x200065ce

0800589c <__sinit_lock_release>:
 800589c:	4801      	ldr	r0, [pc, #4]	; (80058a4 <__sinit_lock_release+0x8>)
 800589e:	f000 b8b4 	b.w	8005a0a <__retarget_lock_release_recursive>
 80058a2:	bf00      	nop
 80058a4:	200065ce 	.word	0x200065ce

080058a8 <__sinit>:
 80058a8:	b510      	push	{r4, lr}
 80058aa:	4604      	mov	r4, r0
 80058ac:	f7ff fff0 	bl	8005890 <__sinit_lock_acquire>
 80058b0:	69a3      	ldr	r3, [r4, #24]
 80058b2:	b11b      	cbz	r3, 80058bc <__sinit+0x14>
 80058b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b8:	f7ff bff0 	b.w	800589c <__sinit_lock_release>
 80058bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058c0:	6523      	str	r3, [r4, #80]	; 0x50
 80058c2:	4b13      	ldr	r3, [pc, #76]	; (8005910 <__sinit+0x68>)
 80058c4:	4a13      	ldr	r2, [pc, #76]	; (8005914 <__sinit+0x6c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80058ca:	42a3      	cmp	r3, r4
 80058cc:	bf04      	itt	eq
 80058ce:	2301      	moveq	r3, #1
 80058d0:	61a3      	streq	r3, [r4, #24]
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 f820 	bl	8005918 <__sfp>
 80058d8:	6060      	str	r0, [r4, #4]
 80058da:	4620      	mov	r0, r4
 80058dc:	f000 f81c 	bl	8005918 <__sfp>
 80058e0:	60a0      	str	r0, [r4, #8]
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 f818 	bl	8005918 <__sfp>
 80058e8:	2200      	movs	r2, #0
 80058ea:	60e0      	str	r0, [r4, #12]
 80058ec:	2104      	movs	r1, #4
 80058ee:	6860      	ldr	r0, [r4, #4]
 80058f0:	f7ff ff82 	bl	80057f8 <std>
 80058f4:	68a0      	ldr	r0, [r4, #8]
 80058f6:	2201      	movs	r2, #1
 80058f8:	2109      	movs	r1, #9
 80058fa:	f7ff ff7d 	bl	80057f8 <std>
 80058fe:	68e0      	ldr	r0, [r4, #12]
 8005900:	2202      	movs	r2, #2
 8005902:	2112      	movs	r1, #18
 8005904:	f7ff ff78 	bl	80057f8 <std>
 8005908:	2301      	movs	r3, #1
 800590a:	61a3      	str	r3, [r4, #24]
 800590c:	e7d2      	b.n	80058b4 <__sinit+0xc>
 800590e:	bf00      	nop
 8005910:	08006b00 	.word	0x08006b00
 8005914:	08005841 	.word	0x08005841

08005918 <__sfp>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	4607      	mov	r7, r0
 800591c:	f7ff ffac 	bl	8005878 <__sfp_lock_acquire>
 8005920:	4b1e      	ldr	r3, [pc, #120]	; (800599c <__sfp+0x84>)
 8005922:	681e      	ldr	r6, [r3, #0]
 8005924:	69b3      	ldr	r3, [r6, #24]
 8005926:	b913      	cbnz	r3, 800592e <__sfp+0x16>
 8005928:	4630      	mov	r0, r6
 800592a:	f7ff ffbd 	bl	80058a8 <__sinit>
 800592e:	3648      	adds	r6, #72	; 0x48
 8005930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005934:	3b01      	subs	r3, #1
 8005936:	d503      	bpl.n	8005940 <__sfp+0x28>
 8005938:	6833      	ldr	r3, [r6, #0]
 800593a:	b30b      	cbz	r3, 8005980 <__sfp+0x68>
 800593c:	6836      	ldr	r6, [r6, #0]
 800593e:	e7f7      	b.n	8005930 <__sfp+0x18>
 8005940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005944:	b9d5      	cbnz	r5, 800597c <__sfp+0x64>
 8005946:	4b16      	ldr	r3, [pc, #88]	; (80059a0 <__sfp+0x88>)
 8005948:	60e3      	str	r3, [r4, #12]
 800594a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800594e:	6665      	str	r5, [r4, #100]	; 0x64
 8005950:	f000 f859 	bl	8005a06 <__retarget_lock_init_recursive>
 8005954:	f7ff ff96 	bl	8005884 <__sfp_lock_release>
 8005958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800595c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005960:	6025      	str	r5, [r4, #0]
 8005962:	61a5      	str	r5, [r4, #24]
 8005964:	2208      	movs	r2, #8
 8005966:	4629      	mov	r1, r5
 8005968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800596c:	f7ff fc7a 	bl	8005264 <memset>
 8005970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005978:	4620      	mov	r0, r4
 800597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597c:	3468      	adds	r4, #104	; 0x68
 800597e:	e7d9      	b.n	8005934 <__sfp+0x1c>
 8005980:	2104      	movs	r1, #4
 8005982:	4638      	mov	r0, r7
 8005984:	f7ff ff62 	bl	800584c <__sfmoreglue>
 8005988:	4604      	mov	r4, r0
 800598a:	6030      	str	r0, [r6, #0]
 800598c:	2800      	cmp	r0, #0
 800598e:	d1d5      	bne.n	800593c <__sfp+0x24>
 8005990:	f7ff ff78 	bl	8005884 <__sfp_lock_release>
 8005994:	230c      	movs	r3, #12
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	e7ee      	b.n	8005978 <__sfp+0x60>
 800599a:	bf00      	nop
 800599c:	08006b00 	.word	0x08006b00
 80059a0:	ffff0001 	.word	0xffff0001

080059a4 <fiprintf>:
 80059a4:	b40e      	push	{r1, r2, r3}
 80059a6:	b503      	push	{r0, r1, lr}
 80059a8:	4601      	mov	r1, r0
 80059aa:	ab03      	add	r3, sp, #12
 80059ac:	4805      	ldr	r0, [pc, #20]	; (80059c4 <fiprintf+0x20>)
 80059ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b2:	6800      	ldr	r0, [r0, #0]
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	f000 f9a1 	bl	8005cfc <_vfiprintf_r>
 80059ba:	b002      	add	sp, #8
 80059bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c0:	b003      	add	sp, #12
 80059c2:	4770      	bx	lr
 80059c4:	200000a0 	.word	0x200000a0

080059c8 <_fwalk_reent>:
 80059c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059cc:	4606      	mov	r6, r0
 80059ce:	4688      	mov	r8, r1
 80059d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059d4:	2700      	movs	r7, #0
 80059d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059da:	f1b9 0901 	subs.w	r9, r9, #1
 80059de:	d505      	bpl.n	80059ec <_fwalk_reent+0x24>
 80059e0:	6824      	ldr	r4, [r4, #0]
 80059e2:	2c00      	cmp	r4, #0
 80059e4:	d1f7      	bne.n	80059d6 <_fwalk_reent+0xe>
 80059e6:	4638      	mov	r0, r7
 80059e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ec:	89ab      	ldrh	r3, [r5, #12]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d907      	bls.n	8005a02 <_fwalk_reent+0x3a>
 80059f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059f6:	3301      	adds	r3, #1
 80059f8:	d003      	beq.n	8005a02 <_fwalk_reent+0x3a>
 80059fa:	4629      	mov	r1, r5
 80059fc:	4630      	mov	r0, r6
 80059fe:	47c0      	blx	r8
 8005a00:	4307      	orrs	r7, r0
 8005a02:	3568      	adds	r5, #104	; 0x68
 8005a04:	e7e9      	b.n	80059da <_fwalk_reent+0x12>

08005a06 <__retarget_lock_init_recursive>:
 8005a06:	4770      	bx	lr

08005a08 <__retarget_lock_acquire_recursive>:
 8005a08:	4770      	bx	lr

08005a0a <__retarget_lock_release_recursive>:
 8005a0a:	4770      	bx	lr

08005a0c <__swhatbuf_r>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	460e      	mov	r6, r1
 8005a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a14:	2900      	cmp	r1, #0
 8005a16:	b096      	sub	sp, #88	; 0x58
 8005a18:	4614      	mov	r4, r2
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	da08      	bge.n	8005a30 <__swhatbuf_r+0x24>
 8005a1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	602a      	str	r2, [r5, #0]
 8005a26:	061a      	lsls	r2, r3, #24
 8005a28:	d410      	bmi.n	8005a4c <__swhatbuf_r+0x40>
 8005a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a2e:	e00e      	b.n	8005a4e <__swhatbuf_r+0x42>
 8005a30:	466a      	mov	r2, sp
 8005a32:	f000 fca5 	bl	8006380 <_fstat_r>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	dbf1      	blt.n	8005a1e <__swhatbuf_r+0x12>
 8005a3a:	9a01      	ldr	r2, [sp, #4]
 8005a3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a44:	425a      	negs	r2, r3
 8005a46:	415a      	adcs	r2, r3
 8005a48:	602a      	str	r2, [r5, #0]
 8005a4a:	e7ee      	b.n	8005a2a <__swhatbuf_r+0x1e>
 8005a4c:	2340      	movs	r3, #64	; 0x40
 8005a4e:	2000      	movs	r0, #0
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	b016      	add	sp, #88	; 0x58
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a58 <__smakebuf_r>:
 8005a58:	898b      	ldrh	r3, [r1, #12]
 8005a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a5c:	079d      	lsls	r5, r3, #30
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460c      	mov	r4, r1
 8005a62:	d507      	bpl.n	8005a74 <__smakebuf_r+0x1c>
 8005a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	6163      	str	r3, [r4, #20]
 8005a70:	b002      	add	sp, #8
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	ab01      	add	r3, sp, #4
 8005a76:	466a      	mov	r2, sp
 8005a78:	f7ff ffc8 	bl	8005a0c <__swhatbuf_r>
 8005a7c:	9900      	ldr	r1, [sp, #0]
 8005a7e:	4605      	mov	r5, r0
 8005a80:	4630      	mov	r0, r6
 8005a82:	f000 f89d 	bl	8005bc0 <_malloc_r>
 8005a86:	b948      	cbnz	r0, 8005a9c <__smakebuf_r+0x44>
 8005a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a8c:	059a      	lsls	r2, r3, #22
 8005a8e:	d4ef      	bmi.n	8005a70 <__smakebuf_r+0x18>
 8005a90:	f023 0303 	bic.w	r3, r3, #3
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	81a3      	strh	r3, [r4, #12]
 8005a9a:	e7e3      	b.n	8005a64 <__smakebuf_r+0xc>
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <__smakebuf_r+0x7c>)
 8005a9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	6020      	str	r0, [r4, #0]
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	9b00      	ldr	r3, [sp, #0]
 8005aac:	6163      	str	r3, [r4, #20]
 8005aae:	9b01      	ldr	r3, [sp, #4]
 8005ab0:	6120      	str	r0, [r4, #16]
 8005ab2:	b15b      	cbz	r3, 8005acc <__smakebuf_r+0x74>
 8005ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f000 fc73 	bl	80063a4 <_isatty_r>
 8005abe:	b128      	cbz	r0, 8005acc <__smakebuf_r+0x74>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	89a0      	ldrh	r0, [r4, #12]
 8005ace:	4305      	orrs	r5, r0
 8005ad0:	81a5      	strh	r5, [r4, #12]
 8005ad2:	e7cd      	b.n	8005a70 <__smakebuf_r+0x18>
 8005ad4:	08005841 	.word	0x08005841

08005ad8 <malloc>:
 8005ad8:	4b02      	ldr	r3, [pc, #8]	; (8005ae4 <malloc+0xc>)
 8005ada:	4601      	mov	r1, r0
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	f000 b86f 	b.w	8005bc0 <_malloc_r>
 8005ae2:	bf00      	nop
 8005ae4:	200000a0 	.word	0x200000a0

08005ae8 <_free_r>:
 8005ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aea:	2900      	cmp	r1, #0
 8005aec:	d044      	beq.n	8005b78 <_free_r+0x90>
 8005aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af2:	9001      	str	r0, [sp, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f1a1 0404 	sub.w	r4, r1, #4
 8005afa:	bfb8      	it	lt
 8005afc:	18e4      	addlt	r4, r4, r3
 8005afe:	f000 fc73 	bl	80063e8 <__malloc_lock>
 8005b02:	4a1e      	ldr	r2, [pc, #120]	; (8005b7c <_free_r+0x94>)
 8005b04:	9801      	ldr	r0, [sp, #4]
 8005b06:	6813      	ldr	r3, [r2, #0]
 8005b08:	b933      	cbnz	r3, 8005b18 <_free_r+0x30>
 8005b0a:	6063      	str	r3, [r4, #4]
 8005b0c:	6014      	str	r4, [r2, #0]
 8005b0e:	b003      	add	sp, #12
 8005b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b14:	f000 bc6e 	b.w	80063f4 <__malloc_unlock>
 8005b18:	42a3      	cmp	r3, r4
 8005b1a:	d908      	bls.n	8005b2e <_free_r+0x46>
 8005b1c:	6825      	ldr	r5, [r4, #0]
 8005b1e:	1961      	adds	r1, r4, r5
 8005b20:	428b      	cmp	r3, r1
 8005b22:	bf01      	itttt	eq
 8005b24:	6819      	ldreq	r1, [r3, #0]
 8005b26:	685b      	ldreq	r3, [r3, #4]
 8005b28:	1949      	addeq	r1, r1, r5
 8005b2a:	6021      	streq	r1, [r4, #0]
 8005b2c:	e7ed      	b.n	8005b0a <_free_r+0x22>
 8005b2e:	461a      	mov	r2, r3
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	b10b      	cbz	r3, 8005b38 <_free_r+0x50>
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	d9fa      	bls.n	8005b2e <_free_r+0x46>
 8005b38:	6811      	ldr	r1, [r2, #0]
 8005b3a:	1855      	adds	r5, r2, r1
 8005b3c:	42a5      	cmp	r5, r4
 8005b3e:	d10b      	bne.n	8005b58 <_free_r+0x70>
 8005b40:	6824      	ldr	r4, [r4, #0]
 8005b42:	4421      	add	r1, r4
 8005b44:	1854      	adds	r4, r2, r1
 8005b46:	42a3      	cmp	r3, r4
 8005b48:	6011      	str	r1, [r2, #0]
 8005b4a:	d1e0      	bne.n	8005b0e <_free_r+0x26>
 8005b4c:	681c      	ldr	r4, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	6053      	str	r3, [r2, #4]
 8005b52:	4421      	add	r1, r4
 8005b54:	6011      	str	r1, [r2, #0]
 8005b56:	e7da      	b.n	8005b0e <_free_r+0x26>
 8005b58:	d902      	bls.n	8005b60 <_free_r+0x78>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	6003      	str	r3, [r0, #0]
 8005b5e:	e7d6      	b.n	8005b0e <_free_r+0x26>
 8005b60:	6825      	ldr	r5, [r4, #0]
 8005b62:	1961      	adds	r1, r4, r5
 8005b64:	428b      	cmp	r3, r1
 8005b66:	bf04      	itt	eq
 8005b68:	6819      	ldreq	r1, [r3, #0]
 8005b6a:	685b      	ldreq	r3, [r3, #4]
 8005b6c:	6063      	str	r3, [r4, #4]
 8005b6e:	bf04      	itt	eq
 8005b70:	1949      	addeq	r1, r1, r5
 8005b72:	6021      	streq	r1, [r4, #0]
 8005b74:	6054      	str	r4, [r2, #4]
 8005b76:	e7ca      	b.n	8005b0e <_free_r+0x26>
 8005b78:	b003      	add	sp, #12
 8005b7a:	bd30      	pop	{r4, r5, pc}
 8005b7c:	200065d0 	.word	0x200065d0

08005b80 <sbrk_aligned>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	4e0e      	ldr	r6, [pc, #56]	; (8005bbc <sbrk_aligned+0x3c>)
 8005b84:	460c      	mov	r4, r1
 8005b86:	6831      	ldr	r1, [r6, #0]
 8005b88:	4605      	mov	r5, r0
 8005b8a:	b911      	cbnz	r1, 8005b92 <sbrk_aligned+0x12>
 8005b8c:	f000 fb7a 	bl	8006284 <_sbrk_r>
 8005b90:	6030      	str	r0, [r6, #0]
 8005b92:	4621      	mov	r1, r4
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 fb75 	bl	8006284 <_sbrk_r>
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	d00a      	beq.n	8005bb4 <sbrk_aligned+0x34>
 8005b9e:	1cc4      	adds	r4, r0, #3
 8005ba0:	f024 0403 	bic.w	r4, r4, #3
 8005ba4:	42a0      	cmp	r0, r4
 8005ba6:	d007      	beq.n	8005bb8 <sbrk_aligned+0x38>
 8005ba8:	1a21      	subs	r1, r4, r0
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 fb6a 	bl	8006284 <_sbrk_r>
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d101      	bne.n	8005bb8 <sbrk_aligned+0x38>
 8005bb4:	f04f 34ff 	mov.w	r4, #4294967295
 8005bb8:	4620      	mov	r0, r4
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	200065d4 	.word	0x200065d4

08005bc0 <_malloc_r>:
 8005bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc4:	1ccd      	adds	r5, r1, #3
 8005bc6:	f025 0503 	bic.w	r5, r5, #3
 8005bca:	3508      	adds	r5, #8
 8005bcc:	2d0c      	cmp	r5, #12
 8005bce:	bf38      	it	cc
 8005bd0:	250c      	movcc	r5, #12
 8005bd2:	2d00      	cmp	r5, #0
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	db01      	blt.n	8005bdc <_malloc_r+0x1c>
 8005bd8:	42a9      	cmp	r1, r5
 8005bda:	d905      	bls.n	8005be8 <_malloc_r+0x28>
 8005bdc:	230c      	movs	r3, #12
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	2600      	movs	r6, #0
 8005be2:	4630      	mov	r0, r6
 8005be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be8:	4e2e      	ldr	r6, [pc, #184]	; (8005ca4 <_malloc_r+0xe4>)
 8005bea:	f000 fbfd 	bl	80063e8 <__malloc_lock>
 8005bee:	6833      	ldr	r3, [r6, #0]
 8005bf0:	461c      	mov	r4, r3
 8005bf2:	bb34      	cbnz	r4, 8005c42 <_malloc_r+0x82>
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	f7ff ffc2 	bl	8005b80 <sbrk_aligned>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	4604      	mov	r4, r0
 8005c00:	d14d      	bne.n	8005c9e <_malloc_r+0xde>
 8005c02:	6834      	ldr	r4, [r6, #0]
 8005c04:	4626      	mov	r6, r4
 8005c06:	2e00      	cmp	r6, #0
 8005c08:	d140      	bne.n	8005c8c <_malloc_r+0xcc>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4638      	mov	r0, r7
 8005c10:	eb04 0803 	add.w	r8, r4, r3
 8005c14:	f000 fb36 	bl	8006284 <_sbrk_r>
 8005c18:	4580      	cmp	r8, r0
 8005c1a:	d13a      	bne.n	8005c92 <_malloc_r+0xd2>
 8005c1c:	6821      	ldr	r1, [r4, #0]
 8005c1e:	3503      	adds	r5, #3
 8005c20:	1a6d      	subs	r5, r5, r1
 8005c22:	f025 0503 	bic.w	r5, r5, #3
 8005c26:	3508      	adds	r5, #8
 8005c28:	2d0c      	cmp	r5, #12
 8005c2a:	bf38      	it	cc
 8005c2c:	250c      	movcc	r5, #12
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4638      	mov	r0, r7
 8005c32:	f7ff ffa5 	bl	8005b80 <sbrk_aligned>
 8005c36:	3001      	adds	r0, #1
 8005c38:	d02b      	beq.n	8005c92 <_malloc_r+0xd2>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	442b      	add	r3, r5
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	e00e      	b.n	8005c60 <_malloc_r+0xa0>
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	1b52      	subs	r2, r2, r5
 8005c46:	d41e      	bmi.n	8005c86 <_malloc_r+0xc6>
 8005c48:	2a0b      	cmp	r2, #11
 8005c4a:	d916      	bls.n	8005c7a <_malloc_r+0xba>
 8005c4c:	1961      	adds	r1, r4, r5
 8005c4e:	42a3      	cmp	r3, r4
 8005c50:	6025      	str	r5, [r4, #0]
 8005c52:	bf18      	it	ne
 8005c54:	6059      	strne	r1, [r3, #4]
 8005c56:	6863      	ldr	r3, [r4, #4]
 8005c58:	bf08      	it	eq
 8005c5a:	6031      	streq	r1, [r6, #0]
 8005c5c:	5162      	str	r2, [r4, r5]
 8005c5e:	604b      	str	r3, [r1, #4]
 8005c60:	4638      	mov	r0, r7
 8005c62:	f104 060b 	add.w	r6, r4, #11
 8005c66:	f000 fbc5 	bl	80063f4 <__malloc_unlock>
 8005c6a:	f026 0607 	bic.w	r6, r6, #7
 8005c6e:	1d23      	adds	r3, r4, #4
 8005c70:	1af2      	subs	r2, r6, r3
 8005c72:	d0b6      	beq.n	8005be2 <_malloc_r+0x22>
 8005c74:	1b9b      	subs	r3, r3, r6
 8005c76:	50a3      	str	r3, [r4, r2]
 8005c78:	e7b3      	b.n	8005be2 <_malloc_r+0x22>
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	bf0c      	ite	eq
 8005c80:	6032      	streq	r2, [r6, #0]
 8005c82:	605a      	strne	r2, [r3, #4]
 8005c84:	e7ec      	b.n	8005c60 <_malloc_r+0xa0>
 8005c86:	4623      	mov	r3, r4
 8005c88:	6864      	ldr	r4, [r4, #4]
 8005c8a:	e7b2      	b.n	8005bf2 <_malloc_r+0x32>
 8005c8c:	4634      	mov	r4, r6
 8005c8e:	6876      	ldr	r6, [r6, #4]
 8005c90:	e7b9      	b.n	8005c06 <_malloc_r+0x46>
 8005c92:	230c      	movs	r3, #12
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	4638      	mov	r0, r7
 8005c98:	f000 fbac 	bl	80063f4 <__malloc_unlock>
 8005c9c:	e7a1      	b.n	8005be2 <_malloc_r+0x22>
 8005c9e:	6025      	str	r5, [r4, #0]
 8005ca0:	e7de      	b.n	8005c60 <_malloc_r+0xa0>
 8005ca2:	bf00      	nop
 8005ca4:	200065d0 	.word	0x200065d0

08005ca8 <__sfputc_r>:
 8005ca8:	6893      	ldr	r3, [r2, #8]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	b410      	push	{r4}
 8005cb0:	6093      	str	r3, [r2, #8]
 8005cb2:	da08      	bge.n	8005cc6 <__sfputc_r+0x1e>
 8005cb4:	6994      	ldr	r4, [r2, #24]
 8005cb6:	42a3      	cmp	r3, r4
 8005cb8:	db01      	blt.n	8005cbe <__sfputc_r+0x16>
 8005cba:	290a      	cmp	r1, #10
 8005cbc:	d103      	bne.n	8005cc6 <__sfputc_r+0x1e>
 8005cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cc2:	f7ff bbf9 	b.w	80054b8 <__swbuf_r>
 8005cc6:	6813      	ldr	r3, [r2, #0]
 8005cc8:	1c58      	adds	r0, r3, #1
 8005cca:	6010      	str	r0, [r2, #0]
 8005ccc:	7019      	strb	r1, [r3, #0]
 8005cce:	4608      	mov	r0, r1
 8005cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <__sfputs_r>:
 8005cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd8:	4606      	mov	r6, r0
 8005cda:	460f      	mov	r7, r1
 8005cdc:	4614      	mov	r4, r2
 8005cde:	18d5      	adds	r5, r2, r3
 8005ce0:	42ac      	cmp	r4, r5
 8005ce2:	d101      	bne.n	8005ce8 <__sfputs_r+0x12>
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	e007      	b.n	8005cf8 <__sfputs_r+0x22>
 8005ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cec:	463a      	mov	r2, r7
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f7ff ffda 	bl	8005ca8 <__sfputc_r>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d1f3      	bne.n	8005ce0 <__sfputs_r+0xa>
 8005cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cfc <_vfiprintf_r>:
 8005cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d00:	460d      	mov	r5, r1
 8005d02:	b09d      	sub	sp, #116	; 0x74
 8005d04:	4614      	mov	r4, r2
 8005d06:	4698      	mov	r8, r3
 8005d08:	4606      	mov	r6, r0
 8005d0a:	b118      	cbz	r0, 8005d14 <_vfiprintf_r+0x18>
 8005d0c:	6983      	ldr	r3, [r0, #24]
 8005d0e:	b90b      	cbnz	r3, 8005d14 <_vfiprintf_r+0x18>
 8005d10:	f7ff fdca 	bl	80058a8 <__sinit>
 8005d14:	4b89      	ldr	r3, [pc, #548]	; (8005f3c <_vfiprintf_r+0x240>)
 8005d16:	429d      	cmp	r5, r3
 8005d18:	d11b      	bne.n	8005d52 <_vfiprintf_r+0x56>
 8005d1a:	6875      	ldr	r5, [r6, #4]
 8005d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d1e:	07d9      	lsls	r1, r3, #31
 8005d20:	d405      	bmi.n	8005d2e <_vfiprintf_r+0x32>
 8005d22:	89ab      	ldrh	r3, [r5, #12]
 8005d24:	059a      	lsls	r2, r3, #22
 8005d26:	d402      	bmi.n	8005d2e <_vfiprintf_r+0x32>
 8005d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d2a:	f7ff fe6d 	bl	8005a08 <__retarget_lock_acquire_recursive>
 8005d2e:	89ab      	ldrh	r3, [r5, #12]
 8005d30:	071b      	lsls	r3, r3, #28
 8005d32:	d501      	bpl.n	8005d38 <_vfiprintf_r+0x3c>
 8005d34:	692b      	ldr	r3, [r5, #16]
 8005d36:	b9eb      	cbnz	r3, 8005d74 <_vfiprintf_r+0x78>
 8005d38:	4629      	mov	r1, r5
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7ff fc0e 	bl	800555c <__swsetup_r>
 8005d40:	b1c0      	cbz	r0, 8005d74 <_vfiprintf_r+0x78>
 8005d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d44:	07dc      	lsls	r4, r3, #31
 8005d46:	d50e      	bpl.n	8005d66 <_vfiprintf_r+0x6a>
 8005d48:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4c:	b01d      	add	sp, #116	; 0x74
 8005d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d52:	4b7b      	ldr	r3, [pc, #492]	; (8005f40 <_vfiprintf_r+0x244>)
 8005d54:	429d      	cmp	r5, r3
 8005d56:	d101      	bne.n	8005d5c <_vfiprintf_r+0x60>
 8005d58:	68b5      	ldr	r5, [r6, #8]
 8005d5a:	e7df      	b.n	8005d1c <_vfiprintf_r+0x20>
 8005d5c:	4b79      	ldr	r3, [pc, #484]	; (8005f44 <_vfiprintf_r+0x248>)
 8005d5e:	429d      	cmp	r5, r3
 8005d60:	bf08      	it	eq
 8005d62:	68f5      	ldreq	r5, [r6, #12]
 8005d64:	e7da      	b.n	8005d1c <_vfiprintf_r+0x20>
 8005d66:	89ab      	ldrh	r3, [r5, #12]
 8005d68:	0598      	lsls	r0, r3, #22
 8005d6a:	d4ed      	bmi.n	8005d48 <_vfiprintf_r+0x4c>
 8005d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d6e:	f7ff fe4c 	bl	8005a0a <__retarget_lock_release_recursive>
 8005d72:	e7e9      	b.n	8005d48 <_vfiprintf_r+0x4c>
 8005d74:	2300      	movs	r3, #0
 8005d76:	9309      	str	r3, [sp, #36]	; 0x24
 8005d78:	2320      	movs	r3, #32
 8005d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d82:	2330      	movs	r3, #48	; 0x30
 8005d84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f48 <_vfiprintf_r+0x24c>
 8005d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d8c:	f04f 0901 	mov.w	r9, #1
 8005d90:	4623      	mov	r3, r4
 8005d92:	469a      	mov	sl, r3
 8005d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d98:	b10a      	cbz	r2, 8005d9e <_vfiprintf_r+0xa2>
 8005d9a:	2a25      	cmp	r2, #37	; 0x25
 8005d9c:	d1f9      	bne.n	8005d92 <_vfiprintf_r+0x96>
 8005d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8005da2:	d00b      	beq.n	8005dbc <_vfiprintf_r+0xc0>
 8005da4:	465b      	mov	r3, fp
 8005da6:	4622      	mov	r2, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	4630      	mov	r0, r6
 8005dac:	f7ff ff93 	bl	8005cd6 <__sfputs_r>
 8005db0:	3001      	adds	r0, #1
 8005db2:	f000 80aa 	beq.w	8005f0a <_vfiprintf_r+0x20e>
 8005db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005db8:	445a      	add	r2, fp
 8005dba:	9209      	str	r2, [sp, #36]	; 0x24
 8005dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80a2 	beq.w	8005f0a <_vfiprintf_r+0x20e>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd0:	f10a 0a01 	add.w	sl, sl, #1
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	9307      	str	r3, [sp, #28]
 8005dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8005dde:	4654      	mov	r4, sl
 8005de0:	2205      	movs	r2, #5
 8005de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de6:	4858      	ldr	r0, [pc, #352]	; (8005f48 <_vfiprintf_r+0x24c>)
 8005de8:	f7fa fa2a 	bl	8000240 <memchr>
 8005dec:	9a04      	ldr	r2, [sp, #16]
 8005dee:	b9d8      	cbnz	r0, 8005e28 <_vfiprintf_r+0x12c>
 8005df0:	06d1      	lsls	r1, r2, #27
 8005df2:	bf44      	itt	mi
 8005df4:	2320      	movmi	r3, #32
 8005df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dfa:	0713      	lsls	r3, r2, #28
 8005dfc:	bf44      	itt	mi
 8005dfe:	232b      	movmi	r3, #43	; 0x2b
 8005e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e04:	f89a 3000 	ldrb.w	r3, [sl]
 8005e08:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0a:	d015      	beq.n	8005e38 <_vfiprintf_r+0x13c>
 8005e0c:	9a07      	ldr	r2, [sp, #28]
 8005e0e:	4654      	mov	r4, sl
 8005e10:	2000      	movs	r0, #0
 8005e12:	f04f 0c0a 	mov.w	ip, #10
 8005e16:	4621      	mov	r1, r4
 8005e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e1c:	3b30      	subs	r3, #48	; 0x30
 8005e1e:	2b09      	cmp	r3, #9
 8005e20:	d94e      	bls.n	8005ec0 <_vfiprintf_r+0x1c4>
 8005e22:	b1b0      	cbz	r0, 8005e52 <_vfiprintf_r+0x156>
 8005e24:	9207      	str	r2, [sp, #28]
 8005e26:	e014      	b.n	8005e52 <_vfiprintf_r+0x156>
 8005e28:	eba0 0308 	sub.w	r3, r0, r8
 8005e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e30:	4313      	orrs	r3, r2
 8005e32:	9304      	str	r3, [sp, #16]
 8005e34:	46a2      	mov	sl, r4
 8005e36:	e7d2      	b.n	8005dde <_vfiprintf_r+0xe2>
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	1d19      	adds	r1, r3, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	9103      	str	r1, [sp, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	bfbb      	ittet	lt
 8005e44:	425b      	neglt	r3, r3
 8005e46:	f042 0202 	orrlt.w	r2, r2, #2
 8005e4a:	9307      	strge	r3, [sp, #28]
 8005e4c:	9307      	strlt	r3, [sp, #28]
 8005e4e:	bfb8      	it	lt
 8005e50:	9204      	strlt	r2, [sp, #16]
 8005e52:	7823      	ldrb	r3, [r4, #0]
 8005e54:	2b2e      	cmp	r3, #46	; 0x2e
 8005e56:	d10c      	bne.n	8005e72 <_vfiprintf_r+0x176>
 8005e58:	7863      	ldrb	r3, [r4, #1]
 8005e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e5c:	d135      	bne.n	8005eca <_vfiprintf_r+0x1ce>
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	1d1a      	adds	r2, r3, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	9203      	str	r2, [sp, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bfb8      	it	lt
 8005e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e6e:	3402      	adds	r4, #2
 8005e70:	9305      	str	r3, [sp, #20]
 8005e72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f58 <_vfiprintf_r+0x25c>
 8005e76:	7821      	ldrb	r1, [r4, #0]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	f7fa f9e0 	bl	8000240 <memchr>
 8005e80:	b140      	cbz	r0, 8005e94 <_vfiprintf_r+0x198>
 8005e82:	2340      	movs	r3, #64	; 0x40
 8005e84:	eba0 000a 	sub.w	r0, r0, sl
 8005e88:	fa03 f000 	lsl.w	r0, r3, r0
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	4303      	orrs	r3, r0
 8005e90:	3401      	adds	r4, #1
 8005e92:	9304      	str	r3, [sp, #16]
 8005e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e98:	482c      	ldr	r0, [pc, #176]	; (8005f4c <_vfiprintf_r+0x250>)
 8005e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e9e:	2206      	movs	r2, #6
 8005ea0:	f7fa f9ce 	bl	8000240 <memchr>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d03f      	beq.n	8005f28 <_vfiprintf_r+0x22c>
 8005ea8:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <_vfiprintf_r+0x254>)
 8005eaa:	bb1b      	cbnz	r3, 8005ef4 <_vfiprintf_r+0x1f8>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	3307      	adds	r3, #7
 8005eb0:	f023 0307 	bic.w	r3, r3, #7
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	9303      	str	r3, [sp, #12]
 8005eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eba:	443b      	add	r3, r7
 8005ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ebe:	e767      	b.n	8005d90 <_vfiprintf_r+0x94>
 8005ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	e7a5      	b.n	8005e16 <_vfiprintf_r+0x11a>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	3401      	adds	r4, #1
 8005ece:	9305      	str	r3, [sp, #20]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f04f 0c0a 	mov.w	ip, #10
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005edc:	3a30      	subs	r2, #48	; 0x30
 8005ede:	2a09      	cmp	r2, #9
 8005ee0:	d903      	bls.n	8005eea <_vfiprintf_r+0x1ee>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0c5      	beq.n	8005e72 <_vfiprintf_r+0x176>
 8005ee6:	9105      	str	r1, [sp, #20]
 8005ee8:	e7c3      	b.n	8005e72 <_vfiprintf_r+0x176>
 8005eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eee:	4604      	mov	r4, r0
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e7f0      	b.n	8005ed6 <_vfiprintf_r+0x1da>
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	462a      	mov	r2, r5
 8005efa:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <_vfiprintf_r+0x258>)
 8005efc:	a904      	add	r1, sp, #16
 8005efe:	4630      	mov	r0, r6
 8005f00:	f3af 8000 	nop.w
 8005f04:	4607      	mov	r7, r0
 8005f06:	1c78      	adds	r0, r7, #1
 8005f08:	d1d6      	bne.n	8005eb8 <_vfiprintf_r+0x1bc>
 8005f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f0c:	07d9      	lsls	r1, r3, #31
 8005f0e:	d405      	bmi.n	8005f1c <_vfiprintf_r+0x220>
 8005f10:	89ab      	ldrh	r3, [r5, #12]
 8005f12:	059a      	lsls	r2, r3, #22
 8005f14:	d402      	bmi.n	8005f1c <_vfiprintf_r+0x220>
 8005f16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f18:	f7ff fd77 	bl	8005a0a <__retarget_lock_release_recursive>
 8005f1c:	89ab      	ldrh	r3, [r5, #12]
 8005f1e:	065b      	lsls	r3, r3, #25
 8005f20:	f53f af12 	bmi.w	8005d48 <_vfiprintf_r+0x4c>
 8005f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f26:	e711      	b.n	8005d4c <_vfiprintf_r+0x50>
 8005f28:	ab03      	add	r3, sp, #12
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	462a      	mov	r2, r5
 8005f2e:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <_vfiprintf_r+0x258>)
 8005f30:	a904      	add	r1, sp, #16
 8005f32:	4630      	mov	r0, r6
 8005f34:	f000 f880 	bl	8006038 <_printf_i>
 8005f38:	e7e4      	b.n	8005f04 <_vfiprintf_r+0x208>
 8005f3a:	bf00      	nop
 8005f3c:	08006bd4 	.word	0x08006bd4
 8005f40:	08006bf4 	.word	0x08006bf4
 8005f44:	08006bb4 	.word	0x08006bb4
 8005f48:	08006c14 	.word	0x08006c14
 8005f4c:	08006c1e 	.word	0x08006c1e
 8005f50:	00000000 	.word	0x00000000
 8005f54:	08005cd7 	.word	0x08005cd7
 8005f58:	08006c1a 	.word	0x08006c1a

08005f5c <_printf_common>:
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	4616      	mov	r6, r2
 8005f62:	4699      	mov	r9, r3
 8005f64:	688a      	ldr	r2, [r1, #8]
 8005f66:	690b      	ldr	r3, [r1, #16]
 8005f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	bfb8      	it	lt
 8005f70:	4613      	movlt	r3, r2
 8005f72:	6033      	str	r3, [r6, #0]
 8005f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f78:	4607      	mov	r7, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	b10a      	cbz	r2, 8005f82 <_printf_common+0x26>
 8005f7e:	3301      	adds	r3, #1
 8005f80:	6033      	str	r3, [r6, #0]
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	0699      	lsls	r1, r3, #26
 8005f86:	bf42      	ittt	mi
 8005f88:	6833      	ldrmi	r3, [r6, #0]
 8005f8a:	3302      	addmi	r3, #2
 8005f8c:	6033      	strmi	r3, [r6, #0]
 8005f8e:	6825      	ldr	r5, [r4, #0]
 8005f90:	f015 0506 	ands.w	r5, r5, #6
 8005f94:	d106      	bne.n	8005fa4 <_printf_common+0x48>
 8005f96:	f104 0a19 	add.w	sl, r4, #25
 8005f9a:	68e3      	ldr	r3, [r4, #12]
 8005f9c:	6832      	ldr	r2, [r6, #0]
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	dc26      	bgt.n	8005ff2 <_printf_common+0x96>
 8005fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fa8:	1e13      	subs	r3, r2, #0
 8005faa:	6822      	ldr	r2, [r4, #0]
 8005fac:	bf18      	it	ne
 8005fae:	2301      	movne	r3, #1
 8005fb0:	0692      	lsls	r2, r2, #26
 8005fb2:	d42b      	bmi.n	800600c <_printf_common+0xb0>
 8005fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fb8:	4649      	mov	r1, r9
 8005fba:	4638      	mov	r0, r7
 8005fbc:	47c0      	blx	r8
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d01e      	beq.n	8006000 <_printf_common+0xa4>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	68e5      	ldr	r5, [r4, #12]
 8005fc6:	6832      	ldr	r2, [r6, #0]
 8005fc8:	f003 0306 	and.w	r3, r3, #6
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	bf08      	it	eq
 8005fd0:	1aad      	subeq	r5, r5, r2
 8005fd2:	68a3      	ldr	r3, [r4, #8]
 8005fd4:	6922      	ldr	r2, [r4, #16]
 8005fd6:	bf0c      	ite	eq
 8005fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fdc:	2500      	movne	r5, #0
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	bfc4      	itt	gt
 8005fe2:	1a9b      	subgt	r3, r3, r2
 8005fe4:	18ed      	addgt	r5, r5, r3
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	341a      	adds	r4, #26
 8005fea:	42b5      	cmp	r5, r6
 8005fec:	d11a      	bne.n	8006024 <_printf_common+0xc8>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e008      	b.n	8006004 <_printf_common+0xa8>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4652      	mov	r2, sl
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	47c0      	blx	r8
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d103      	bne.n	8006008 <_printf_common+0xac>
 8006000:	f04f 30ff 	mov.w	r0, #4294967295
 8006004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006008:	3501      	adds	r5, #1
 800600a:	e7c6      	b.n	8005f9a <_printf_common+0x3e>
 800600c:	18e1      	adds	r1, r4, r3
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	2030      	movs	r0, #48	; 0x30
 8006012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006016:	4422      	add	r2, r4
 8006018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800601c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006020:	3302      	adds	r3, #2
 8006022:	e7c7      	b.n	8005fb4 <_printf_common+0x58>
 8006024:	2301      	movs	r3, #1
 8006026:	4622      	mov	r2, r4
 8006028:	4649      	mov	r1, r9
 800602a:	4638      	mov	r0, r7
 800602c:	47c0      	blx	r8
 800602e:	3001      	adds	r0, #1
 8006030:	d0e6      	beq.n	8006000 <_printf_common+0xa4>
 8006032:	3601      	adds	r6, #1
 8006034:	e7d9      	b.n	8005fea <_printf_common+0x8e>
	...

08006038 <_printf_i>:
 8006038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800603c:	7e0f      	ldrb	r7, [r1, #24]
 800603e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006040:	2f78      	cmp	r7, #120	; 0x78
 8006042:	4691      	mov	r9, r2
 8006044:	4680      	mov	r8, r0
 8006046:	460c      	mov	r4, r1
 8006048:	469a      	mov	sl, r3
 800604a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800604e:	d807      	bhi.n	8006060 <_printf_i+0x28>
 8006050:	2f62      	cmp	r7, #98	; 0x62
 8006052:	d80a      	bhi.n	800606a <_printf_i+0x32>
 8006054:	2f00      	cmp	r7, #0
 8006056:	f000 80d8 	beq.w	800620a <_printf_i+0x1d2>
 800605a:	2f58      	cmp	r7, #88	; 0x58
 800605c:	f000 80a3 	beq.w	80061a6 <_printf_i+0x16e>
 8006060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006068:	e03a      	b.n	80060e0 <_printf_i+0xa8>
 800606a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800606e:	2b15      	cmp	r3, #21
 8006070:	d8f6      	bhi.n	8006060 <_printf_i+0x28>
 8006072:	a101      	add	r1, pc, #4	; (adr r1, 8006078 <_printf_i+0x40>)
 8006074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006078:	080060d1 	.word	0x080060d1
 800607c:	080060e5 	.word	0x080060e5
 8006080:	08006061 	.word	0x08006061
 8006084:	08006061 	.word	0x08006061
 8006088:	08006061 	.word	0x08006061
 800608c:	08006061 	.word	0x08006061
 8006090:	080060e5 	.word	0x080060e5
 8006094:	08006061 	.word	0x08006061
 8006098:	08006061 	.word	0x08006061
 800609c:	08006061 	.word	0x08006061
 80060a0:	08006061 	.word	0x08006061
 80060a4:	080061f1 	.word	0x080061f1
 80060a8:	08006115 	.word	0x08006115
 80060ac:	080061d3 	.word	0x080061d3
 80060b0:	08006061 	.word	0x08006061
 80060b4:	08006061 	.word	0x08006061
 80060b8:	08006213 	.word	0x08006213
 80060bc:	08006061 	.word	0x08006061
 80060c0:	08006115 	.word	0x08006115
 80060c4:	08006061 	.word	0x08006061
 80060c8:	08006061 	.word	0x08006061
 80060cc:	080061db 	.word	0x080061db
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	1d1a      	adds	r2, r3, #4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	602a      	str	r2, [r5, #0]
 80060d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0a3      	b.n	800622c <_printf_i+0x1f4>
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	6829      	ldr	r1, [r5, #0]
 80060e8:	0606      	lsls	r6, r0, #24
 80060ea:	f101 0304 	add.w	r3, r1, #4
 80060ee:	d50a      	bpl.n	8006106 <_printf_i+0xce>
 80060f0:	680e      	ldr	r6, [r1, #0]
 80060f2:	602b      	str	r3, [r5, #0]
 80060f4:	2e00      	cmp	r6, #0
 80060f6:	da03      	bge.n	8006100 <_printf_i+0xc8>
 80060f8:	232d      	movs	r3, #45	; 0x2d
 80060fa:	4276      	negs	r6, r6
 80060fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006100:	485e      	ldr	r0, [pc, #376]	; (800627c <_printf_i+0x244>)
 8006102:	230a      	movs	r3, #10
 8006104:	e019      	b.n	800613a <_printf_i+0x102>
 8006106:	680e      	ldr	r6, [r1, #0]
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800610e:	bf18      	it	ne
 8006110:	b236      	sxthne	r6, r6
 8006112:	e7ef      	b.n	80060f4 <_printf_i+0xbc>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	6820      	ldr	r0, [r4, #0]
 8006118:	1d19      	adds	r1, r3, #4
 800611a:	6029      	str	r1, [r5, #0]
 800611c:	0601      	lsls	r1, r0, #24
 800611e:	d501      	bpl.n	8006124 <_printf_i+0xec>
 8006120:	681e      	ldr	r6, [r3, #0]
 8006122:	e002      	b.n	800612a <_printf_i+0xf2>
 8006124:	0646      	lsls	r6, r0, #25
 8006126:	d5fb      	bpl.n	8006120 <_printf_i+0xe8>
 8006128:	881e      	ldrh	r6, [r3, #0]
 800612a:	4854      	ldr	r0, [pc, #336]	; (800627c <_printf_i+0x244>)
 800612c:	2f6f      	cmp	r7, #111	; 0x6f
 800612e:	bf0c      	ite	eq
 8006130:	2308      	moveq	r3, #8
 8006132:	230a      	movne	r3, #10
 8006134:	2100      	movs	r1, #0
 8006136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800613a:	6865      	ldr	r5, [r4, #4]
 800613c:	60a5      	str	r5, [r4, #8]
 800613e:	2d00      	cmp	r5, #0
 8006140:	bfa2      	ittt	ge
 8006142:	6821      	ldrge	r1, [r4, #0]
 8006144:	f021 0104 	bicge.w	r1, r1, #4
 8006148:	6021      	strge	r1, [r4, #0]
 800614a:	b90e      	cbnz	r6, 8006150 <_printf_i+0x118>
 800614c:	2d00      	cmp	r5, #0
 800614e:	d04d      	beq.n	80061ec <_printf_i+0x1b4>
 8006150:	4615      	mov	r5, r2
 8006152:	fbb6 f1f3 	udiv	r1, r6, r3
 8006156:	fb03 6711 	mls	r7, r3, r1, r6
 800615a:	5dc7      	ldrb	r7, [r0, r7]
 800615c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006160:	4637      	mov	r7, r6
 8006162:	42bb      	cmp	r3, r7
 8006164:	460e      	mov	r6, r1
 8006166:	d9f4      	bls.n	8006152 <_printf_i+0x11a>
 8006168:	2b08      	cmp	r3, #8
 800616a:	d10b      	bne.n	8006184 <_printf_i+0x14c>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	07de      	lsls	r6, r3, #31
 8006170:	d508      	bpl.n	8006184 <_printf_i+0x14c>
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	6861      	ldr	r1, [r4, #4]
 8006176:	4299      	cmp	r1, r3
 8006178:	bfde      	ittt	le
 800617a:	2330      	movle	r3, #48	; 0x30
 800617c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006180:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006184:	1b52      	subs	r2, r2, r5
 8006186:	6122      	str	r2, [r4, #16]
 8006188:	f8cd a000 	str.w	sl, [sp]
 800618c:	464b      	mov	r3, r9
 800618e:	aa03      	add	r2, sp, #12
 8006190:	4621      	mov	r1, r4
 8006192:	4640      	mov	r0, r8
 8006194:	f7ff fee2 	bl	8005f5c <_printf_common>
 8006198:	3001      	adds	r0, #1
 800619a:	d14c      	bne.n	8006236 <_printf_i+0x1fe>
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	b004      	add	sp, #16
 80061a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a6:	4835      	ldr	r0, [pc, #212]	; (800627c <_printf_i+0x244>)
 80061a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061ac:	6829      	ldr	r1, [r5, #0]
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061b4:	6029      	str	r1, [r5, #0]
 80061b6:	061d      	lsls	r5, r3, #24
 80061b8:	d514      	bpl.n	80061e4 <_printf_i+0x1ac>
 80061ba:	07df      	lsls	r7, r3, #31
 80061bc:	bf44      	itt	mi
 80061be:	f043 0320 	orrmi.w	r3, r3, #32
 80061c2:	6023      	strmi	r3, [r4, #0]
 80061c4:	b91e      	cbnz	r6, 80061ce <_printf_i+0x196>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	f023 0320 	bic.w	r3, r3, #32
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	2310      	movs	r3, #16
 80061d0:	e7b0      	b.n	8006134 <_printf_i+0xfc>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	f043 0320 	orr.w	r3, r3, #32
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	2378      	movs	r3, #120	; 0x78
 80061dc:	4828      	ldr	r0, [pc, #160]	; (8006280 <_printf_i+0x248>)
 80061de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061e2:	e7e3      	b.n	80061ac <_printf_i+0x174>
 80061e4:	0659      	lsls	r1, r3, #25
 80061e6:	bf48      	it	mi
 80061e8:	b2b6      	uxthmi	r6, r6
 80061ea:	e7e6      	b.n	80061ba <_printf_i+0x182>
 80061ec:	4615      	mov	r5, r2
 80061ee:	e7bb      	b.n	8006168 <_printf_i+0x130>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	6826      	ldr	r6, [r4, #0]
 80061f4:	6961      	ldr	r1, [r4, #20]
 80061f6:	1d18      	adds	r0, r3, #4
 80061f8:	6028      	str	r0, [r5, #0]
 80061fa:	0635      	lsls	r5, r6, #24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	d501      	bpl.n	8006204 <_printf_i+0x1cc>
 8006200:	6019      	str	r1, [r3, #0]
 8006202:	e002      	b.n	800620a <_printf_i+0x1d2>
 8006204:	0670      	lsls	r0, r6, #25
 8006206:	d5fb      	bpl.n	8006200 <_printf_i+0x1c8>
 8006208:	8019      	strh	r1, [r3, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	4615      	mov	r5, r2
 8006210:	e7ba      	b.n	8006188 <_printf_i+0x150>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	1d1a      	adds	r2, r3, #4
 8006216:	602a      	str	r2, [r5, #0]
 8006218:	681d      	ldr	r5, [r3, #0]
 800621a:	6862      	ldr	r2, [r4, #4]
 800621c:	2100      	movs	r1, #0
 800621e:	4628      	mov	r0, r5
 8006220:	f7fa f80e 	bl	8000240 <memchr>
 8006224:	b108      	cbz	r0, 800622a <_printf_i+0x1f2>
 8006226:	1b40      	subs	r0, r0, r5
 8006228:	6060      	str	r0, [r4, #4]
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	2300      	movs	r3, #0
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006234:	e7a8      	b.n	8006188 <_printf_i+0x150>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	462a      	mov	r2, r5
 800623a:	4649      	mov	r1, r9
 800623c:	4640      	mov	r0, r8
 800623e:	47d0      	blx	sl
 8006240:	3001      	adds	r0, #1
 8006242:	d0ab      	beq.n	800619c <_printf_i+0x164>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	079b      	lsls	r3, r3, #30
 8006248:	d413      	bmi.n	8006272 <_printf_i+0x23a>
 800624a:	68e0      	ldr	r0, [r4, #12]
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	4298      	cmp	r0, r3
 8006250:	bfb8      	it	lt
 8006252:	4618      	movlt	r0, r3
 8006254:	e7a4      	b.n	80061a0 <_printf_i+0x168>
 8006256:	2301      	movs	r3, #1
 8006258:	4632      	mov	r2, r6
 800625a:	4649      	mov	r1, r9
 800625c:	4640      	mov	r0, r8
 800625e:	47d0      	blx	sl
 8006260:	3001      	adds	r0, #1
 8006262:	d09b      	beq.n	800619c <_printf_i+0x164>
 8006264:	3501      	adds	r5, #1
 8006266:	68e3      	ldr	r3, [r4, #12]
 8006268:	9903      	ldr	r1, [sp, #12]
 800626a:	1a5b      	subs	r3, r3, r1
 800626c:	42ab      	cmp	r3, r5
 800626e:	dcf2      	bgt.n	8006256 <_printf_i+0x21e>
 8006270:	e7eb      	b.n	800624a <_printf_i+0x212>
 8006272:	2500      	movs	r5, #0
 8006274:	f104 0619 	add.w	r6, r4, #25
 8006278:	e7f5      	b.n	8006266 <_printf_i+0x22e>
 800627a:	bf00      	nop
 800627c:	08006c25 	.word	0x08006c25
 8006280:	08006c36 	.word	0x08006c36

08006284 <_sbrk_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d06      	ldr	r5, [pc, #24]	; (80062a0 <_sbrk_r+0x1c>)
 8006288:	2300      	movs	r3, #0
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	f7fc fa4c 	bl	800272c <_sbrk>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_sbrk_r+0x1a>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_sbrk_r+0x1a>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	200065d8 	.word	0x200065d8

080062a4 <__sread>:
 80062a4:	b510      	push	{r4, lr}
 80062a6:	460c      	mov	r4, r1
 80062a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ac:	f000 f8a8 	bl	8006400 <_read_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	bfab      	itete	ge
 80062b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062b6:	89a3      	ldrhlt	r3, [r4, #12]
 80062b8:	181b      	addge	r3, r3, r0
 80062ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062be:	bfac      	ite	ge
 80062c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80062c2:	81a3      	strhlt	r3, [r4, #12]
 80062c4:	bd10      	pop	{r4, pc}

080062c6 <__swrite>:
 80062c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ca:	461f      	mov	r7, r3
 80062cc:	898b      	ldrh	r3, [r1, #12]
 80062ce:	05db      	lsls	r3, r3, #23
 80062d0:	4605      	mov	r5, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	4616      	mov	r6, r2
 80062d6:	d505      	bpl.n	80062e4 <__swrite+0x1e>
 80062d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062dc:	2302      	movs	r3, #2
 80062de:	2200      	movs	r2, #0
 80062e0:	f000 f870 	bl	80063c4 <_lseek_r>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ee:	81a3      	strh	r3, [r4, #12]
 80062f0:	4632      	mov	r2, r6
 80062f2:	463b      	mov	r3, r7
 80062f4:	4628      	mov	r0, r5
 80062f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	f000 b817 	b.w	800632c <_write_r>

080062fe <__sseek>:
 80062fe:	b510      	push	{r4, lr}
 8006300:	460c      	mov	r4, r1
 8006302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006306:	f000 f85d 	bl	80063c4 <_lseek_r>
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	bf15      	itete	ne
 8006310:	6560      	strne	r0, [r4, #84]	; 0x54
 8006312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800631a:	81a3      	strheq	r3, [r4, #12]
 800631c:	bf18      	it	ne
 800631e:	81a3      	strhne	r3, [r4, #12]
 8006320:	bd10      	pop	{r4, pc}

08006322 <__sclose>:
 8006322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006326:	f000 b81b 	b.w	8006360 <_close_r>
	...

0800632c <_write_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4d07      	ldr	r5, [pc, #28]	; (800634c <_write_r+0x20>)
 8006330:	4604      	mov	r4, r0
 8006332:	4608      	mov	r0, r1
 8006334:	4611      	mov	r1, r2
 8006336:	2200      	movs	r2, #0
 8006338:	602a      	str	r2, [r5, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f7fc f9a5 	bl	800268a <_write>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_write_r+0x1e>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b103      	cbz	r3, 800634a <_write_r+0x1e>
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	200065d8 	.word	0x200065d8

08006350 <abort>:
 8006350:	b508      	push	{r3, lr}
 8006352:	2006      	movs	r0, #6
 8006354:	f000 f88e 	bl	8006474 <raise>
 8006358:	2001      	movs	r0, #1
 800635a:	f7fc f96f 	bl	800263c <_exit>
	...

08006360 <_close_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4d06      	ldr	r5, [pc, #24]	; (800637c <_close_r+0x1c>)
 8006364:	2300      	movs	r3, #0
 8006366:	4604      	mov	r4, r0
 8006368:	4608      	mov	r0, r1
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	f7fc f9a9 	bl	80026c2 <_close>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_close_r+0x1a>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_close_r+0x1a>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	200065d8 	.word	0x200065d8

08006380 <_fstat_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d07      	ldr	r5, [pc, #28]	; (80063a0 <_fstat_r+0x20>)
 8006384:	2300      	movs	r3, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	602b      	str	r3, [r5, #0]
 800638e:	f7fc f9a4 	bl	80026da <_fstat>
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d102      	bne.n	800639c <_fstat_r+0x1c>
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	b103      	cbz	r3, 800639c <_fstat_r+0x1c>
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	bd38      	pop	{r3, r4, r5, pc}
 800639e:	bf00      	nop
 80063a0:	200065d8 	.word	0x200065d8

080063a4 <_isatty_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d06      	ldr	r5, [pc, #24]	; (80063c0 <_isatty_r+0x1c>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4604      	mov	r4, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	f7fc f9a3 	bl	80026fa <_isatty>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_isatty_r+0x1a>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_isatty_r+0x1a>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	200065d8 	.word	0x200065d8

080063c4 <_lseek_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4d07      	ldr	r5, [pc, #28]	; (80063e4 <_lseek_r+0x20>)
 80063c8:	4604      	mov	r4, r0
 80063ca:	4608      	mov	r0, r1
 80063cc:	4611      	mov	r1, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	602a      	str	r2, [r5, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f7fc f99c 	bl	8002710 <_lseek>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_lseek_r+0x1e>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_lseek_r+0x1e>
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	200065d8 	.word	0x200065d8

080063e8 <__malloc_lock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__malloc_lock+0x8>)
 80063ea:	f7ff bb0d 	b.w	8005a08 <__retarget_lock_acquire_recursive>
 80063ee:	bf00      	nop
 80063f0:	200065cc 	.word	0x200065cc

080063f4 <__malloc_unlock>:
 80063f4:	4801      	ldr	r0, [pc, #4]	; (80063fc <__malloc_unlock+0x8>)
 80063f6:	f7ff bb08 	b.w	8005a0a <__retarget_lock_release_recursive>
 80063fa:	bf00      	nop
 80063fc:	200065cc 	.word	0x200065cc

08006400 <_read_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d07      	ldr	r5, [pc, #28]	; (8006420 <_read_r+0x20>)
 8006404:	4604      	mov	r4, r0
 8006406:	4608      	mov	r0, r1
 8006408:	4611      	mov	r1, r2
 800640a:	2200      	movs	r2, #0
 800640c:	602a      	str	r2, [r5, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f7fc f91e 	bl	8002650 <_read>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_read_r+0x1e>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_read_r+0x1e>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	200065d8 	.word	0x200065d8

08006424 <_raise_r>:
 8006424:	291f      	cmp	r1, #31
 8006426:	b538      	push	{r3, r4, r5, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	460d      	mov	r5, r1
 800642c:	d904      	bls.n	8006438 <_raise_r+0x14>
 800642e:	2316      	movs	r3, #22
 8006430:	6003      	str	r3, [r0, #0]
 8006432:	f04f 30ff 	mov.w	r0, #4294967295
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800643a:	b112      	cbz	r2, 8006442 <_raise_r+0x1e>
 800643c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006440:	b94b      	cbnz	r3, 8006456 <_raise_r+0x32>
 8006442:	4620      	mov	r0, r4
 8006444:	f000 f830 	bl	80064a8 <_getpid_r>
 8006448:	462a      	mov	r2, r5
 800644a:	4601      	mov	r1, r0
 800644c:	4620      	mov	r0, r4
 800644e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006452:	f000 b817 	b.w	8006484 <_kill_r>
 8006456:	2b01      	cmp	r3, #1
 8006458:	d00a      	beq.n	8006470 <_raise_r+0x4c>
 800645a:	1c59      	adds	r1, r3, #1
 800645c:	d103      	bne.n	8006466 <_raise_r+0x42>
 800645e:	2316      	movs	r3, #22
 8006460:	6003      	str	r3, [r0, #0]
 8006462:	2001      	movs	r0, #1
 8006464:	e7e7      	b.n	8006436 <_raise_r+0x12>
 8006466:	2400      	movs	r4, #0
 8006468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800646c:	4628      	mov	r0, r5
 800646e:	4798      	blx	r3
 8006470:	2000      	movs	r0, #0
 8006472:	e7e0      	b.n	8006436 <_raise_r+0x12>

08006474 <raise>:
 8006474:	4b02      	ldr	r3, [pc, #8]	; (8006480 <raise+0xc>)
 8006476:	4601      	mov	r1, r0
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	f7ff bfd3 	b.w	8006424 <_raise_r>
 800647e:	bf00      	nop
 8006480:	200000a0 	.word	0x200000a0

08006484 <_kill_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d07      	ldr	r5, [pc, #28]	; (80064a4 <_kill_r+0x20>)
 8006488:	2300      	movs	r3, #0
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	4611      	mov	r1, r2
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	f7fc f8c3 	bl	800261c <_kill>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	d102      	bne.n	80064a0 <_kill_r+0x1c>
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	b103      	cbz	r3, 80064a0 <_kill_r+0x1c>
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	bd38      	pop	{r3, r4, r5, pc}
 80064a2:	bf00      	nop
 80064a4:	200065d8 	.word	0x200065d8

080064a8 <_getpid_r>:
 80064a8:	f7fc b8b0 	b.w	800260c <_getpid>

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
