
remoteNodeMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006458  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08006628  08006628  00016628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e6c  08006e6c  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e74  08006e74  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08006e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064d8  20000104  08006f80  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200065dc  08006f80  000265dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b438  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f94  00000000  00000000  0002b56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022cec  00000000  00000000  0002e768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d41d  00000000  00000000  00051454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbbcb  00000000  00000000  0005e871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a43c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  0012a48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000104 	.word	0x20000104
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006610 	.word	0x08006610

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000108 	.word	0x20000108
 800020c:	08006610 	.word	0x08006610

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <App_Init>:
* Description: 	Initializes application and resets all GPIO pins
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void App_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    //resets all nodes
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4 ,GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	4846      	ldr	r0, [pc, #280]	; (8000708 <App_Init+0x124>)
 80005ee:	f003 f847 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5 ,GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4844      	ldr	r0, [pc, #272]	; (8000708 <App_Init+0x124>)
 80005f8:	f003 f842 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8 ,GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000602:	4841      	ldr	r0, [pc, #260]	; (8000708 <App_Init+0x124>)
 8000604:	f003 f83c 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15 ,GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060e:	483e      	ldr	r0, [pc, #248]	; (8000708 <App_Init+0x124>)
 8000610:	f003 f836 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0 ,GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2101      	movs	r1, #1
 8000618:	483c      	ldr	r0, [pc, #240]	; (800070c <App_Init+0x128>)
 800061a:	f003 f831 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4 ,GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2110      	movs	r1, #16
 8000622:	483a      	ldr	r0, [pc, #232]	; (800070c <App_Init+0x128>)
 8000624:	f003 f82c 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5 ,GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2120      	movs	r1, #32
 800062c:	4837      	ldr	r0, [pc, #220]	; (800070c <App_Init+0x128>)
 800062e:	f003 f827 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6 ,GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4835      	ldr	r0, [pc, #212]	; (800070c <App_Init+0x128>)
 8000638:	f003 f822 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7 ,GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	4832      	ldr	r0, [pc, #200]	; (800070c <App_Init+0x128>)
 8000642:	f003 f81d 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8 ,GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	482f      	ldr	r0, [pc, #188]	; (800070c <App_Init+0x128>)
 800064e:	f003 f817 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9 ,GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	482c      	ldr	r0, [pc, #176]	; (800070c <App_Init+0x128>)
 800065a:	f003 f811 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12 ,GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	4829      	ldr	r0, [pc, #164]	; (800070c <App_Init+0x128>)
 8000666:	f003 f80b 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13 ,GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4826      	ldr	r0, [pc, #152]	; (800070c <App_Init+0x128>)
 8000672:	f003 f805 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14 ,GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067c:	4823      	ldr	r0, [pc, #140]	; (800070c <App_Init+0x128>)
 800067e:	f002 ffff 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0 ,GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	4822      	ldr	r0, [pc, #136]	; (8000710 <App_Init+0x12c>)
 8000688:	f002 fffa 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1 ,GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2102      	movs	r1, #2
 8000690:	481f      	ldr	r0, [pc, #124]	; (8000710 <App_Init+0x12c>)
 8000692:	f002 fff5 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2 ,GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2104      	movs	r1, #4
 800069a:	481d      	ldr	r0, [pc, #116]	; (8000710 <App_Init+0x12c>)
 800069c:	f002 fff0 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3 ,GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2108      	movs	r1, #8
 80006a4:	481a      	ldr	r0, [pc, #104]	; (8000710 <App_Init+0x12c>)
 80006a6:	f002 ffeb 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4 ,GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2110      	movs	r1, #16
 80006ae:	4818      	ldr	r0, [pc, #96]	; (8000710 <App_Init+0x12c>)
 80006b0:	f002 ffe6 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6 ,GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2140      	movs	r1, #64	; 0x40
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <App_Init+0x124>)
 80006ba:	f002 ffe1 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7 ,GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <App_Init+0x124>)
 80006c4:	f002 ffdc 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8 ,GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ce:	4810      	ldr	r0, [pc, #64]	; (8000710 <App_Init+0x12c>)
 80006d0:	f002 ffd6 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9 ,GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <App_Init+0x12c>)
 80006dc:	f002 ffd0 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10 ,GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	480a      	ldr	r0, [pc, #40]	; (8000710 <App_Init+0x12c>)
 80006e8:	f002 ffca 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11 ,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <App_Init+0x12c>)
 80006f4:	f002 ffc4 	bl	8003680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13 ,GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <App_Init+0x12c>)
 8000700:	f002 ffbe 	bl	8003680 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020000 	.word	0x40020000
 800070c:	40020400 	.word	0x40020400
 8000710:	40020800 	.word	0x40020800

08000714 <App_Update>:
* Description: 	Updates state of the application.
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void App_Update(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	switch(Get_Application_State())
 8000718:	f000 f9fc 	bl	8000b14 <Get_Application_State>
 800071c:	4603      	mov	r3, r0
 800071e:	2b0a      	cmp	r3, #10
 8000720:	d83c      	bhi.n	800079c <App_Update+0x88>
 8000722:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <App_Update+0x14>)
 8000724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000728:	0800078b 	.word	0x0800078b
 800072c:	0800079d 	.word	0x0800079d
 8000730:	08000755 	.word	0x08000755
 8000734:	0800075b 	.word	0x0800075b
 8000738:	08000761 	.word	0x08000761
 800073c:	08000767 	.word	0x08000767
 8000740:	0800076d 	.word	0x0800076d
 8000744:	08000773 	.word	0x08000773
 8000748:	08000779 	.word	0x08000779
 800074c:	0800077f 	.word	0x0800077f
 8000750:	08000785 	.word	0x08000785
	{
		case MOLLY_DEV1:
			Dev1_Molly_App();
 8000754:	f000 fce4 	bl	8001120 <Dev1_Molly_App>
			break;
 8000758:	e020      	b.n	800079c <App_Update+0x88>

		case MOLLY_DEV2:
			Dev2_Molly_App();
 800075a:	f000 fecb 	bl	80014f4 <Dev2_Molly_App>
			break;
 800075e:	e01d      	b.n	800079c <App_Update+0x88>

        case PROGRAM_DEV1:
        	Dev1_Program_App();
 8000760:	f001 f8f0 	bl	8001944 <Dev1_Program_App>
			break;
 8000764:	e01a      	b.n	800079c <App_Update+0x88>

        case PROGRAM_DEV2:
        	Dev2_Program_App();
 8000766:	f001 f935 	bl	80019d4 <Dev2_Program_App>
			break;
 800076a:	e017      	b.n	800079c <App_Update+0x88>

        case PROGRAM_DEV3:
        	Dev3_Program_App();
 800076c:	f001 f978 	bl	8001a60 <Dev3_Program_App>
            break;
 8000770:	e014      	b.n	800079c <App_Update+0x88>

        case PROGRAM_DEV4:
        	Dev4_Program_App();
 8000772:	f001 f9bd 	bl	8001af0 <Dev4_Program_App>
            break;
 8000776:	e011      	b.n	800079c <App_Update+0x88>

        case SEN_SELECT:
            Sensor_Select_App();
 8000778:	f001 fc44 	bl	8002004 <Sensor_Select_App>
            break;
 800077c:	e00e      	b.n	800079c <App_Update+0x88>

        case SET_CHG_STATE:
            Set_Charger_App();
 800077e:	f001 fcc1 	bl	8002104 <Set_Charger_App>
            break;
 8000782:	e00b      	b.n	800079c <App_Update+0x88>

        case SET_DEV_PWR:
            Set_Device_Power_App();
 8000784:	f001 f9fa 	bl	8001b7c <Set_Device_Power_App>
            break;
 8000788:	e008      	b.n	800079c <App_Update+0x88>

		case MONITOR:
			Dev1_Check_Flag();
 800078a:	f001 fce5 	bl	8002158 <Dev1_Check_Flag>
			Dev3_Check_Flag();
 800078e:	f001 fd3d 	bl	800220c <Dev3_Check_Flag>
			Dev2_Check_Flag();
 8000792:	f001 fd95 	bl	80022c0 <Dev2_Check_Flag>
			Dev4_Check_Flag();
 8000796:	f001 fded 	bl	8002374 <Dev4_Check_Flag>
			break;
 800079a:	bf00      	nop
	}
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <main>:

/**************************************************************************************************
* Main Program Loop
**************************************************************************************************/
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
   // Initialize the chip
   Chip_Init();
 80007a4:	f000 f808 	bl	80007b8 <Chip_Init>

   // Initialize the application
   App_Init();
 80007a8:	f7ff ff1c 	bl	80005e4 <App_Init>

   /* Replace with your application code */
   while (1)
   {
      // call chip level routines that need updating
      Chip_Update();
 80007ac:	f001 fe3c 	bl	8002428 <Chip_Update>

      // call application
      App_Update();
 80007b0:	f7ff ffb0 	bl	8000714 <App_Update>
      Chip_Update();
 80007b4:	e7fa      	b.n	80007ac <main+0xc>
	...

080007b8 <Chip_Init>:
* Description: 	This routine sets up the chip
* Parameters:  	(none)
* Returns:     		(none)
******************************************************************************/
void Chip_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f002 fb92 	bl	8002ee4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f001 fe3a 	bl	8002438 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f001 feac 	bl	8002520 <MX_GPIO_Init>
  MX_USART1_UART_Init();			// RASPBERRY PI
 80007c8:	f002 f8f6 	bl	80029b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007cc:	f002 f91e 	bl	8002a0c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();			// SKYLA2
 80007d0:	f002 f946 	bl	8002a60 <MX_USART3_UART_Init>
  MX_UART4_Init();					// CREED1
 80007d4:	f002 f89c 	bl	8002910 <MX_UART4_Init>
  MX_UART5_Init();					// CREED2
 80007d8:	f002 f8c4 	bl	8002964 <MX_UART5_Init>
  MX_USART6_UART_Init();			// SKYLA1
 80007dc:	f002 f96a 	bl	8002ab4 <MX_USART6_UART_Init>

  HAL_UART_Receive_IT(&huart1, &pi_uart_rxData, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	490d      	ldr	r1, [pc, #52]	; (8000818 <Chip_Init+0x60>)
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <Chip_Init+0x64>)
 80007e6:	f003 fe2c 	bl	8004442 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &dev2_uart_rxData, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <Chip_Init+0x68>)
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <Chip_Init+0x6c>)
 80007f0:	f003 fe27 	bl	8004442 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &dev3_uart_rxData, 1);
 80007f4:	2201      	movs	r2, #1
 80007f6:	490c      	ldr	r1, [pc, #48]	; (8000828 <Chip_Init+0x70>)
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <Chip_Init+0x74>)
 80007fa:	f003 fe22 	bl	8004442 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, &dev4_uart_rxData, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	490b      	ldr	r1, [pc, #44]	; (8000830 <Chip_Init+0x78>)
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <Chip_Init+0x7c>)
 8000804:	f003 fe1d 	bl	8004442 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &dev1_uart_rxData, 1);
 8000808:	2201      	movs	r2, #1
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <Chip_Init+0x80>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <Chip_Init+0x84>)
 800080e:	f003 fe18 	bl	8004442 <HAL_UART_Receive_IT>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200014b2 	.word	0x200014b2
 800081c:	200064b8 	.word	0x200064b8
 8000820:	2000509a 	.word	0x2000509a
 8000824:	20006540 	.word	0x20006540
 8000828:	20003d0a 	.word	0x20003d0a
 800082c:	20006430 	.word	0x20006430
 8000830:	2000642a 	.word	0x2000642a
 8000834:	20006474 	.word	0x20006474
 8000838:	20002976 	.word	0x20002976
 800083c:	20006584 	.word	0x20006584

08000840 <HAL_UART_RxCpltCallback>:
* 				stores RX data into buffers.
* Parameters:  	*huart --> the uart that triggered the interrupt
* Returns:     		(none)
******************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a91      	ldr	r2, [pc, #580]	; (8000a94 <HAL_UART_RxCpltCallback+0x254>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d15b      	bne.n	800090a <HAL_UART_RxCpltCallback+0xca>
	{
		pi_uart_rxBuffer[pi_array_end] = pi_uart_rxData;
 8000852:	4b91      	ldr	r3, [pc, #580]	; (8000a98 <HAL_UART_RxCpltCallback+0x258>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b90      	ldr	r3, [pc, #576]	; (8000a9c <HAL_UART_RxCpltCallback+0x25c>)
 800085a:	7819      	ldrb	r1, [r3, #0]
 800085c:	4b90      	ldr	r3, [pc, #576]	; (8000aa0 <HAL_UART_RxCpltCallback+0x260>)
 800085e:	5499      	strb	r1, [r3, r2]
		switch (pi_uart_rxData)	{
 8000860:	4b8e      	ldr	r3, [pc, #568]	; (8000a9c <HAL_UART_RxCpltCallback+0x25c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	3b63      	subs	r3, #99	; 0x63
 8000866:	2b08      	cmp	r3, #8
 8000868:	d838      	bhi.n	80008dc <HAL_UART_RxCpltCallback+0x9c>
 800086a:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <HAL_UART_RxCpltCallback+0x30>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	08000895 	.word	0x08000895
 8000874:	0800089d 	.word	0x0800089d
 8000878:	080008a5 	.word	0x080008a5
 800087c:	080008ad 	.word	0x080008ad
 8000880:	080008b5 	.word	0x080008b5
 8000884:	080008bd 	.word	0x080008bd
 8000888:	080008c5 	.word	0x080008c5
 800088c:	080008cd 	.word	0x080008cd
 8000890:	080008d5 	.word	0x080008d5
			case SETMODE_MOLLY_DEV1:
				application_state = MOLLY_DEV1;
 8000894:	4b83      	ldr	r3, [pc, #524]	; (8000aa4 <HAL_UART_RxCpltCallback+0x264>)
 8000896:	2202      	movs	r2, #2
 8000898:	701a      	strb	r2, [r3, #0]
				break;
 800089a:	e01f      	b.n	80008dc <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_MOLLY_DEV2:
				application_state = MOLLY_DEV2;
 800089c:	4b81      	ldr	r3, [pc, #516]	; (8000aa4 <HAL_UART_RxCpltCallback+0x264>)
 800089e:	2203      	movs	r2, #3
 80008a0:	701a      	strb	r2, [r3, #0]
				break;
 80008a2:	e01b      	b.n	80008dc <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_PROGRAM_DEV1:
				application_state = PROGRAM_DEV1;
 80008a4:	4b7f      	ldr	r3, [pc, #508]	; (8000aa4 <HAL_UART_RxCpltCallback+0x264>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	701a      	strb	r2, [r3, #0]
				break;
 80008aa:	e017      	b.n	80008dc <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_PROGRAM_DEV2:
				application_state = PROGRAM_DEV2;
 80008ac:	4b7d      	ldr	r3, [pc, #500]	; (8000aa4 <HAL_UART_RxCpltCallback+0x264>)
 80008ae:	2205      	movs	r2, #5
 80008b0:	701a      	strb	r2, [r3, #0]
				break;
 80008b2:	e013      	b.n	80008dc <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_PROGRAM_DEV3:
				application_state = PROGRAM_DEV3;
 80008b4:	4b7b      	ldr	r3, [pc, #492]	; (8000aa4 <HAL_UART_RxCpltCallback+0x264>)
 80008b6:	2206      	movs	r2, #6
 80008b8:	701a      	strb	r2, [r3, #0]
				break;
 80008ba:	e00f      	b.n	80008dc <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_PROGRAM_DEV4:
				application_state = PROGRAM_DEV4;
 80008bc:	4b79      	ldr	r3, [pc, #484]	; (8000aa4 <HAL_UART_RxCpltCallback+0x264>)
 80008be:	2207      	movs	r2, #7
 80008c0:	701a      	strb	r2, [r3, #0]
				break;
 80008c2:	e00b      	b.n	80008dc <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_SENS_SELECT:
				application_state = SEN_SELECT;
 80008c4:	4b77      	ldr	r3, [pc, #476]	; (8000aa4 <HAL_UART_RxCpltCallback+0x264>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	701a      	strb	r2, [r3, #0]
				break;
 80008ca:	e007      	b.n	80008dc <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_SET_CHG_STATE:
				application_state = SET_CHG_STATE;
 80008cc:	4b75      	ldr	r3, [pc, #468]	; (8000aa4 <HAL_UART_RxCpltCallback+0x264>)
 80008ce:	2209      	movs	r2, #9
 80008d0:	701a      	strb	r2, [r3, #0]
				break;
 80008d2:	e003      	b.n	80008dc <HAL_UART_RxCpltCallback+0x9c>
			case SETMODE_SET_DEV_PWR:
				application_state = SET_DEV_PWR;
 80008d4:	4b73      	ldr	r3, [pc, #460]	; (8000aa4 <HAL_UART_RxCpltCallback+0x264>)
 80008d6:	220a      	movs	r2, #10
 80008d8:	701a      	strb	r2, [r3, #0]
				break;
 80008da:	bf00      	nop
		}
		pi_array_end = (pi_array_end+1)%pi_buffer_size;
 80008dc:	4b6e      	ldr	r3, [pc, #440]	; (8000a98 <HAL_UART_RxCpltCallback+0x258>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a71      	ldr	r2, [pc, #452]	; (8000aa8 <HAL_UART_RxCpltCallback+0x268>)
 80008e4:	fb82 1203 	smull	r1, r2, r2, r3
 80008e8:	12d1      	asrs	r1, r2, #11
 80008ea:	17da      	asrs	r2, r3, #31
 80008ec:	1a8a      	subs	r2, r1, r2
 80008ee:	f241 3188 	movw	r1, #5000	; 0x1388
 80008f2:	fb01 f202 	mul.w	r2, r1, r2
 80008f6:	1a9a      	subs	r2, r3, r2
 80008f8:	b292      	uxth	r2, r2
 80008fa:	4b67      	ldr	r3, [pc, #412]	; (8000a98 <HAL_UART_RxCpltCallback+0x258>)
 80008fc:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &pi_uart_rxData, 1);
 80008fe:	2201      	movs	r2, #1
 8000900:	4966      	ldr	r1, [pc, #408]	; (8000a9c <HAL_UART_RxCpltCallback+0x25c>)
 8000902:	486a      	ldr	r0, [pc, #424]	; (8000aac <HAL_UART_RxCpltCallback+0x26c>)
 8000904:	f003 fd9d 	bl	8004442 <HAL_UART_Receive_IT>
			dev1_send_flag = dev1_array_end;
		dev1_new_data = 1;
		dev1_array_end = (dev1_array_end+1)%dev1_uart_buffer_size;
		HAL_UART_Receive_IT(&huart6, &dev1_uart_rxData, 1);
	}
}
 8000908:	e0c0      	b.n	8000a8c <HAL_UART_RxCpltCallback+0x24c>
	else if(huart->Instance == USART3)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a68      	ldr	r2, [pc, #416]	; (8000ab0 <HAL_UART_RxCpltCallback+0x270>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d12c      	bne.n	800096e <HAL_UART_RxCpltCallback+0x12e>
		dev1_uart_rxBuffer[dev2_array_end] = dev2_uart_rxData;
 8000914:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <HAL_UART_RxCpltCallback+0x274>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b67      	ldr	r3, [pc, #412]	; (8000ab8 <HAL_UART_RxCpltCallback+0x278>)
 800091c:	7819      	ldrb	r1, [r3, #0]
 800091e:	4b67      	ldr	r3, [pc, #412]	; (8000abc <HAL_UART_RxCpltCallback+0x27c>)
 8000920:	5499      	strb	r1, [r3, r2]
		if(dev2_uart_rxData == '\n' || dev2_uart_rxData == '\r')
 8000922:	4b65      	ldr	r3, [pc, #404]	; (8000ab8 <HAL_UART_RxCpltCallback+0x278>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b0a      	cmp	r3, #10
 8000928:	d003      	beq.n	8000932 <HAL_UART_RxCpltCallback+0xf2>
 800092a:	4b63      	ldr	r3, [pc, #396]	; (8000ab8 <HAL_UART_RxCpltCallback+0x278>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b0d      	cmp	r3, #13
 8000930:	d103      	bne.n	800093a <HAL_UART_RxCpltCallback+0xfa>
			dev2_send_flag = dev2_array_end;
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <HAL_UART_RxCpltCallback+0x274>)
 8000934:	881a      	ldrh	r2, [r3, #0]
 8000936:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <HAL_UART_RxCpltCallback+0x280>)
 8000938:	801a      	strh	r2, [r3, #0]
		dev2_new_data = 1;
 800093a:	4b62      	ldr	r3, [pc, #392]	; (8000ac4 <HAL_UART_RxCpltCallback+0x284>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
		dev2_array_end = (dev2_array_end+1)%dev2_uart_buffer_size;
 8000940:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <HAL_UART_RxCpltCallback+0x274>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a58      	ldr	r2, [pc, #352]	; (8000aa8 <HAL_UART_RxCpltCallback+0x268>)
 8000948:	fb82 1203 	smull	r1, r2, r2, r3
 800094c:	12d1      	asrs	r1, r2, #11
 800094e:	17da      	asrs	r2, r3, #31
 8000950:	1a8a      	subs	r2, r1, r2
 8000952:	f241 3188 	movw	r1, #5000	; 0x1388
 8000956:	fb01 f202 	mul.w	r2, r1, r2
 800095a:	1a9a      	subs	r2, r3, r2
 800095c:	b292      	uxth	r2, r2
 800095e:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <HAL_UART_RxCpltCallback+0x274>)
 8000960:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &dev2_uart_rxData, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	4954      	ldr	r1, [pc, #336]	; (8000ab8 <HAL_UART_RxCpltCallback+0x278>)
 8000966:	4858      	ldr	r0, [pc, #352]	; (8000ac8 <HAL_UART_RxCpltCallback+0x288>)
 8000968:	f003 fd6b 	bl	8004442 <HAL_UART_Receive_IT>
}
 800096c:	e08e      	b.n	8000a8c <HAL_UART_RxCpltCallback+0x24c>
	else if(huart->Instance == UART4)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a56      	ldr	r2, [pc, #344]	; (8000acc <HAL_UART_RxCpltCallback+0x28c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d129      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x18c>
		dev3_uart_rxBuffer[dev3_array_end] = dev3_uart_rxData;
 8000978:	4b55      	ldr	r3, [pc, #340]	; (8000ad0 <HAL_UART_RxCpltCallback+0x290>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b55      	ldr	r3, [pc, #340]	; (8000ad4 <HAL_UART_RxCpltCallback+0x294>)
 8000980:	7819      	ldrb	r1, [r3, #0]
 8000982:	4b55      	ldr	r3, [pc, #340]	; (8000ad8 <HAL_UART_RxCpltCallback+0x298>)
 8000984:	5499      	strb	r1, [r3, r2]
		if(dev3_uart_rxData == '\n' || dev3_uart_rxData == '\r')
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <HAL_UART_RxCpltCallback+0x294>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b0a      	cmp	r3, #10
 800098c:	d003      	beq.n	8000996 <HAL_UART_RxCpltCallback+0x156>
 800098e:	4b51      	ldr	r3, [pc, #324]	; (8000ad4 <HAL_UART_RxCpltCallback+0x294>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b0d      	cmp	r3, #13
 8000994:	d103      	bne.n	800099e <HAL_UART_RxCpltCallback+0x15e>
			dev3_send_flag = dev3_array_end;
 8000996:	4b4e      	ldr	r3, [pc, #312]	; (8000ad0 <HAL_UART_RxCpltCallback+0x290>)
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	4b50      	ldr	r3, [pc, #320]	; (8000adc <HAL_UART_RxCpltCallback+0x29c>)
 800099c:	801a      	strh	r2, [r3, #0]
		dev3_array_end = (dev3_array_end+1)%dev3_uart_buffer_size;
 800099e:	4b4c      	ldr	r3, [pc, #304]	; (8000ad0 <HAL_UART_RxCpltCallback+0x290>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a40      	ldr	r2, [pc, #256]	; (8000aa8 <HAL_UART_RxCpltCallback+0x268>)
 80009a6:	fb82 1203 	smull	r1, r2, r2, r3
 80009aa:	12d1      	asrs	r1, r2, #11
 80009ac:	17da      	asrs	r2, r3, #31
 80009ae:	1a8a      	subs	r2, r1, r2
 80009b0:	f241 3188 	movw	r1, #5000	; 0x1388
 80009b4:	fb01 f202 	mul.w	r2, r1, r2
 80009b8:	1a9a      	subs	r2, r3, r2
 80009ba:	b292      	uxth	r2, r2
 80009bc:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <HAL_UART_RxCpltCallback+0x290>)
 80009be:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &dev3_uart_rxData, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	4944      	ldr	r1, [pc, #272]	; (8000ad4 <HAL_UART_RxCpltCallback+0x294>)
 80009c4:	4846      	ldr	r0, [pc, #280]	; (8000ae0 <HAL_UART_RxCpltCallback+0x2a0>)
 80009c6:	f003 fd3c 	bl	8004442 <HAL_UART_Receive_IT>
}
 80009ca:	e05f      	b.n	8000a8c <HAL_UART_RxCpltCallback+0x24c>
	else if(huart->Instance == UART5)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a44      	ldr	r2, [pc, #272]	; (8000ae4 <HAL_UART_RxCpltCallback+0x2a4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d129      	bne.n	8000a2a <HAL_UART_RxCpltCallback+0x1ea>
		dev4_uart_rxBuffer[dev4_array_end] = dev4_uart_rxData;
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <HAL_UART_RxCpltCallback+0x2a8>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b43      	ldr	r3, [pc, #268]	; (8000aec <HAL_UART_RxCpltCallback+0x2ac>)
 80009de:	7819      	ldrb	r1, [r3, #0]
 80009e0:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <HAL_UART_RxCpltCallback+0x2b0>)
 80009e2:	5499      	strb	r1, [r3, r2]
		if(dev4_uart_rxData == '\n' || dev4_uart_rxData == '\r')
 80009e4:	4b41      	ldr	r3, [pc, #260]	; (8000aec <HAL_UART_RxCpltCallback+0x2ac>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b0a      	cmp	r3, #10
 80009ea:	d003      	beq.n	80009f4 <HAL_UART_RxCpltCallback+0x1b4>
 80009ec:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <HAL_UART_RxCpltCallback+0x2ac>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b0d      	cmp	r3, #13
 80009f2:	d103      	bne.n	80009fc <HAL_UART_RxCpltCallback+0x1bc>
			dev4_send_flag = dev4_array_end;
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <HAL_UART_RxCpltCallback+0x2a8>)
 80009f6:	881a      	ldrh	r2, [r3, #0]
 80009f8:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <HAL_UART_RxCpltCallback+0x2b4>)
 80009fa:	801a      	strh	r2, [r3, #0]
		dev4_array_end = (dev4_array_end+1)%dev4_uart_buffer_size;
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <HAL_UART_RxCpltCallback+0x2a8>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <HAL_UART_RxCpltCallback+0x268>)
 8000a04:	fb82 1203 	smull	r1, r2, r2, r3
 8000a08:	12d1      	asrs	r1, r2, #11
 8000a0a:	17da      	asrs	r2, r3, #31
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a12:	fb01 f202 	mul.w	r2, r1, r2
 8000a16:	1a9a      	subs	r2, r3, r2
 8000a18:	b292      	uxth	r2, r2
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000a1c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, &dev4_uart_rxData, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4932      	ldr	r1, [pc, #200]	; (8000aec <HAL_UART_RxCpltCallback+0x2ac>)
 8000a22:	4835      	ldr	r0, [pc, #212]	; (8000af8 <HAL_UART_RxCpltCallback+0x2b8>)
 8000a24:	f003 fd0d 	bl	8004442 <HAL_UART_Receive_IT>
}
 8000a28:	e030      	b.n	8000a8c <HAL_UART_RxCpltCallback+0x24c>
	else if(huart->Instance == USART6)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a33      	ldr	r2, [pc, #204]	; (8000afc <HAL_UART_RxCpltCallback+0x2bc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d12b      	bne.n	8000a8c <HAL_UART_RxCpltCallback+0x24c>
		dev1_uart_rxBuffer[dev1_array_end] = dev1_uart_rxData;
 8000a34:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a3c:	7819      	ldrb	r1, [r3, #0]
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <HAL_UART_RxCpltCallback+0x27c>)
 8000a40:	5499      	strb	r1, [r3, r2]
		if(dev1_uart_rxData == '\n' || dev1_uart_rxData == '\r')
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b0a      	cmp	r3, #10
 8000a48:	d003      	beq.n	8000a52 <HAL_UART_RxCpltCallback+0x212>
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b0d      	cmp	r3, #13
 8000a50:	d103      	bne.n	8000a5a <HAL_UART_RxCpltCallback+0x21a>
			dev1_send_flag = dev1_array_end;
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a54:	881a      	ldrh	r2, [r3, #0]
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <HAL_UART_RxCpltCallback+0x2c8>)
 8000a58:	801a      	strh	r2, [r3, #0]
		dev1_new_data = 1;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <HAL_UART_RxCpltCallback+0x2cc>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
		dev1_array_end = (dev1_array_end+1)%dev1_uart_buffer_size;
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_UART_RxCpltCallback+0x268>)
 8000a68:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6c:	12d1      	asrs	r1, r2, #11
 8000a6e:	17da      	asrs	r2, r3, #31
 8000a70:	1a8a      	subs	r2, r1, r2
 8000a72:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a76:	fb01 f202 	mul.w	r2, r1, r2
 8000a7a:	1a9a      	subs	r2, r3, r2
 8000a7c:	b292      	uxth	r2, r2
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a80:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, &dev1_uart_rxData, 1);
 8000a82:	2201      	movs	r2, #1
 8000a84:	491f      	ldr	r1, [pc, #124]	; (8000b04 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a86:	4822      	ldr	r0, [pc, #136]	; (8000b10 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a88:	f003 fcdb 	bl	8004442 <HAL_UART_Receive_IT>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40011000 	.word	0x40011000
 8000a98:	200014b0 	.word	0x200014b0
 8000a9c:	200014b2 	.word	0x200014b2
 8000aa0:	20000128 	.word	0x20000128
 8000aa4:	20000126 	.word	0x20000126
 8000aa8:	68db8bad 	.word	0x68db8bad
 8000aac:	200064b8 	.word	0x200064b8
 8000ab0:	40004800 	.word	0x40004800
 8000ab4:	20005096 	.word	0x20005096
 8000ab8:	2000509a 	.word	0x2000509a
 8000abc:	200015e8 	.word	0x200015e8
 8000ac0:	20005098 	.word	0x20005098
 8000ac4:	2000509b 	.word	0x2000509b
 8000ac8:	20006540 	.word	0x20006540
 8000acc:	40004c00 	.word	0x40004c00
 8000ad0:	20003d06 	.word	0x20003d06
 8000ad4:	20003d0a 	.word	0x20003d0a
 8000ad8:	2000297c 	.word	0x2000297c
 8000adc:	20003d08 	.word	0x20003d08
 8000ae0:	20006430 	.word	0x20006430
 8000ae4:	40005000 	.word	0x40005000
 8000ae8:	20006426 	.word	0x20006426
 8000aec:	2000642a 	.word	0x2000642a
 8000af0:	2000509c 	.word	0x2000509c
 8000af4:	20006428 	.word	0x20006428
 8000af8:	20006474 	.word	0x20006474
 8000afc:	40011400 	.word	0x40011400
 8000b00:	20002972 	.word	0x20002972
 8000b04:	20002976 	.word	0x20002976
 8000b08:	20002974 	.word	0x20002974
 8000b0c:	20002977 	.word	0x20002977
 8000b10:	20006584 	.word	0x20006584

08000b14 <Get_Application_State>:

uint8_t Get_Application_State(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	return application_state;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <Get_Application_State+0x14>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000126 	.word	0x20000126

08000b2c <Dev1_DataReady>:

uint8_t Dev1_DataReady(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	return dev1_new_data;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <Dev1_DataReady+0x14>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20002977 	.word	0x20002977

08000b44 <Dev2_DataReady>:

uint8_t Dev2_DataReady(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	return dev2_new_data;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <Dev2_DataReady+0x14>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000509b 	.word	0x2000509b

08000b5c <Dev1_GetData>:

uint8_t Dev1_GetData(uint16_t head_subtracter)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
	dev1_new_data = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <Dev1_GetData+0x44>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
	return dev1_uart_rxBuffer[(dev1_uart_buffer_size-1-head_subtracter+dev1_array_end)%dev1_uart_buffer_size];
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000b72:	3307      	adds	r3, #7
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <Dev1_GetData+0x48>)
 8000b76:	8812      	ldrh	r2, [r2, #0]
 8000b78:	441a      	add	r2, r3
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <Dev1_GetData+0x4c>)
 8000b7c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b80:	12d9      	asrs	r1, r3, #11
 8000b82:	17d3      	asrs	r3, r2, #31
 8000b84:	1acb      	subs	r3, r1, r3
 8000b86:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <Dev1_GetData+0x50>)
 8000b92:	5cd3      	ldrb	r3, [r2, r3]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	20002977 	.word	0x20002977
 8000ba4:	20002972 	.word	0x20002972
 8000ba8:	68db8bad 	.word	0x68db8bad
 8000bac:	200015e8 	.word	0x200015e8

08000bb0 <Dev2_GetData>:

uint8_t Dev2_GetData(uint16_t head_subtracter)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
	dev2_new_data = 0;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <Dev2_GetData+0x44>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
	return dev2_uart_rxBuffer[(dev2_uart_buffer_size-1-head_subtracter+dev2_array_end)%dev2_uart_buffer_size];
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000bc6:	3307      	adds	r3, #7
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <Dev2_GetData+0x48>)
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	441a      	add	r2, r3
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <Dev2_GetData+0x4c>)
 8000bd0:	fb83 1302 	smull	r1, r3, r3, r2
 8000bd4:	12d9      	asrs	r1, r3, #11
 8000bd6:	17d3      	asrs	r3, r2, #31
 8000bd8:	1acb      	subs	r3, r1, r3
 8000bda:	f241 3188 	movw	r1, #5000	; 0x1388
 8000bde:	fb01 f303 	mul.w	r3, r1, r3
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <Dev2_GetData+0x50>)
 8000be6:	5cd3      	ldrb	r3, [r2, r3]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	2000509b 	.word	0x2000509b
 8000bf8:	20005096 	.word	0x20005096
 8000bfc:	68db8bad 	.word	0x68db8bad
 8000c00:	20003d0c 	.word	0x20003d0c

08000c04 <Dev1_Find_Word>:

uint8_t Dev1_Find_Word(char* word)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b0c5      	sub	sp, #276	; 0x114
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c12:	6018      	str	r0, [r3, #0]
	if(Dev1_DataReady())
 8000c14:	f7ff ff8a 	bl	8000b2c <Dev1_DataReady>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d047      	beq.n	8000cae <Dev1_Find_Word+0xaa>
	{
		uint16_t word_length = strlen(word);
 8000c1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	f7ff fafc 	bl	8000224 <strlen>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		char current_word[255] = {0};
 8000c32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	3304      	adds	r3, #4
 8000c40:	22fb      	movs	r2, #251	; 0xfb
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 fbbf 	bl	80053c8 <memset>
		for(uint16_t i = 0; i<word_length; i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000c50:	e016      	b.n	8000c80 <Dev1_Find_Word+0x7c>
			current_word[word_length-1-i] = Dev1_GetData(i);
 8000c52:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000c56:	1e5a      	subs	r2, r3, #1
 8000c58:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000c5c:	1ad4      	subs	r4, r2, r3
 8000c5e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff7a 	bl	8000b5c <Dev1_GetData>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000c74:	551a      	strb	r2, [r3, r4]
		for(uint16_t i = 0; i<word_length; i++)
 8000c76:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000c80:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000c84:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d3e2      	bcc.n	8000c52 <Dev1_Find_Word+0x4e>

		if(strcmp(current_word, word) == 0)
 8000c8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c94:	f107 020c 	add.w	r2, r7, #12
 8000c98:	6819      	ldr	r1, [r3, #0]
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	f7ff fab8 	bl	8000210 <strcmp>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <Dev1_Find_Word+0xa6>
			return 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e002      	b.n	8000cb0 <Dev1_Find_Word+0xac>
		else
			return 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <Dev1_Find_Word+0xac>
	}
	else
		return 0;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}

08000cba <Dev2_Find_Word>:

uint8_t Dev2_Find_Word(char* word)
{
 8000cba:	b590      	push	{r4, r7, lr}
 8000cbc:	b0c5      	sub	sp, #276	; 0x114
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cc8:	6018      	str	r0, [r3, #0]
	if(Dev2_DataReady())
 8000cca:	f7ff ff3b 	bl	8000b44 <Dev2_DataReady>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d047      	beq.n	8000d64 <Dev2_Find_Word+0xaa>
	{
		uint16_t word_length = strlen(word);
 8000cd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cd8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	f7ff faa1 	bl	8000224 <strlen>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		char current_word[255] = {0};
 8000ce8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	22fb      	movs	r2, #251	; 0xfb
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 fb64 	bl	80053c8 <memset>
		for(uint16_t i = 0; i<word_length; i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000d06:	e016      	b.n	8000d36 <Dev2_Find_Word+0x7c>
			current_word[word_length-1-i] = Dev2_GetData(i);
 8000d08:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000d0c:	1e5a      	subs	r2, r3, #1
 8000d0e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000d12:	1ad4      	subs	r4, r2, r3
 8000d14:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff49 	bl	8000bb0 <Dev2_GetData>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d2a:	551a      	strb	r2, [r3, r4]
		for(uint16_t i = 0; i<word_length; i++)
 8000d2c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000d30:	3301      	adds	r3, #1
 8000d32:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000d36:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000d3a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d3e2      	bcc.n	8000d08 <Dev2_Find_Word+0x4e>

		if(strcmp(current_word, word) == 0)
 8000d42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d4a:	f107 020c 	add.w	r2, r7, #12
 8000d4e:	6819      	ldr	r1, [r3, #0]
 8000d50:	4610      	mov	r0, r2
 8000d52:	f7ff fa5d 	bl	8000210 <strcmp>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <Dev2_Find_Word+0xa6>
			return 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e002      	b.n	8000d66 <Dev2_Find_Word+0xac>
		else
			return 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e000      	b.n	8000d66 <Dev2_Find_Word+0xac>
	}
	else
		return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <Dev1_GetInfo>:

uint8_t * Dev1_GetInfo(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	if(Dev1_DataReady())
 8000d76:	f7ff fed9 	bl	8000b2c <Dev1_DataReady>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d037      	beq.n	8000df0 <Dev1_GetInfo+0x80>
	{
		if(getinfo_find_fields)
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <Dev1_GetInfo+0x8c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d021      	beq.n	8000dcc <Dev1_GetInfo+0x5c>
		{
			char curr_char = Dev1_GetData(0);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff fee7 	bl	8000b5c <Dev1_GetData>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
			getinfo_buffer[getinfo_buffer_head] = curr_char;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <Dev1_GetInfo+0x90>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <Dev1_GetInfo+0x94>)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	5453      	strb	r3, [r2, r1]
			getinfo_buffer_head += 1;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <Dev1_GetInfo+0x90>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <Dev1_GetInfo+0x90>)
 8000da8:	801a      	strh	r2, [r3, #0]

			if(curr_char == '|')
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b7c      	cmp	r3, #124	; 0x7c
 8000dae:	d105      	bne.n	8000dbc <Dev1_GetInfo+0x4c>
				getinfo_fields_found_count += 1;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <Dev1_GetInfo+0x98>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <Dev1_GetInfo+0x98>)
 8000dba:	701a      	strb	r2, [r3, #0]

			if(getinfo_fields_found_count == num_machine_readable_fields)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <Dev1_GetInfo+0x98>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b25      	cmp	r3, #37	; 0x25
 8000dc2:	d115      	bne.n	8000df0 <Dev1_GetInfo+0x80>
				getinfo_buffer[0] = '1';
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <Dev1_GetInfo+0x94>)
 8000dc6:	2231      	movs	r2, #49	; 0x31
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e011      	b.n	8000df0 <Dev1_GetInfo+0x80>
		}
		else
		{
			if(Dev1_Find_Word("1."))
 8000dcc:	480f      	ldr	r0, [pc, #60]	; (8000e0c <Dev1_GetInfo+0x9c>)
 8000dce:	f7ff ff19 	bl	8000c04 <Dev1_Find_Word>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00b      	beq.n	8000df0 <Dev1_GetInfo+0x80>
			{
				getinfo_buffer[1] = '.';
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <Dev1_GetInfo+0x94>)
 8000dda:	222e      	movs	r2, #46	; 0x2e
 8000ddc:	705a      	strb	r2, [r3, #1]
				getinfo_buffer_head = getinfo_buffer_head + 1;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <Dev1_GetInfo+0x90>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <Dev1_GetInfo+0x90>)
 8000de8:	801a      	strh	r2, [r3, #0]
				getinfo_find_fields = 1;
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <Dev1_GetInfo+0x8c>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return getinfo_buffer;
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <Dev1_GetInfo+0x94>)
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200015e1 	.word	0x200015e1
 8000e00:	200015e2 	.word	0x200015e2
 8000e04:	200014b4 	.word	0x200014b4
 8000e08:	200015e0 	.word	0x200015e0
 8000e0c:	08006628 	.word	0x08006628

08000e10 <Dev2_GetInfo>:

uint8_t * Dev2_GetInfo(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
	if(Dev2_DataReady())
 8000e16:	f7ff fe95 	bl	8000b44 <Dev2_DataReady>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d037      	beq.n	8000e90 <Dev2_GetInfo+0x80>
	{
		if(getinfo_find_fields)
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <Dev2_GetInfo+0x8c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d021      	beq.n	8000e6c <Dev2_GetInfo+0x5c>
		{
			char curr_char = Dev2_GetData(0);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fec1 	bl	8000bb0 <Dev2_GetData>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
			getinfo_buffer[getinfo_buffer_head] = curr_char;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <Dev2_GetInfo+0x90>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <Dev2_GetInfo+0x94>)
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	5453      	strb	r3, [r2, r1]
			getinfo_buffer_head += 1;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <Dev2_GetInfo+0x90>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <Dev2_GetInfo+0x90>)
 8000e48:	801a      	strh	r2, [r3, #0]

			if(curr_char == '|')
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b7c      	cmp	r3, #124	; 0x7c
 8000e4e:	d105      	bne.n	8000e5c <Dev2_GetInfo+0x4c>
				getinfo_fields_found_count += 1;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <Dev2_GetInfo+0x98>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <Dev2_GetInfo+0x98>)
 8000e5a:	701a      	strb	r2, [r3, #0]

			if(getinfo_fields_found_count == num_machine_readable_fields)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <Dev2_GetInfo+0x98>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b25      	cmp	r3, #37	; 0x25
 8000e62:	d115      	bne.n	8000e90 <Dev2_GetInfo+0x80>
				getinfo_buffer[0] = '1';
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <Dev2_GetInfo+0x94>)
 8000e66:	2231      	movs	r2, #49	; 0x31
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e011      	b.n	8000e90 <Dev2_GetInfo+0x80>
		}
		else
		{
			if(Dev2_Find_Word("1."))
 8000e6c:	480f      	ldr	r0, [pc, #60]	; (8000eac <Dev2_GetInfo+0x9c>)
 8000e6e:	f7ff ff24 	bl	8000cba <Dev2_Find_Word>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00b      	beq.n	8000e90 <Dev2_GetInfo+0x80>
			{
				getinfo_buffer[1] = '.';
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <Dev2_GetInfo+0x94>)
 8000e7a:	222e      	movs	r2, #46	; 0x2e
 8000e7c:	705a      	strb	r2, [r3, #1]
				getinfo_buffer_head = getinfo_buffer_head + 1;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <Dev2_GetInfo+0x90>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <Dev2_GetInfo+0x90>)
 8000e88:	801a      	strh	r2, [r3, #0]
				getinfo_find_fields = 1;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <Dev2_GetInfo+0x8c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return getinfo_buffer;
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <Dev2_GetInfo+0x94>)
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200015e1 	.word	0x200015e1
 8000ea0:	200015e2 	.word	0x200015e2
 8000ea4:	200014b4 	.word	0x200014b4
 8000ea8:	200015e0 	.word	0x200015e0
 8000eac:	08006628 	.word	0x08006628

08000eb0 <PrettySend_Skyla_Info_toPi>:
			"Network Key",								"Fuse Settings",						"Creed Transmit Frequency",		"RTCC Trim Value",						"Data Logger Send Pointer",
			"Build Version",								"Creed Settings",						"RTCC Control Value",				"Data Logger Next Sector",			"Data Logger Read Sector",
			"Data Logger Origin Sector",			"Data Logger Send Sector"
};
void PrettySend_Skyla_Info_toPi(uint8_t *payload, uint8_t skyla_num, uint8_t before_bool)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	70bb      	strb	r3, [r7, #2]
	char* tokens = strtok((char*) payload, "|");
 8000ec0:	4935      	ldr	r1, [pc, #212]	; (8000f98 <PrettySend_Skyla_Info_toPi+0xe8>)
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f004 fb4e 	bl	8005564 <strtok>
 8000ec8:	60f8      	str	r0, [r7, #12]
	uint8_t counter = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	72fb      	strb	r3, [r7, #11]

	while( tokens != NULL )
 8000ece:	e05a      	b.n	8000f86 <PrettySend_Skyla_Info_toPi+0xd6>
	{
		if(skyla_num == 1)
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d107      	bne.n	8000ee6 <PrettySend_Skyla_Info_toPi+0x36>
			HAL_UART_Transmit(&huart1, (uint8_t*)"S1|", 3, 1000);
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	2203      	movs	r2, #3
 8000edc:	492f      	ldr	r1, [pc, #188]	; (8000f9c <PrettySend_Skyla_Info_toPi+0xec>)
 8000ede:	4830      	ldr	r0, [pc, #192]	; (8000fa0 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000ee0:	f003 fa1d 	bl	800431e <HAL_UART_Transmit>
 8000ee4:	e006      	b.n	8000ef4 <PrettySend_Skyla_Info_toPi+0x44>
		else
			HAL_UART_Transmit(&huart1, (uint8_t*)"S2|", 3, 1000);
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	2203      	movs	r2, #3
 8000eec:	492d      	ldr	r1, [pc, #180]	; (8000fa4 <PrettySend_Skyla_Info_toPi+0xf4>)
 8000eee:	482c      	ldr	r0, [pc, #176]	; (8000fa0 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000ef0:	f003 fa15 	bl	800431e <HAL_UART_Transmit>

		if(before_bool)
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <PrettySend_Skyla_Info_toPi+0x5a>
			HAL_UART_Transmit(&huart1, (uint8_t*)"B|", 2, 1000);
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	2202      	movs	r2, #2
 8000f00:	4929      	ldr	r1, [pc, #164]	; (8000fa8 <PrettySend_Skyla_Info_toPi+0xf8>)
 8000f02:	4827      	ldr	r0, [pc, #156]	; (8000fa0 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f04:	f003 fa0b 	bl	800431e <HAL_UART_Transmit>
 8000f08:	e006      	b.n	8000f18 <PrettySend_Skyla_Info_toPi+0x68>
		else
			HAL_UART_Transmit(&huart1, (uint8_t*)"A|", 2, 1000);
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	2202      	movs	r2, #2
 8000f10:	4926      	ldr	r1, [pc, #152]	; (8000fac <PrettySend_Skyla_Info_toPi+0xfc>)
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f14:	f003 fa03 	bl	800431e <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, (uint8_t*)titles[counter], strlen(titles[counter]), 1000);
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	4a25      	ldr	r2, [pc, #148]	; (8000fb0 <PrettySend_Skyla_Info_toPi+0x100>)
 8000f1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000f20:	7afb      	ldrb	r3, [r7, #11]
 8000f22:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <PrettySend_Skyla_Info_toPi+0x100>)
 8000f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f97b 	bl	8000224 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	4621      	mov	r1, r4
 8000f38:	4819      	ldr	r0, [pc, #100]	; (8000fa0 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f3a:	f003 f9f0 	bl	800431e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"| ", 2, 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	2202      	movs	r2, #2
 8000f44:	491b      	ldr	r1, [pc, #108]	; (8000fb4 <PrettySend_Skyla_Info_toPi+0x104>)
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f48:	f003 f9e9 	bl	800431e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)tokens, strlen(tokens), 1000);
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f7ff f969 	bl	8000224 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	68f9      	ldr	r1, [r7, #12]
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f5e:	f003 f9de 	bl	800431e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	2201      	movs	r2, #1
 8000f68:	4913      	ldr	r1, [pc, #76]	; (8000fb8 <PrettySend_Skyla_Info_toPi+0x108>)
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <PrettySend_Skyla_Info_toPi+0xf0>)
 8000f6c:	f003 f9d7 	bl	800431e <HAL_UART_Transmit>

		tokens = strtok(NULL, "|");
 8000f70:	4909      	ldr	r1, [pc, #36]	; (8000f98 <PrettySend_Skyla_Info_toPi+0xe8>)
 8000f72:	2000      	movs	r0, #0
 8000f74:	f004 faf6 	bl	8005564 <strtok>
 8000f78:	60f8      	str	r0, [r7, #12]
		counter += 1;
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f002 f821 	bl	8002fc8 <HAL_Delay>
	while( tokens != NULL )
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1a1      	bne.n	8000ed0 <PrettySend_Skyla_Info_toPi+0x20>
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	0800691c 	.word	0x0800691c
 8000f9c:	08006920 	.word	0x08006920
 8000fa0:	200064b8 	.word	0x200064b8
 8000fa4:	08006924 	.word	0x08006924
 8000fa8:	08006928 	.word	0x08006928
 8000fac:	0800692c 	.word	0x0800692c
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	08006930 	.word	0x08006930
 8000fb8:	08006934 	.word	0x08006934

08000fbc <Power_Cycle_Dev>:

void Power_Cycle_Dev(char dev)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	printf("Power cycling devices\n");
 8000fc6:	4821      	ldr	r0, [pc, #132]	; (800104c <Power_Cycle_Dev+0x90>)
 8000fc8:	f004 fa8c 	bl	80054e4 <puts>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Power cycling devices \n", sizeof("Power cycling devices\n"),500);
 8000fcc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fd0:	2217      	movs	r2, #23
 8000fd2:	491f      	ldr	r1, [pc, #124]	; (8001050 <Power_Cycle_Dev+0x94>)
 8000fd4:	481f      	ldr	r0, [pc, #124]	; (8001054 <Power_Cycle_Dev+0x98>)
 8000fd6:	f003 f9a2 	bl	800431e <HAL_UART_Transmit>

	Power_Dev_OFF(dev);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fe0f 	bl	8001c00 <Power_Dev_OFF>

	printf("Waiting for 10 seconds...\n");
 8000fe2:	481d      	ldr	r0, [pc, #116]	; (8001058 <Power_Cycle_Dev+0x9c>)
 8000fe4:	f004 fa7e 	bl	80054e4 <puts>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Waiting for 10 seconds... \n", sizeof("Waiting for 10 seconds...\n"),500);
 8000fe8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fec:	221b      	movs	r2, #27
 8000fee:	491b      	ldr	r1, [pc, #108]	; (800105c <Power_Cycle_Dev+0xa0>)
 8000ff0:	4818      	ldr	r0, [pc, #96]	; (8001054 <Power_Cycle_Dev+0x98>)
 8000ff2:	f003 f994 	bl	800431e <HAL_UART_Transmit>

	for (uint8_t i = 0; i < 10; i ++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e01b      	b.n	8001034 <Power_Cycle_Dev+0x78>
	{
		HAL_Delay(1000);
 8000ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001000:	f001 ffe2 	bl	8002fc8 <HAL_Delay>
		printf("%d\10secs\r", i);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4619      	mov	r1, r3
 8001008:	4815      	ldr	r0, [pc, #84]	; (8001060 <Power_Cycle_Dev+0xa4>)
 800100a:	f004 f9e5 	bl	80053d8 <iprintf>

		HAL_UART_Transmit(&huart1, &i, 1, 500);
 800100e:	f107 010f 	add.w	r1, r7, #15
 8001012:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001016:	2201      	movs	r2, #1
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <Power_Cycle_Dev+0x98>)
 800101a:	f003 f980 	bl	800431e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"secs elapsed \n", sizeof("secs elapsed\n"),500);
 800101e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001022:	220e      	movs	r2, #14
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <Power_Cycle_Dev+0xa8>)
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <Power_Cycle_Dev+0x98>)
 8001028:	f003 f979 	bl	800431e <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 10; i ++)
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	3301      	adds	r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b09      	cmp	r3, #9
 8001038:	d9e0      	bls.n	8000ffc <Power_Cycle_Dev+0x40>
	}

	Power_Dev_ON(dev);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fe71 	bl	8001d24 <Power_Dev_ON>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	08006938 	.word	0x08006938
 8001050:	08006950 	.word	0x08006950
 8001054:	200064b8 	.word	0x200064b8
 8001058:	08006968 	.word	0x08006968
 800105c:	08006984 	.word	0x08006984
 8001060:	080069a0 	.word	0x080069a0
 8001064:	080069ac 	.word	0x080069ac

08001068 <Dev_Restarted>:

bool Dev_Restarted(char node, uint8_t timeout)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
	uint32_t time_start = HAL_GetTick();
 8001078:	f001 ff9a 	bl	8002fb0 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

	uint8_t new_data = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	75fb      	strb	r3, [r7, #23]
	switch(node)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b31      	cmp	r3, #49	; 0x31
 8001086:	d002      	beq.n	800108e <Dev_Restarted+0x26>
 8001088:	2b32      	cmp	r3, #50	; 0x32
 800108a:	d004      	beq.n	8001096 <Dev_Restarted+0x2e>
 800108c:	e007      	b.n	800109e <Dev_Restarted+0x36>
	{
		case NODE1:
			new_data = dev1_new_data;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <Dev_Restarted+0xa0>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	75fb      	strb	r3, [r7, #23]
			break;
 8001094:	e00c      	b.n	80010b0 <Dev_Restarted+0x48>
		case NODE2:
			new_data = dev2_new_data;
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <Dev_Restarted+0xa4>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	75fb      	strb	r3, [r7, #23]
			break;
 800109c:	e008      	b.n	80010b0 <Dev_Restarted+0x48>
		default:
			HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Node Selected \n", sizeof("Invalid Node Selected\n"), 1000);
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	2217      	movs	r2, #23
 80010a4:	491a      	ldr	r1, [pc, #104]	; (8001110 <Dev_Restarted+0xa8>)
 80010a6:	481b      	ldr	r0, [pc, #108]	; (8001114 <Dev_Restarted+0xac>)
 80010a8:	f003 f939 	bl	800431e <HAL_UART_Transmit>
			return false;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e027      	b.n	8001100 <Dev_Restarted+0x98>
	}

	while (!new_data)
 80010b0:	e01b      	b.n	80010ea <Dev_Restarted+0x82>
	{
		uint32_t time_elapsed = (HAL_GetTick() - time_start);
 80010b2:	f001 ff7d 	bl	8002fb0 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*)"Waiting for device to startup \n", sizeof("Waiting for device to startup \n"), 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	2220      	movs	r2, #32
 80010c4:	4914      	ldr	r1, [pc, #80]	; (8001118 <Dev_Restarted+0xb0>)
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <Dev_Restarted+0xac>)
 80010c8:	f003 f929 	bl	800431e <HAL_UART_Transmit>

		if (time_elapsed >= (timeout * 1000))
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4293      	cmp	r3, r2
 80010dc:	d301      	bcc.n	80010e2 <Dev_Restarted+0x7a>
		{
			return false;
 80010de:	2300      	movs	r3, #0
 80010e0:	e00e      	b.n	8001100 <Dev_Restarted+0x98>
		}

		HAL_Delay(1000);
 80010e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e6:	f001 ff6f 	bl	8002fc8 <HAL_Delay>
	while (!new_data)
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0e0      	beq.n	80010b2 <Dev_Restarted+0x4a>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)"Dev Restarted \n", sizeof("Dev Restarted\n"), 1000);
 80010f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f4:	220f      	movs	r2, #15
 80010f6:	4909      	ldr	r1, [pc, #36]	; (800111c <Dev_Restarted+0xb4>)
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <Dev_Restarted+0xac>)
 80010fa:	f003 f910 	bl	800431e <HAL_UART_Transmit>
	return true;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20002977 	.word	0x20002977
 800110c:	2000509b 	.word	0x2000509b
 8001110:	080069bc 	.word	0x080069bc
 8001114:	200064b8 	.word	0x200064b8
 8001118:	080069d4 	.word	0x080069d4
 800111c:	080069f4 	.word	0x080069f4

08001120 <Dev1_Molly_App>:

void Dev1_Molly_App(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001126:	af00      	add	r7, sp, #0
	switch(molly_dev1_state)
 8001128:	4bba      	ldr	r3, [pc, #744]	; (8001414 <Dev1_Molly_App+0x2f4>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	2b07      	cmp	r3, #7
 8001130:	f200 81b8 	bhi.w	80014a4 <Dev1_Molly_App+0x384>
 8001134:	a201      	add	r2, pc, #4	; (adr r2, 800113c <Dev1_Molly_App+0x1c>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	0800115d 	.word	0x0800115d
 8001140:	0800118f 	.word	0x0800118f
 8001144:	08001211 	.word	0x08001211
 8001148:	08001261 	.word	0x08001261
 800114c:	0800128d 	.word	0x0800128d
 8001150:	080012eb 	.word	0x080012eb
 8001154:	080013a3 	.word	0x080013a3
 8001158:	080013cf 	.word	0x080013cf
	{
		case FIND_DEBUG:
			if(Dev1_Find_Word("DEBUG"))
 800115c:	48ae      	ldr	r0, [pc, #696]	; (8001418 <Dev1_Molly_App+0x2f8>)
 800115e:	f7ff fd51 	bl	8000c04 <Dev1_Find_Word>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 81b1 	beq.w	80014cc <Dev1_Molly_App+0x3ac>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L|Found debug\n", 14, 1000);
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	220e      	movs	r2, #14
 8001170:	49aa      	ldr	r1, [pc, #680]	; (800141c <Dev1_Molly_App+0x2fc>)
 8001172:	48ab      	ldr	r0, [pc, #684]	; (8001420 <Dev1_Molly_App+0x300>)
 8001174:	f003 f8d3 	bl	800431e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)"DEBUG", 5, 1000);
 8001178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117c:	2205      	movs	r2, #5
 800117e:	49a6      	ldr	r1, [pc, #664]	; (8001418 <Dev1_Molly_App+0x2f8>)
 8001180:	48a8      	ldr	r0, [pc, #672]	; (8001424 <Dev1_Molly_App+0x304>)
 8001182:	f003 f8cc 	bl	800431e <HAL_UART_Transmit>
				molly_dev1_state = GET_SETTINGS;
 8001186:	4ba3      	ldr	r3, [pc, #652]	; (8001414 <Dev1_Molly_App+0x2f4>)
 8001188:	2202      	movs	r2, #2
 800118a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800118c:	e19e      	b.n	80014cc <Dev1_Molly_App+0x3ac>

		case GET_SETTINGS:
			HAL_UART_Transmit(&huart1, (uint8_t*)"GET_SETTINGS \n", sizeof("GET_SETTINGS\n"), 1000);
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	220e      	movs	r2, #14
 8001194:	49a4      	ldr	r1, [pc, #656]	; (8001428 <Dev1_Molly_App+0x308>)
 8001196:	48a2      	ldr	r0, [pc, #648]	; (8001420 <Dev1_Molly_App+0x300>)
 8001198:	f003 f8c1 	bl	800431e <HAL_UART_Transmit>
			memset(pi_uart_rxBuffer, 0, pi_buffer_size);
 800119c:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a0:	2100      	movs	r1, #0
 80011a2:	48a2      	ldr	r0, [pc, #648]	; (800142c <Dev1_Molly_App+0x30c>)
 80011a4:	f004 f910 	bl	80053c8 <memset>
			pi_array_end = 0;
 80011a8:	4ba1      	ldr	r3, [pc, #644]	; (8001430 <Dev1_Molly_App+0x310>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"send payload \r\n", 15, 1000);
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	220f      	movs	r2, #15
 80011b4:	499f      	ldr	r1, [pc, #636]	; (8001434 <Dev1_Molly_App+0x314>)
 80011b6:	489a      	ldr	r0, [pc, #616]	; (8001420 <Dev1_Molly_App+0x300>)
 80011b8:	f003 f8b1 	bl	800431e <HAL_UART_Transmit>
			HAL_Delay(100);
 80011bc:	2064      	movs	r0, #100	; 0x64
 80011be:	f001 ff03 	bl	8002fc8 <HAL_Delay>

			HAL_UART_Transmit(&huart1, (uint8_t*)"L| PL:", 6, 1000);
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	2206      	movs	r2, #6
 80011c8:	499b      	ldr	r1, [pc, #620]	; (8001438 <Dev1_Molly_App+0x318>)
 80011ca:	4895      	ldr	r0, [pc, #596]	; (8001420 <Dev1_Molly_App+0x300>)
 80011cc:	f003 f8a7 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)(char*)pi_uart_rxBuffer, strlen((char*)pi_uart_rxBuffer), 1000);
 80011d0:	4896      	ldr	r0, [pc, #600]	; (800142c <Dev1_Molly_App+0x30c>)
 80011d2:	f7ff f827 	bl	8000224 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	4993      	ldr	r1, [pc, #588]	; (800142c <Dev1_Molly_App+0x30c>)
 80011e0:	488f      	ldr	r0, [pc, #572]	; (8001420 <Dev1_Molly_App+0x300>)
 80011e2:	f003 f89c 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	2201      	movs	r2, #1
 80011ec:	4993      	ldr	r1, [pc, #588]	; (800143c <Dev1_Molly_App+0x31c>)
 80011ee:	488c      	ldr	r0, [pc, #560]	; (8001420 <Dev1_Molly_App+0x300>)
 80011f0:	f003 f895 	bl	800431e <HAL_UART_Transmit>

			payload = pi_uart_rxBuffer;
 80011f4:	4b92      	ldr	r3, [pc, #584]	; (8001440 <Dev1_Molly_App+0x320>)
 80011f6:	4a8d      	ldr	r2, [pc, #564]	; (800142c <Dev1_Molly_App+0x30c>)
 80011f8:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart6, (uint8_t*)"$", 1, 500);
 80011fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011fe:	2201      	movs	r2, #1
 8001200:	4990      	ldr	r1, [pc, #576]	; (8001444 <Dev1_Molly_App+0x324>)
 8001202:	4888      	ldr	r0, [pc, #544]	; (8001424 <Dev1_Molly_App+0x304>)
 8001204:	f003 f88b 	bl	800431e <HAL_UART_Transmit>
			molly_dev1_state = GET_MSG_P1;
 8001208:	4b82      	ldr	r3, [pc, #520]	; (8001414 <Dev1_Molly_App+0x2f4>)
 800120a:	2203      	movs	r2, #3
 800120c:	701a      	strb	r2, [r3, #0]
			break;
 800120e:	e164      	b.n	80014da <Dev1_Molly_App+0x3ba>

		case GET_MSG_P1:
			HAL_UART_Transmit(&huart1, (uint8_t*)"GET_MSG_P1 \n", sizeof("GET_MSG_P1\n"), 1000);
 8001210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001214:	220c      	movs	r2, #12
 8001216:	498c      	ldr	r1, [pc, #560]	; (8001448 <Dev1_Molly_App+0x328>)
 8001218:	4881      	ldr	r0, [pc, #516]	; (8001420 <Dev1_Molly_App+0x300>)
 800121a:	f003 f880 	bl	800431e <HAL_UART_Transmit>

			if(Dev1_Find_Word("NACK"))
 800121e:	488b      	ldr	r0, [pc, #556]	; (800144c <Dev1_Molly_App+0x32c>)
 8001220:	f7ff fcf0 	bl	8000c04 <Dev1_Find_Word>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8152 	beq.w	80014d0 <Dev1_Molly_App+0x3b0>
			{
				memset(getinfo_buffer, 0, getinfo_buffer_size);
 800122c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001230:	2100      	movs	r1, #0
 8001232:	4887      	ldr	r0, [pc, #540]	; (8001450 <Dev1_Molly_App+0x330>)
 8001234:	f004 f8c8 	bl	80053c8 <memset>
				getinfo_buffer_head = 1;
 8001238:	4b86      	ldr	r3, [pc, #536]	; (8001454 <Dev1_Molly_App+0x334>)
 800123a:	2201      	movs	r2, #1
 800123c:	801a      	strh	r2, [r3, #0]
				getinfo_fields_found_count = 0;
 800123e:	4b86      	ldr	r3, [pc, #536]	; (8001458 <Dev1_Molly_App+0x338>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
				getinfo_find_fields = 0;
 8001244:	4b85      	ldr	r3, [pc, #532]	; (800145c <Dev1_Molly_App+0x33c>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6, (uint8_t*)"#", 1, 500);
 800124a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800124e:	2201      	movs	r2, #1
 8001250:	4983      	ldr	r1, [pc, #524]	; (8001460 <Dev1_Molly_App+0x340>)
 8001252:	4874      	ldr	r0, [pc, #464]	; (8001424 <Dev1_Molly_App+0x304>)
 8001254:	f003 f863 	bl	800431e <HAL_UART_Transmit>
				molly_dev1_state = GET_MSG_P2;
 8001258:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <Dev1_Molly_App+0x2f4>)
 800125a:	2204      	movs	r2, #4
 800125c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800125e:	e137      	b.n	80014d0 <Dev1_Molly_App+0x3b0>

		case GET_MSG_P2:
			brd_msg = Dev1_GetInfo();
 8001260:	f7ff fd86 	bl	8000d70 <Dev1_GetInfo>
 8001264:	4603      	mov	r3, r0
 8001266:	4a7f      	ldr	r2, [pc, #508]	; (8001464 <Dev1_Molly_App+0x344>)
 8001268:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 800126a:	4b7e      	ldr	r3, [pc, #504]	; (8001464 <Dev1_Molly_App+0x344>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b31      	cmp	r3, #49	; 0x31
 8001272:	f040 812f 	bne.w	80014d4 <Dev1_Molly_App+0x3b4>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 1, 1);
 8001276:	4b7b      	ldr	r3, [pc, #492]	; (8001464 <Dev1_Molly_App+0x344>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2201      	movs	r2, #1
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fe16 	bl	8000eb0 <PrettySend_Skyla_Info_toPi>
				molly_dev1_state = MOLLY_P1;
 8001284:	4b63      	ldr	r3, [pc, #396]	; (8001414 <Dev1_Molly_App+0x2f4>)
 8001286:	2205      	movs	r2, #5
 8001288:	701a      	strb	r2, [r3, #0]
			}
			break;
 800128a:	e123      	b.n	80014d4 <Dev1_Molly_App+0x3b4>

		case MOLLY_P1:
			{
				if(Dev1_Find_Word("N"))
 800128c:	4876      	ldr	r0, [pc, #472]	; (8001468 <Dev1_Molly_App+0x348>)
 800128e:	f7ff fcb9 	bl	8000c04 <Dev1_Find_Word>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <Dev1_Molly_App+0x17e>
				{
					dev1_new_data = 0;
 8001298:	4b74      	ldr	r3, [pc, #464]	; (800146c <Dev1_Molly_App+0x34c>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
				}
				char strC[500];
				char * settings_char = "$$";
 800129e:	4b74      	ldr	r3, [pc, #464]	; (8001470 <Dev1_Molly_App+0x350>)
 80012a0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
				strncpy(strC, settings_char, 1);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2201      	movs	r2, #1
 80012a8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 f930 	bl	8005512 <strncpy>
				strC[1] = '\0';
 80012b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012ba:	2200      	movs	r2, #0
 80012bc:	705a      	strb	r2, [r3, #1]
				strcat(strC, (char*)payload);
 80012be:	4b60      	ldr	r3, [pc, #384]	; (8001440 <Dev1_Molly_App+0x320>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f004 f914 	bl	80054f4 <strcat>
				HAL_UART_Transmit(&huart6, (uint8_t*) strC, strlen(strC), 50);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7fe ffa8 	bl	8000224 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	1d39      	adds	r1, r7, #4
 80012da:	2332      	movs	r3, #50	; 0x32
 80012dc:	4851      	ldr	r0, [pc, #324]	; (8001424 <Dev1_Molly_App+0x304>)
 80012de:	f003 f81e 	bl	800431e <HAL_UART_Transmit>
				molly_dev1_state = MOLLY_P2;
 80012e2:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <Dev1_Molly_App+0x2f4>)
 80012e4:	2206      	movs	r2, #6
 80012e6:	701a      	strb	r2, [r3, #0]
				break;
 80012e8:	e0f7      	b.n	80014da <Dev1_Molly_App+0x3ba>
			}

		case MOLLY_P2:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| in molly \n", 13, 500);
 80012ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ee:	220d      	movs	r2, #13
 80012f0:	4960      	ldr	r1, [pc, #384]	; (8001474 <Dev1_Molly_App+0x354>)
 80012f2:	484b      	ldr	r0, [pc, #300]	; (8001420 <Dev1_Molly_App+0x300>)
 80012f4:	f003 f813 	bl	800431e <HAL_UART_Transmit>
			while(1)
			{
				if(Dev1_Find_Word(":"))
 80012f8:	485f      	ldr	r0, [pc, #380]	; (8001478 <Dev1_Molly_App+0x358>)
 80012fa:	f7ff fc83 	bl	8000c04 <Dev1_Find_Word>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f9      	beq.n	80012f8 <Dev1_Molly_App+0x1d8>
				{
					char * curr_string = (char*)&dev1_uart_rxBuffer[dev1_array_start+1];
 8001304:	4b5d      	ldr	r3, [pc, #372]	; (800147c <Dev1_Molly_App+0x35c>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4a5d      	ldr	r2, [pc, #372]	; (8001480 <Dev1_Molly_App+0x360>)
 800130c:	4413      	add	r3, r2
 800130e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
					char * find_pass = strstr(curr_string, "PASS");
 8001312:	495c      	ldr	r1, [pc, #368]	; (8001484 <Dev1_Molly_App+0x364>)
 8001314:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001318:	f004 f90e 	bl	8005538 <strstr>
 800131c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					char * find_fail = strstr(curr_string, "FAIL");
 8001320:	4959      	ldr	r1, [pc, #356]	; (8001488 <Dev1_Molly_App+0x368>)
 8001322:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001326:	f004 f907 	bl	8005538 <strstr>
 800132a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
					if(find_pass != NULL)
 800132e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001332:	2b00      	cmp	r3, #0
 8001334:	d020      	beq.n	8001378 <Dev1_Molly_App+0x258>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD PASS \n", 15, 500);
 8001336:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800133a:	220f      	movs	r2, #15
 800133c:	4953      	ldr	r1, [pc, #332]	; (800148c <Dev1_Molly_App+0x36c>)
 800133e:	4838      	ldr	r0, [pc, #224]	; (8001420 <Dev1_Molly_App+0x300>)
 8001340:	f002 ffed 	bl	800431e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart6, (uint8_t*)"#", 1, 500);
 8001344:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001348:	2201      	movs	r2, #1
 800134a:	4945      	ldr	r1, [pc, #276]	; (8001460 <Dev1_Molly_App+0x340>)
 800134c:	4835      	ldr	r0, [pc, #212]	; (8001424 <Dev1_Molly_App+0x304>)
 800134e:	f002 ffe6 	bl	800431e <HAL_UART_Transmit>
						memset(getinfo_buffer, 0, getinfo_buffer_size);
 8001352:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001356:	2100      	movs	r1, #0
 8001358:	483d      	ldr	r0, [pc, #244]	; (8001450 <Dev1_Molly_App+0x330>)
 800135a:	f004 f835 	bl	80053c8 <memset>
						getinfo_buffer_head = 1;
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <Dev1_Molly_App+0x334>)
 8001360:	2201      	movs	r2, #1
 8001362:	801a      	strh	r2, [r3, #0]
						getinfo_fields_found_count = 0;
 8001364:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <Dev1_Molly_App+0x338>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
						getinfo_find_fields = 0;
 800136a:	4b3c      	ldr	r3, [pc, #240]	; (800145c <Dev1_Molly_App+0x33c>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
						molly_dev1_state = GET_MSG_P3;
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <Dev1_Molly_App+0x2f4>)
 8001372:	2207      	movs	r2, #7
 8001374:	701a      	strb	r2, [r3, #0]
						break;
 8001376:	e013      	b.n	80013a0 <Dev1_Molly_App+0x280>
					}
					else if(find_fail != NULL)
 8001378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00a      	beq.n	8001396 <Dev1_Molly_App+0x276>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD FAIL!!! \n", 18, 500);
 8001380:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001384:	2212      	movs	r2, #18
 8001386:	4942      	ldr	r1, [pc, #264]	; (8001490 <Dev1_Molly_App+0x370>)
 8001388:	4825      	ldr	r0, [pc, #148]	; (8001420 <Dev1_Molly_App+0x300>)
 800138a:	f002 ffc8 	bl	800431e <HAL_UART_Transmit>
						molly_dev1_state = FINISH_MOLLY;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <Dev1_Molly_App+0x2f4>)
 8001390:	2208      	movs	r2, #8
 8001392:	701a      	strb	r2, [r3, #0]
						break;
 8001394:	e004      	b.n	80013a0 <Dev1_Molly_App+0x280>
					}
					dev1_array_start = dev1_array_end;
 8001396:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <Dev1_Molly_App+0x374>)
 8001398:	881a      	ldrh	r2, [r3, #0]
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <Dev1_Molly_App+0x35c>)
 800139c:	801a      	strh	r2, [r3, #0]
				if(Dev1_Find_Word(":"))
 800139e:	e7ab      	b.n	80012f8 <Dev1_Molly_App+0x1d8>
				}
			}
			break;
 80013a0:	e09b      	b.n	80014da <Dev1_Molly_App+0x3ba>

		case GET_MSG_P3:
			brd_msg = Dev1_GetInfo();
 80013a2:	f7ff fce5 	bl	8000d70 <Dev1_GetInfo>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <Dev1_Molly_App+0x344>)
 80013aa:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <Dev1_Molly_App+0x344>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b31      	cmp	r3, #49	; 0x31
 80013b4:	f040 8090 	bne.w	80014d8 <Dev1_Molly_App+0x3b8>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 1, 0);
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <Dev1_Molly_App+0x344>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	2101      	movs	r1, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fd75 	bl	8000eb0 <PrettySend_Skyla_Info_toPi>
				molly_dev1_state = FINISH_MOLLY;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <Dev1_Molly_App+0x2f4>)
 80013c8:	2208      	movs	r2, #8
 80013ca:	701a      	strb	r2, [r3, #0]
			}
			break;
 80013cc:	e084      	b.n	80014d8 <Dev1_Molly_App+0x3b8>

		case FINISH_MOLLY:
			DEV1_3_UART_RX_EN(GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d4:	4830      	ldr	r0, [pc, #192]	; (8001498 <Dev1_Molly_App+0x378>)
 80013d6:	f002 f953 	bl	8003680 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, (uint8_t*)"molly complete \r\n", 17, 1000);
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	2211      	movs	r2, #17
 80013e0:	492e      	ldr	r1, [pc, #184]	; (800149c <Dev1_Molly_App+0x37c>)
 80013e2:	480f      	ldr	r0, [pc, #60]	; (8001420 <Dev1_Molly_App+0x300>)
 80013e4:	f002 ff9b 	bl	800431e <HAL_UART_Transmit>

			Power_Cycle_Dev(NODE1);
 80013e8:	2031      	movs	r0, #49	; 0x31
 80013ea:	f7ff fde7 	bl	8000fbc <Power_Cycle_Dev>
			while(!(Dev_Restarted('1', 10)))
 80013ee:	bf00      	nop
 80013f0:	210a      	movs	r1, #10
 80013f2:	2031      	movs	r0, #49	; 0x31
 80013f4:	f7ff fe38 	bl	8001068 <Dev_Restarted>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f083 0301 	eor.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f5      	bne.n	80013f0 <Dev1_Molly_App+0x2d0>
			{
			}

			molly_dev1_state = DEFAULT;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <Dev1_Molly_App+0x2f4>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <Dev1_Molly_App+0x380>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
			break;
 8001410:	e063      	b.n	80014da <Dev1_Molly_App+0x3ba>
 8001412:	bf00      	nop
 8001414:	20000120 	.word	0x20000120
 8001418:	08006a04 	.word	0x08006a04
 800141c:	08006a0c 	.word	0x08006a0c
 8001420:	200064b8 	.word	0x200064b8
 8001424:	20006584 	.word	0x20006584
 8001428:	08006a1c 	.word	0x08006a1c
 800142c:	20000128 	.word	0x20000128
 8001430:	200014b0 	.word	0x200014b0
 8001434:	08006a2c 	.word	0x08006a2c
 8001438:	08006a3c 	.word	0x08006a3c
 800143c:	08006934 	.word	0x08006934
 8001440:	20002978 	.word	0x20002978
 8001444:	08006a44 	.word	0x08006a44
 8001448:	08006a48 	.word	0x08006a48
 800144c:	08006a58 	.word	0x08006a58
 8001450:	200014b4 	.word	0x200014b4
 8001454:	200015e2 	.word	0x200015e2
 8001458:	200015e0 	.word	0x200015e0
 800145c:	200015e1 	.word	0x200015e1
 8001460:	08006a60 	.word	0x08006a60
 8001464:	200015e4 	.word	0x200015e4
 8001468:	08006a64 	.word	0x08006a64
 800146c:	20002977 	.word	0x20002977
 8001470:	08006a68 	.word	0x08006a68
 8001474:	08006a6c 	.word	0x08006a6c
 8001478:	08006a7c 	.word	0x08006a7c
 800147c:	20002970 	.word	0x20002970
 8001480:	200015e8 	.word	0x200015e8
 8001484:	08006a80 	.word	0x08006a80
 8001488:	08006a88 	.word	0x08006a88
 800148c:	08006a90 	.word	0x08006a90
 8001490:	08006aa0 	.word	0x08006aa0
 8001494:	20002972 	.word	0x20002972
 8001498:	40020800 	.word	0x40020800
 800149c:	08006ab4 	.word	0x08006ab4
 80014a0:	20000126 	.word	0x20000126

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| Received molly command. \r\n", 29, 1000);
 80014a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a8:	221d      	movs	r2, #29
 80014aa:	490e      	ldr	r1, [pc, #56]	; (80014e4 <Dev1_Molly_App+0x3c4>)
 80014ac:	480e      	ldr	r0, [pc, #56]	; (80014e8 <Dev1_Molly_App+0x3c8>)
 80014ae:	f002 ff36 	bl	800431e <HAL_UART_Transmit>
			Power_Cycle_Dev('1');
 80014b2:	2031      	movs	r0, #49	; 0x31
 80014b4:	f7ff fd82 	bl	8000fbc <Power_Cycle_Dev>
			DEV1_3_UART_RX_EN(GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014be:	480b      	ldr	r0, [pc, #44]	; (80014ec <Dev1_Molly_App+0x3cc>)
 80014c0:	f002 f8de 	bl	8003680 <HAL_GPIO_WritePin>
			molly_dev1_state = FIND_DEBUG;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <Dev1_Molly_App+0x3d0>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
			break;
 80014ca:	e006      	b.n	80014da <Dev1_Molly_App+0x3ba>
			break;
 80014cc:	bf00      	nop
 80014ce:	e004      	b.n	80014da <Dev1_Molly_App+0x3ba>
			break;
 80014d0:	bf00      	nop
 80014d2:	e002      	b.n	80014da <Dev1_Molly_App+0x3ba>
			break;
 80014d4:	bf00      	nop
 80014d6:	e000      	b.n	80014da <Dev1_Molly_App+0x3ba>
			break;
 80014d8:	bf00      	nop
	}
}
 80014da:	bf00      	nop
 80014dc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	08006ac8 	.word	0x08006ac8
 80014e8:	200064b8 	.word	0x200064b8
 80014ec:	40020800 	.word	0x40020800
 80014f0:	20000120 	.word	0x20000120

080014f4 <Dev2_Molly_App>:

void Dev2_Molly_App(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80014fa:	af00      	add	r7, sp, #0
	switch(molly_dev2_state)
 80014fc:	4bbf      	ldr	r3, [pc, #764]	; (80017fc <Dev2_Molly_App+0x308>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	2b07      	cmp	r3, #7
 8001504:	f200 8161 	bhi.w	80017ca <Dev2_Molly_App+0x2d6>
 8001508:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <Dev2_Molly_App+0x1c>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001531 	.word	0x08001531
 8001514:	08001563 	.word	0x08001563
 8001518:	080015d7 	.word	0x080015d7
 800151c:	08001619 	.word	0x08001619
 8001520:	08001645 	.word	0x08001645
 8001524:	080016a3 	.word	0x080016a3
 8001528:	0800175b 	.word	0x0800175b
 800152c:	08001787 	.word	0x08001787
	{
		case FIND_DEBUG:
			if(Dev2_Find_Word("DEBUG"))
 8001530:	48b3      	ldr	r0, [pc, #716]	; (8001800 <Dev2_Molly_App+0x30c>)
 8001532:	f7ff fbc2 	bl	8000cba <Dev2_Find_Word>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 815a 	beq.w	80017f2 <Dev2_Molly_App+0x2fe>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L|Found debug\n", 14, 1000);
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	220e      	movs	r2, #14
 8001544:	49af      	ldr	r1, [pc, #700]	; (8001804 <Dev2_Molly_App+0x310>)
 8001546:	48b0      	ldr	r0, [pc, #704]	; (8001808 <Dev2_Molly_App+0x314>)
 8001548:	f002 fee9 	bl	800431e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*)"DEBUG", 5, 1000);
 800154c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001550:	2205      	movs	r2, #5
 8001552:	49ab      	ldr	r1, [pc, #684]	; (8001800 <Dev2_Molly_App+0x30c>)
 8001554:	48ad      	ldr	r0, [pc, #692]	; (800180c <Dev2_Molly_App+0x318>)
 8001556:	f002 fee2 	bl	800431e <HAL_UART_Transmit>
				molly_dev2_state = GET_SETTINGS;
 800155a:	4ba8      	ldr	r3, [pc, #672]	; (80017fc <Dev2_Molly_App+0x308>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001560:	e147      	b.n	80017f2 <Dev2_Molly_App+0x2fe>

		case GET_SETTINGS:
			memset(pi_uart_rxBuffer, 0, pi_buffer_size);
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	2100      	movs	r1, #0
 8001568:	48a9      	ldr	r0, [pc, #676]	; (8001810 <Dev2_Molly_App+0x31c>)
 800156a:	f003 ff2d 	bl	80053c8 <memset>
			pi_array_end = 0;
 800156e:	4ba9      	ldr	r3, [pc, #676]	; (8001814 <Dev2_Molly_App+0x320>)
 8001570:	2200      	movs	r2, #0
 8001572:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"send payload \r\n", 15, 1000);
 8001574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001578:	220f      	movs	r2, #15
 800157a:	49a7      	ldr	r1, [pc, #668]	; (8001818 <Dev2_Molly_App+0x324>)
 800157c:	48a2      	ldr	r0, [pc, #648]	; (8001808 <Dev2_Molly_App+0x314>)
 800157e:	f002 fece 	bl	800431e <HAL_UART_Transmit>
			HAL_Delay(100);
 8001582:	2064      	movs	r0, #100	; 0x64
 8001584:	f001 fd20 	bl	8002fc8 <HAL_Delay>

			HAL_UART_Transmit(&huart1, (uint8_t*)"L| PL:", 6, 1000);
 8001588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158c:	2206      	movs	r2, #6
 800158e:	49a3      	ldr	r1, [pc, #652]	; (800181c <Dev2_Molly_App+0x328>)
 8001590:	489d      	ldr	r0, [pc, #628]	; (8001808 <Dev2_Molly_App+0x314>)
 8001592:	f002 fec4 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)(char*)pi_uart_rxBuffer, strlen((char*)pi_uart_rxBuffer), 1000);
 8001596:	489e      	ldr	r0, [pc, #632]	; (8001810 <Dev2_Molly_App+0x31c>)
 8001598:	f7fe fe44 	bl	8000224 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a4:	499a      	ldr	r1, [pc, #616]	; (8001810 <Dev2_Molly_App+0x31c>)
 80015a6:	4898      	ldr	r0, [pc, #608]	; (8001808 <Dev2_Molly_App+0x314>)
 80015a8:	f002 feb9 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 80015ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b0:	2201      	movs	r2, #1
 80015b2:	499b      	ldr	r1, [pc, #620]	; (8001820 <Dev2_Molly_App+0x32c>)
 80015b4:	4894      	ldr	r0, [pc, #592]	; (8001808 <Dev2_Molly_App+0x314>)
 80015b6:	f002 feb2 	bl	800431e <HAL_UART_Transmit>

			payload = pi_uart_rxBuffer;
 80015ba:	4b9a      	ldr	r3, [pc, #616]	; (8001824 <Dev2_Molly_App+0x330>)
 80015bc:	4a94      	ldr	r2, [pc, #592]	; (8001810 <Dev2_Molly_App+0x31c>)
 80015be:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart3, (uint8_t*)"$", 1, 500);
 80015c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015c4:	2201      	movs	r2, #1
 80015c6:	4998      	ldr	r1, [pc, #608]	; (8001828 <Dev2_Molly_App+0x334>)
 80015c8:	4890      	ldr	r0, [pc, #576]	; (800180c <Dev2_Molly_App+0x318>)
 80015ca:	f002 fea8 	bl	800431e <HAL_UART_Transmit>
			molly_dev2_state = GET_MSG_P1;
 80015ce:	4b8b      	ldr	r3, [pc, #556]	; (80017fc <Dev2_Molly_App+0x308>)
 80015d0:	2203      	movs	r2, #3
 80015d2:	701a      	strb	r2, [r3, #0]
			break;
 80015d4:	e15b      	b.n	800188e <Dev2_Molly_App+0x39a>

		case GET_MSG_P1:
			if(Dev2_Find_Word("NACK"))
 80015d6:	4895      	ldr	r0, [pc, #596]	; (800182c <Dev2_Molly_App+0x338>)
 80015d8:	f7ff fb6f 	bl	8000cba <Dev2_Find_Word>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8109 	beq.w	80017f6 <Dev2_Molly_App+0x302>
			{
				memset(getinfo_buffer, 0, getinfo_buffer_size);
 80015e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015e8:	2100      	movs	r1, #0
 80015ea:	4891      	ldr	r0, [pc, #580]	; (8001830 <Dev2_Molly_App+0x33c>)
 80015ec:	f003 feec 	bl	80053c8 <memset>
				getinfo_buffer_head = 1;
 80015f0:	4b90      	ldr	r3, [pc, #576]	; (8001834 <Dev2_Molly_App+0x340>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	801a      	strh	r2, [r3, #0]
				getinfo_fields_found_count = 0;
 80015f6:	4b90      	ldr	r3, [pc, #576]	; (8001838 <Dev2_Molly_App+0x344>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
				getinfo_find_fields = 0;
 80015fc:	4b8f      	ldr	r3, [pc, #572]	; (800183c <Dev2_Molly_App+0x348>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)"#", 1, 500);
 8001602:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001606:	2201      	movs	r2, #1
 8001608:	498d      	ldr	r1, [pc, #564]	; (8001840 <Dev2_Molly_App+0x34c>)
 800160a:	4880      	ldr	r0, [pc, #512]	; (800180c <Dev2_Molly_App+0x318>)
 800160c:	f002 fe87 	bl	800431e <HAL_UART_Transmit>
				molly_dev2_state = GET_MSG_P2;
 8001610:	4b7a      	ldr	r3, [pc, #488]	; (80017fc <Dev2_Molly_App+0x308>)
 8001612:	2204      	movs	r2, #4
 8001614:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001616:	e0ee      	b.n	80017f6 <Dev2_Molly_App+0x302>

		case GET_MSG_P2:
			brd_msg = Dev2_GetInfo();
 8001618:	f7ff fbfa 	bl	8000e10 <Dev2_GetInfo>
 800161c:	4603      	mov	r3, r0
 800161e:	4a89      	ldr	r2, [pc, #548]	; (8001844 <Dev2_Molly_App+0x350>)
 8001620:	6013      	str	r3, [r2, #0]
			if(brd_msg[0] == '1')
 8001622:	4b88      	ldr	r3, [pc, #544]	; (8001844 <Dev2_Molly_App+0x350>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b31      	cmp	r3, #49	; 0x31
 800162a:	f040 812d 	bne.w	8001888 <Dev2_Molly_App+0x394>
			{
				PrettySend_Skyla_Info_toPi(brd_msg, 2, 1);
 800162e:	4b85      	ldr	r3, [pc, #532]	; (8001844 <Dev2_Molly_App+0x350>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2201      	movs	r2, #1
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc3a 	bl	8000eb0 <PrettySend_Skyla_Info_toPi>
				molly_dev2_state = MOLLY_P1;
 800163c:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <Dev2_Molly_App+0x308>)
 800163e:	2205      	movs	r2, #5
 8001640:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001642:	e121      	b.n	8001888 <Dev2_Molly_App+0x394>

		case MOLLY_P1:
			{
				if(Dev2_Find_Word("N"))
 8001644:	4880      	ldr	r0, [pc, #512]	; (8001848 <Dev2_Molly_App+0x354>)
 8001646:	f7ff fb38 	bl	8000cba <Dev2_Find_Word>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <Dev2_Molly_App+0x162>
				{
					dev1_new_data = 0;
 8001650:	4b7e      	ldr	r3, [pc, #504]	; (800184c <Dev2_Molly_App+0x358>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
				}

				char strC[500];
				char * settings_char = "$$";
 8001656:	4b7e      	ldr	r3, [pc, #504]	; (8001850 <Dev2_Molly_App+0x35c>)
 8001658:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
				strncpy(strC, settings_char, 1);
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2201      	movs	r2, #1
 8001660:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8001664:	4618      	mov	r0, r3
 8001666:	f003 ff54 	bl	8005512 <strncpy>
				strC[1] = '\0';
 800166a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001672:	2200      	movs	r2, #0
 8001674:	705a      	strb	r2, [r3, #1]
				strcat(strC, (char*)payload);
 8001676:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <Dev2_Molly_App+0x330>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f003 ff38 	bl	80054f4 <strcat>
				HAL_UART_Transmit(&huart3, (uint8_t*) strC, strlen(strC), 50);
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fdcc 	bl	8000224 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	1d39      	adds	r1, r7, #4
 8001692:	2332      	movs	r3, #50	; 0x32
 8001694:	485d      	ldr	r0, [pc, #372]	; (800180c <Dev2_Molly_App+0x318>)
 8001696:	f002 fe42 	bl	800431e <HAL_UART_Transmit>
				molly_dev2_state = MOLLY_P2;
 800169a:	4b58      	ldr	r3, [pc, #352]	; (80017fc <Dev2_Molly_App+0x308>)
 800169c:	2206      	movs	r2, #6
 800169e:	701a      	strb	r2, [r3, #0]
				break;
 80016a0:	e0f5      	b.n	800188e <Dev2_Molly_App+0x39a>
			}


		case MOLLY_P2:
			HAL_UART_Transmit(&huart1, (uint8_t*)"L| in molly \n", 13, 500);
 80016a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016a6:	220d      	movs	r2, #13
 80016a8:	496a      	ldr	r1, [pc, #424]	; (8001854 <Dev2_Molly_App+0x360>)
 80016aa:	4857      	ldr	r0, [pc, #348]	; (8001808 <Dev2_Molly_App+0x314>)
 80016ac:	f002 fe37 	bl	800431e <HAL_UART_Transmit>
			while(1)
			{
				if(Dev2_Find_Word(":"))
 80016b0:	4869      	ldr	r0, [pc, #420]	; (8001858 <Dev2_Molly_App+0x364>)
 80016b2:	f7ff fb02 	bl	8000cba <Dev2_Find_Word>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f9      	beq.n	80016b0 <Dev2_Molly_App+0x1bc>
				{
					char * curr_string = (char*)&dev2_uart_rxBuffer[dev2_array_start+1];
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <Dev2_Molly_App+0x368>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a67      	ldr	r2, [pc, #412]	; (8001860 <Dev2_Molly_App+0x36c>)
 80016c4:	4413      	add	r3, r2
 80016c6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
					char * find_pass = strstr(curr_string, "PASS");
 80016ca:	4966      	ldr	r1, [pc, #408]	; (8001864 <Dev2_Molly_App+0x370>)
 80016cc:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80016d0:	f003 ff32 	bl	8005538 <strstr>
 80016d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					char * find_fail = strstr(curr_string, "FAIL");
 80016d8:	4963      	ldr	r1, [pc, #396]	; (8001868 <Dev2_Molly_App+0x374>)
 80016da:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80016de:	f003 ff2b 	bl	8005538 <strstr>
 80016e2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
					if(find_pass != NULL)
 80016e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d020      	beq.n	8001730 <Dev2_Molly_App+0x23c>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD PASS \n", 15, 500);
 80016ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016f2:	220f      	movs	r2, #15
 80016f4:	495d      	ldr	r1, [pc, #372]	; (800186c <Dev2_Molly_App+0x378>)
 80016f6:	4844      	ldr	r0, [pc, #272]	; (8001808 <Dev2_Molly_App+0x314>)
 80016f8:	f002 fe11 	bl	800431e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t*)"#", 1, 500);
 80016fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001700:	2201      	movs	r2, #1
 8001702:	494f      	ldr	r1, [pc, #316]	; (8001840 <Dev2_Molly_App+0x34c>)
 8001704:	4841      	ldr	r0, [pc, #260]	; (800180c <Dev2_Molly_App+0x318>)
 8001706:	f002 fe0a 	bl	800431e <HAL_UART_Transmit>
						memset(getinfo_buffer, 0, getinfo_buffer_size);
 800170a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800170e:	2100      	movs	r1, #0
 8001710:	4847      	ldr	r0, [pc, #284]	; (8001830 <Dev2_Molly_App+0x33c>)
 8001712:	f003 fe59 	bl	80053c8 <memset>
						getinfo_buffer_head = 1;
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <Dev2_Molly_App+0x340>)
 8001718:	2201      	movs	r2, #1
 800171a:	801a      	strh	r2, [r3, #0]
						getinfo_fields_found_count = 0;
 800171c:	4b46      	ldr	r3, [pc, #280]	; (8001838 <Dev2_Molly_App+0x344>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
						getinfo_find_fields = 0;
 8001722:	4b46      	ldr	r3, [pc, #280]	; (800183c <Dev2_Molly_App+0x348>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
						molly_dev2_state = GET_MSG_P3;
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <Dev2_Molly_App+0x308>)
 800172a:	2207      	movs	r2, #7
 800172c:	701a      	strb	r2, [r3, #0]
						break;
 800172e:	e013      	b.n	8001758 <Dev2_Molly_App+0x264>
					}
					else if(find_fail != NULL)
 8001730:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00a      	beq.n	800174e <Dev2_Molly_App+0x25a>
					{
						HAL_UART_Transmit(&huart1, (uint8_t*)"L| BOARD FAIL!!! \n", 18, 500);
 8001738:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800173c:	2212      	movs	r2, #18
 800173e:	494c      	ldr	r1, [pc, #304]	; (8001870 <Dev2_Molly_App+0x37c>)
 8001740:	4831      	ldr	r0, [pc, #196]	; (8001808 <Dev2_Molly_App+0x314>)
 8001742:	f002 fdec 	bl	800431e <HAL_UART_Transmit>
						molly_dev2_state = FINISH_MOLLY;
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <Dev2_Molly_App+0x308>)
 8001748:	2208      	movs	r2, #8
 800174a:	701a      	strb	r2, [r3, #0]
						break;
 800174c:	e004      	b.n	8001758 <Dev2_Molly_App+0x264>
					}
					dev2_array_start = dev2_array_end;
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <Dev2_Molly_App+0x380>)
 8001750:	881a      	ldrh	r2, [r3, #0]
 8001752:	4b42      	ldr	r3, [pc, #264]	; (800185c <Dev2_Molly_App+0x368>)
 8001754:	801a      	strh	r2, [r3, #0]
				if(Dev2_Find_Word(":"))
 8001756:	e7ab      	b.n	80016b0 <Dev2_Molly_App+0x1bc>
				}
			}
			break;
 8001758:	e099      	b.n	800188e <Dev2_Molly_App+0x39a>

		case GET_MSG_P3:
			{
				brd_msg = Dev2_GetInfo();
 800175a:	f7ff fb59 	bl	8000e10 <Dev2_GetInfo>
 800175e:	4603      	mov	r3, r0
 8001760:	4a38      	ldr	r2, [pc, #224]	; (8001844 <Dev2_Molly_App+0x350>)
 8001762:	6013      	str	r3, [r2, #0]
				if(brd_msg[0] == '1')
 8001764:	4b37      	ldr	r3, [pc, #220]	; (8001844 <Dev2_Molly_App+0x350>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b31      	cmp	r3, #49	; 0x31
 800176c:	f040 808e 	bne.w	800188c <Dev2_Molly_App+0x398>
				{
					PrettySend_Skyla_Info_toPi(brd_msg, 2, 0);
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <Dev2_Molly_App+0x350>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	2102      	movs	r1, #2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fb99 	bl	8000eb0 <PrettySend_Skyla_Info_toPi>
					molly_dev2_state = FINISH_MOLLY;
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <Dev2_Molly_App+0x308>)
 8001780:	2208      	movs	r2, #8
 8001782:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001784:	e082      	b.n	800188c <Dev2_Molly_App+0x398>
			}


		case FINISH_MOLLY:
			{
				DEV2_4_UART_RX_EN(GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178c:	483a      	ldr	r0, [pc, #232]	; (8001878 <Dev2_Molly_App+0x384>)
 800178e:	f001 ff77 	bl	8003680 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, (uint8_t*)"molly complete \r\n", 17, 1000);
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	2211      	movs	r2, #17
 8001798:	4938      	ldr	r1, [pc, #224]	; (800187c <Dev2_Molly_App+0x388>)
 800179a:	481b      	ldr	r0, [pc, #108]	; (8001808 <Dev2_Molly_App+0x314>)
 800179c:	f002 fdbf 	bl	800431e <HAL_UART_Transmit>
				Power_Cycle_Dev(NODE2);
 80017a0:	2032      	movs	r0, #50	; 0x32
 80017a2:	f7ff fc0b 	bl	8000fbc <Power_Cycle_Dev>
				while(!(Dev_Restarted('2', 10)))
 80017a6:	bf00      	nop
 80017a8:	210a      	movs	r1, #10
 80017aa:	2032      	movs	r0, #50	; 0x32
 80017ac:	f7ff fc5c 	bl	8001068 <Dev_Restarted>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f083 0301 	eor.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f5      	bne.n	80017a8 <Dev2_Molly_App+0x2b4>
				{
				}

				molly_dev2_state = DEFAULT;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <Dev2_Molly_App+0x308>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
				application_state = MONITOR;
 80017c2:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <Dev2_Molly_App+0x38c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
				break;
 80017c8:	e061      	b.n	800188e <Dev2_Molly_App+0x39a>
			}
		default:
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"L| Received molly command. \r\n", 29, 1000);
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	221d      	movs	r2, #29
 80017d0:	492c      	ldr	r1, [pc, #176]	; (8001884 <Dev2_Molly_App+0x390>)
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <Dev2_Molly_App+0x314>)
 80017d4:	f002 fda3 	bl	800431e <HAL_UART_Transmit>
				Power_Cycle_Dev('2');
 80017d8:	2032      	movs	r0, #50	; 0x32
 80017da:	f7ff fbef 	bl	8000fbc <Power_Cycle_Dev>
				DEV2_4_UART_RX_EN(GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e4:	4824      	ldr	r0, [pc, #144]	; (8001878 <Dev2_Molly_App+0x384>)
 80017e6:	f001 ff4b 	bl	8003680 <HAL_GPIO_WritePin>
				molly_dev2_state = FIND_DEBUG;
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <Dev2_Molly_App+0x308>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
				break;
 80017f0:	e04d      	b.n	800188e <Dev2_Molly_App+0x39a>
			break;
 80017f2:	bf00      	nop
 80017f4:	e04b      	b.n	800188e <Dev2_Molly_App+0x39a>
			break;
 80017f6:	bf00      	nop
 80017f8:	e049      	b.n	800188e <Dev2_Molly_App+0x39a>
 80017fa:	bf00      	nop
 80017fc:	20000121 	.word	0x20000121
 8001800:	08006a04 	.word	0x08006a04
 8001804:	08006a0c 	.word	0x08006a0c
 8001808:	200064b8 	.word	0x200064b8
 800180c:	20006540 	.word	0x20006540
 8001810:	20000128 	.word	0x20000128
 8001814:	200014b0 	.word	0x200014b0
 8001818:	08006a2c 	.word	0x08006a2c
 800181c:	08006a3c 	.word	0x08006a3c
 8001820:	08006934 	.word	0x08006934
 8001824:	20002978 	.word	0x20002978
 8001828:	08006a44 	.word	0x08006a44
 800182c:	08006a58 	.word	0x08006a58
 8001830:	200014b4 	.word	0x200014b4
 8001834:	200015e2 	.word	0x200015e2
 8001838:	200015e0 	.word	0x200015e0
 800183c:	200015e1 	.word	0x200015e1
 8001840:	08006a60 	.word	0x08006a60
 8001844:	200015e4 	.word	0x200015e4
 8001848:	08006a64 	.word	0x08006a64
 800184c:	20002977 	.word	0x20002977
 8001850:	08006a68 	.word	0x08006a68
 8001854:	08006a6c 	.word	0x08006a6c
 8001858:	08006a7c 	.word	0x08006a7c
 800185c:	20005094 	.word	0x20005094
 8001860:	20003d0c 	.word	0x20003d0c
 8001864:	08006a80 	.word	0x08006a80
 8001868:	08006a88 	.word	0x08006a88
 800186c:	08006a90 	.word	0x08006a90
 8001870:	08006aa0 	.word	0x08006aa0
 8001874:	20005096 	.word	0x20005096
 8001878:	40020400 	.word	0x40020400
 800187c:	08006ab4 	.word	0x08006ab4
 8001880:	20000126 	.word	0x20000126
 8001884:	08006ac8 	.word	0x08006ac8
			break;
 8001888:	bf00      	nop
 800188a:	e000      	b.n	800188e <Dev2_Molly_App+0x39a>
				break;
 800188c:	bf00      	nop
			}

	}
}
 800188e:	bf00      	nop
 8001890:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <Get_Pi_UART_Data_Last>:


char Get_Pi_UART_Data_Last(uint16_t num_data)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
	char pi_selected_data = ' ';
 80018a2:	2320      	movs	r3, #32
 80018a4:	737b      	strb	r3, [r7, #13]
	num_data -= 0;

	uint16_t arr_data_index = pi_array_end;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <Get_Pi_UART_Data_Last+0x50>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	81fb      	strh	r3, [r7, #14]
	if(pi_array_end < num_data)
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <Get_Pi_UART_Data_Last+0x50>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d909      	bls.n	80018ca <Get_Pi_UART_Data_Last+0x32>
	{
		arr_data_index = pi_buffer_size - (num_data - pi_array_end);
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <Get_Pi_UART_Data_Last+0x50>)
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80018c4:	3308      	adds	r3, #8
 80018c6:	81fb      	strh	r3, [r7, #14]
 80018c8:	e003      	b.n	80018d2 <Get_Pi_UART_Data_Last+0x3a>
	} else {
		arr_data_index -= num_data;
 80018ca:	89fa      	ldrh	r2, [r7, #14]
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	81fb      	strh	r3, [r7, #14]
	}

	pi_selected_data = pi_uart_rxBuffer[arr_data_index];
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	4a05      	ldr	r2, [pc, #20]	; (80018ec <Get_Pi_UART_Data_Last+0x54>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	737b      	strb	r3, [r7, #13]
	return pi_selected_data;
 80018da:	7b7b      	ldrb	r3, [r7, #13]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	200014b0 	.word	0x200014b0
 80018ec:	20000128 	.word	0x20000128

080018f0 <Reset_Programmer_Relay>:

void Reset_Programmer_Relay(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	DEV1_3_VCC_EN(GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fa:	4810      	ldr	r0, [pc, #64]	; (800193c <Reset_Programmer_Relay+0x4c>)
 80018fc:	f001 fec0 	bl	8003680 <HAL_GPIO_WritePin>
	DEV2_4_VCC_EN(GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001906:	480e      	ldr	r0, [pc, #56]	; (8001940 <Reset_Programmer_Relay+0x50>)
 8001908:	f001 feba 	bl	8003680 <HAL_GPIO_WritePin>

	DEV1_UPDI_EN(GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001912:	480a      	ldr	r0, [pc, #40]	; (800193c <Reset_Programmer_Relay+0x4c>)
 8001914:	f001 feb4 	bl	8003680 <HAL_GPIO_WritePin>
	DEV2_UPDI_EN(GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	2140      	movs	r1, #64	; 0x40
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <Reset_Programmer_Relay+0x50>)
 800191e:	f001 feaf 	bl	8003680 <HAL_GPIO_WritePin>
	DEV3_UPDI_EN(GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <Reset_Programmer_Relay+0x4c>)
 800192a:	f001 fea9 	bl	8003680 <HAL_GPIO_WritePin>
	DEV4_UPDI_EN(GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	4803      	ldr	r0, [pc, #12]	; (8001940 <Reset_Programmer_Relay+0x50>)
 8001934:	f001 fea4 	bl	8003680 <HAL_GPIO_WritePin>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40020800 	.word	0x40020800
 8001940:	40020400 	.word	0x40020400

08001944 <Dev1_Program_App>:

//Dev1 Program
void Dev1_Program_App(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	switch(program_dev1_state)
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <Dev1_Program_App+0x78>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b09      	cmp	r3, #9
 800194e:	d112      	bne.n	8001976 <Dev1_Program_App+0x32>
	{
		case FINISH_PROGRAM:
			//reset relays 
			DEV1_3_VCC_EN(GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001956:	481a      	ldr	r0, [pc, #104]	; (80019c0 <Dev1_Program_App+0x7c>)
 8001958:	f001 fe92 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_UPDI_EN(GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001962:	4817      	ldr	r0, [pc, #92]	; (80019c0 <Dev1_Program_App+0x7c>)
 8001964:	f001 fe8c 	bl	8003680 <HAL_GPIO_WritePin>

			program_dev1_state = DEFAULT;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <Dev1_Program_App+0x78>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <Dev1_Program_App+0x80>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
			break;
 8001974:	e020      	b.n	80019b8 <Dev1_Program_App+0x74>
		default:
			Reset_Programmer_Relay();
 8001976:	f7ff ffbb 	bl	80018f0 <Reset_Programmer_Relay>
			DEV1_3_VCC_EN(GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001980:	480f      	ldr	r0, [pc, #60]	; (80019c0 <Dev1_Program_App+0x7c>)
 8001982:	f001 fe7d 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_UPDI_EN(GPIO_PIN_SET);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198c:	480c      	ldr	r0, [pc, #48]	; (80019c0 <Dev1_Program_App+0x7c>)
 800198e:	f001 fe77 	bl	8003680 <HAL_GPIO_WritePin>


			HAL_UART_Transmit(&huart1, (uint8_t*)"Ready to program Sklya1\r\n", 25, 1000);
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	2219      	movs	r2, #25
 8001998:	490b      	ldr	r1, [pc, #44]	; (80019c8 <Dev1_Program_App+0x84>)
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <Dev1_Program_App+0x88>)
 800199c:	f002 fcbf 	bl	800431e <HAL_UART_Transmit>
			HAL_Delay(100);
 80019a0:	2064      	movs	r0, #100	; 0x64
 80019a2:	f001 fb11 	bl	8002fc8 <HAL_Delay>
			
			while(pi_uart_rxData != PROCESS_FIN)
 80019a6:	bf00      	nop
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <Dev1_Program_App+0x8c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b60      	cmp	r3, #96	; 0x60
 80019ae:	d1fb      	bne.n	80019a8 <Dev1_Program_App+0x64>
			{
			}
			
			program_dev1_state = FINISH_PROGRAM;
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <Dev1_Program_App+0x78>)
 80019b2:	2209      	movs	r2, #9
 80019b4:	701a      	strb	r2, [r3, #0]
			break;
 80019b6:	bf00      	nop
	}
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000122 	.word	0x20000122
 80019c0:	40020800 	.word	0x40020800
 80019c4:	20000126 	.word	0x20000126
 80019c8:	08006ae8 	.word	0x08006ae8
 80019cc:	200064b8 	.word	0x200064b8
 80019d0:	200014b2 	.word	0x200014b2

080019d4 <Dev2_Program_App>:

void Dev2_Program_App(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	switch(program_dev2_state)
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <Dev2_Program_App+0x74>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b09      	cmp	r3, #9
 80019de:	d111      	bne.n	8001a04 <Dev2_Program_App+0x30>
	{
		case FINISH_PROGRAM:
			//reset relays 
			DEV2_4_VCC_EN(GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	4819      	ldr	r0, [pc, #100]	; (8001a4c <Dev2_Program_App+0x78>)
 80019e8:	f001 fe4a 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_UPDI_EN(GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2140      	movs	r1, #64	; 0x40
 80019f0:	4816      	ldr	r0, [pc, #88]	; (8001a4c <Dev2_Program_App+0x78>)
 80019f2:	f001 fe45 	bl	8003680 <HAL_GPIO_WritePin>

			program_dev2_state = DEFAULT;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <Dev2_Program_App+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <Dev2_Program_App+0x7c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
			break;
 8001a02:	e01f      	b.n	8001a44 <Dev2_Program_App+0x70>
		default:
			Reset_Programmer_Relay();
 8001a04:	f7ff ff74 	bl	80018f0 <Reset_Programmer_Relay>
			DEV2_4_VCC_EN(GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0e:	480f      	ldr	r0, [pc, #60]	; (8001a4c <Dev2_Program_App+0x78>)
 8001a10:	f001 fe36 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_UPDI_EN(GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2140      	movs	r1, #64	; 0x40
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <Dev2_Program_App+0x78>)
 8001a1a:	f001 fe31 	bl	8003680 <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart1, (uint8_t*)"Ready to program Sklya2\r\n", 25, 1000);
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	2219      	movs	r2, #25
 8001a24:	490b      	ldr	r1, [pc, #44]	; (8001a54 <Dev2_Program_App+0x80>)
 8001a26:	480c      	ldr	r0, [pc, #48]	; (8001a58 <Dev2_Program_App+0x84>)
 8001a28:	f002 fc79 	bl	800431e <HAL_UART_Transmit>
			HAL_Delay(100);
 8001a2c:	2064      	movs	r0, #100	; 0x64
 8001a2e:	f001 facb 	bl	8002fc8 <HAL_Delay>
			
			while(pi_uart_rxData != PROCESS_FIN)
 8001a32:	bf00      	nop
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <Dev2_Program_App+0x88>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b60      	cmp	r3, #96	; 0x60
 8001a3a:	d1fb      	bne.n	8001a34 <Dev2_Program_App+0x60>
			{
			}
			
			program_dev2_state = FINISH_PROGRAM;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <Dev2_Program_App+0x74>)
 8001a3e:	2209      	movs	r2, #9
 8001a40:	701a      	strb	r2, [r3, #0]
			break;
 8001a42:	bf00      	nop
	}
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000123 	.word	0x20000123
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	20000126 	.word	0x20000126
 8001a54:	08006b04 	.word	0x08006b04
 8001a58:	200064b8 	.word	0x200064b8
 8001a5c:	200014b2 	.word	0x200014b2

08001a60 <Dev3_Program_App>:

void Dev3_Program_App(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	switch(program_dev3_state)
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <Dev3_Program_App+0x78>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d112      	bne.n	8001a92 <Dev3_Program_App+0x32>
	{
		case FINISH_PROGRAM:
			//reset relays 
			DEV1_3_VCC_EN(GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a72:	481a      	ldr	r0, [pc, #104]	; (8001adc <Dev3_Program_App+0x7c>)
 8001a74:	f001 fe04 	bl	8003680 <HAL_GPIO_WritePin>
			DEV3_UPDI_EN(GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a7e:	4817      	ldr	r0, [pc, #92]	; (8001adc <Dev3_Program_App+0x7c>)
 8001a80:	f001 fdfe 	bl	8003680 <HAL_GPIO_WritePin>

			program_dev3_state = DEFAULT;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <Dev3_Program_App+0x78>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <Dev3_Program_App+0x80>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
			break;
 8001a90:	e020      	b.n	8001ad4 <Dev3_Program_App+0x74>
		default:
			Reset_Programmer_Relay();
 8001a92:	f7ff ff2d 	bl	80018f0 <Reset_Programmer_Relay>
			DEV1_3_VCC_EN(GPIO_PIN_SET);
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9c:	480f      	ldr	r0, [pc, #60]	; (8001adc <Dev3_Program_App+0x7c>)
 8001a9e:	f001 fdef 	bl	8003680 <HAL_GPIO_WritePin>
			DEV3_UPDI_EN(GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <Dev3_Program_App+0x7c>)
 8001aaa:	f001 fde9 	bl	8003680 <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart1, (uint8_t*)"Ready to program Creed1\r\n", 25, 1000);
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	2219      	movs	r2, #25
 8001ab4:	490b      	ldr	r1, [pc, #44]	; (8001ae4 <Dev3_Program_App+0x84>)
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <Dev3_Program_App+0x88>)
 8001ab8:	f002 fc31 	bl	800431e <HAL_UART_Transmit>
			HAL_Delay(100);
 8001abc:	2064      	movs	r0, #100	; 0x64
 8001abe:	f001 fa83 	bl	8002fc8 <HAL_Delay>
			
			while(pi_uart_rxData != PROCESS_FIN)
 8001ac2:	bf00      	nop
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <Dev3_Program_App+0x8c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b60      	cmp	r3, #96	; 0x60
 8001aca:	d1fb      	bne.n	8001ac4 <Dev3_Program_App+0x64>
			{
			}
			
			program_dev3_state = FINISH_PROGRAM;
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <Dev3_Program_App+0x78>)
 8001ace:	2209      	movs	r2, #9
 8001ad0:	701a      	strb	r2, [r3, #0]
			break;
 8001ad2:	bf00      	nop
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000124 	.word	0x20000124
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	20000126 	.word	0x20000126
 8001ae4:	08006b20 	.word	0x08006b20
 8001ae8:	200064b8 	.word	0x200064b8
 8001aec:	200014b2 	.word	0x200014b2

08001af0 <Dev4_Program_App>:

void Dev4_Program_App(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	switch(program_dev4_state)
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <Dev4_Program_App+0x74>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d111      	bne.n	8001b20 <Dev4_Program_App+0x30>
	{
		case FINISH_PROGRAM:
			//reset relays 
			DEV2_4_VCC_EN(GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b02:	4819      	ldr	r0, [pc, #100]	; (8001b68 <Dev4_Program_App+0x78>)
 8001b04:	f001 fdbc 	bl	8003680 <HAL_GPIO_WritePin>
			DEV4_UPDI_EN(GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	4816      	ldr	r0, [pc, #88]	; (8001b68 <Dev4_Program_App+0x78>)
 8001b0e:	f001 fdb7 	bl	8003680 <HAL_GPIO_WritePin>

			program_dev4_state = DEFAULT;
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <Dev4_Program_App+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
			application_state = MONITOR;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <Dev4_Program_App+0x7c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
			break;
 8001b1e:	e01f      	b.n	8001b60 <Dev4_Program_App+0x70>
		default:
			Reset_Programmer_Relay();
 8001b20:	f7ff fee6 	bl	80018f0 <Reset_Programmer_Relay>
			DEV2_4_VCC_EN(GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2a:	480f      	ldr	r0, [pc, #60]	; (8001b68 <Dev4_Program_App+0x78>)
 8001b2c:	f001 fda8 	bl	8003680 <HAL_GPIO_WritePin>
			DEV4_UPDI_EN(GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <Dev4_Program_App+0x78>)
 8001b36:	f001 fda3 	bl	8003680 <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart1, (uint8_t*)"Ready to program Creed2\r\n", 25, 1000);
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	2219      	movs	r2, #25
 8001b40:	490b      	ldr	r1, [pc, #44]	; (8001b70 <Dev4_Program_App+0x80>)
 8001b42:	480c      	ldr	r0, [pc, #48]	; (8001b74 <Dev4_Program_App+0x84>)
 8001b44:	f002 fbeb 	bl	800431e <HAL_UART_Transmit>
			HAL_Delay(100);
 8001b48:	2064      	movs	r0, #100	; 0x64
 8001b4a:	f001 fa3d 	bl	8002fc8 <HAL_Delay>
			
			while(pi_uart_rxData != PROCESS_FIN)
 8001b4e:	bf00      	nop
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <Dev4_Program_App+0x88>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b60      	cmp	r3, #96	; 0x60
 8001b56:	d1fb      	bne.n	8001b50 <Dev4_Program_App+0x60>
			{
			}
			
			program_dev4_state = FINISH_PROGRAM;
 8001b58:	4b02      	ldr	r3, [pc, #8]	; (8001b64 <Dev4_Program_App+0x74>)
 8001b5a:	2209      	movs	r2, #9
 8001b5c:	701a      	strb	r2, [r3, #0]
			break;
 8001b5e:	bf00      	nop
	}
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000125 	.word	0x20000125
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	20000126 	.word	0x20000126
 8001b70:	08006b3c 	.word	0x08006b3c
 8001b74:	200064b8 	.word	0x200064b8
 8001b78:	200014b2 	.word	0x200014b2

08001b7c <Set_Device_Power_App>:


void Set_Device_Power_App(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001b82:	2064      	movs	r0, #100	; 0x64
 8001b84:	f001 fa20 	bl	8002fc8 <HAL_Delay>
	char dev = Get_Pi_UART_Data_Last(2);
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff fe85 	bl	8001898 <Get_Pi_UART_Data_Last>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	char state = Get_Pi_UART_Data_Last(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff fe80 	bl	8001898 <Get_Pi_UART_Data_Last>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71bb      	strb	r3, [r7, #6]

	switch(state)
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	2b32      	cmp	r3, #50	; 0x32
 8001ba0:	d00f      	beq.n	8001bc2 <Set_Device_Power_App+0x46>
 8001ba2:	2b32      	cmp	r3, #50	; 0x32
 8001ba4:	dc12      	bgt.n	8001bcc <Set_Device_Power_App+0x50>
 8001ba6:	2b30      	cmp	r3, #48	; 0x30
 8001ba8:	d006      	beq.n	8001bb8 <Set_Device_Power_App+0x3c>
 8001baa:	2b31      	cmp	r3, #49	; 0x31
 8001bac:	d10e      	bne.n	8001bcc <Set_Device_Power_App+0x50>
	{
		case ON:
			Power_Dev_ON(dev);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f8b7 	bl	8001d24 <Power_Dev_ON>
			break;
 8001bb6:	e00d      	b.n	8001bd4 <Set_Device_Power_App+0x58>
	
		case OFF:
			Power_Dev_OFF(dev);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f820 	bl	8001c00 <Power_Dev_OFF>
			break;
 8001bc0:	e008      	b.n	8001bd4 <Set_Device_Power_App+0x58>

		case CYCLE:
			Power_Cycle_Dev(dev);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f9f9 	bl	8000fbc <Power_Cycle_Dev>
			break;
 8001bca:	e003      	b.n	8001bd4 <Set_Device_Power_App+0x58>

		default:
			printf("Invalid state selected\n");
 8001bcc:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <Set_Device_Power_App+0x74>)
 8001bce:	f003 fc89 	bl	80054e4 <puts>
			break;
 8001bd2:	bf00      	nop
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)"Power Set \n", sizeof("Power Set\n"), 500);
 8001bd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bd8:	220b      	movs	r2, #11
 8001bda:	4906      	ldr	r1, [pc, #24]	; (8001bf4 <Set_Device_Power_App+0x78>)
 8001bdc:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <Set_Device_Power_App+0x7c>)
 8001bde:	f002 fb9e 	bl	800431e <HAL_UART_Transmit>
	application_state = DEFAULT;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <Set_Device_Power_App+0x80>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	08006b58 	.word	0x08006b58
 8001bf4:	08006b70 	.word	0x08006b70
 8001bf8:	200064b8 	.word	0x200064b8
 8001bfc:	20000126 	.word	0x20000126

08001c00 <Power_Dev_OFF>:

void Power_Dev_OFF(char dev)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
	switch(dev)
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b32      	cmp	r3, #50	; 0x32
 8001c0e:	d039      	beq.n	8001c84 <Power_Dev_OFF+0x84>
 8001c10:	2b32      	cmp	r3, #50	; 0x32
 8001c12:	dc63      	bgt.n	8001cdc <Power_Dev_OFF+0xdc>
 8001c14:	2b30      	cmp	r3, #48	; 0x30
 8001c16:	d002      	beq.n	8001c1e <Power_Dev_OFF+0x1e>
 8001c18:	2b31      	cmp	r3, #49	; 0x31
 8001c1a:	d007      	beq.n	8001c2c <Power_Dev_OFF+0x2c>
 8001c1c:	e05e      	b.n	8001cdc <Power_Dev_OFF+0xdc>
	{
		case BOTH:
			Power_Dev_OFF(NODE1);
 8001c1e:	2031      	movs	r0, #49	; 0x31
 8001c20:	f7ff ffee 	bl	8001c00 <Power_Dev_OFF>
			Power_Dev_OFF(NODE2);
 8001c24:	2032      	movs	r0, #50	; 0x32
 8001c26:	f7ff ffeb 	bl	8001c00 <Power_Dev_OFF>
			break;
 8001c2a:	e062      	b.n	8001cf2 <Power_Dev_OFF+0xf2>
		case NODE1:
			printf("Powering off Node1\n");
 8001c2c:	4833      	ldr	r0, [pc, #204]	; (8001cfc <Power_Dev_OFF+0xfc>)
 8001c2e:	f003 fc59 	bl	80054e4 <puts>
			HAL_UART_Transmit(&huart1, (uint8_t*)"Powering off Node1 \n", sizeof("Powering off Node1\n"),500);
 8001c32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c36:	2214      	movs	r2, #20
 8001c38:	4931      	ldr	r1, [pc, #196]	; (8001d00 <Power_Dev_OFF+0x100>)
 8001c3a:	4832      	ldr	r0, [pc, #200]	; (8001d04 <Power_Dev_OFF+0x104>)
 8001c3c:	f002 fb6f 	bl	800431e <HAL_UART_Transmit>

			DEV1_3_SEN_PWR(GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c46:	4830      	ldr	r0, [pc, #192]	; (8001d08 <Power_Dev_OFF+0x108>)
 8001c48:	f001 fd1a 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_3_UART_RX_EN(GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c52:	482e      	ldr	r0, [pc, #184]	; (8001d0c <Power_Dev_OFF+0x10c>)
 8001c54:	f001 fd14 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_3_LTCH_EN(GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	482a      	ldr	r0, [pc, #168]	; (8001d08 <Power_Dev_OFF+0x108>)
 8001c5e:	f001 fd0f 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_PWR_EN(GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	4828      	ldr	r0, [pc, #160]	; (8001d08 <Power_Dev_OFF+0x108>)
 8001c68:	f001 fd0a 	bl	8003680 <HAL_GPIO_WritePin>
			DEV3_PWR_EN(GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	4825      	ldr	r0, [pc, #148]	; (8001d08 <Power_Dev_OFF+0x108>)
 8001c72:	f001 fd05 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_CHG_EN(GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c7c:	4823      	ldr	r0, [pc, #140]	; (8001d0c <Power_Dev_OFF+0x10c>)
 8001c7e:	f001 fcff 	bl	8003680 <HAL_GPIO_WritePin>
			break;
 8001c82:	e036      	b.n	8001cf2 <Power_Dev_OFF+0xf2>
		case NODE2:
			printf("Powering off Node2\n");
 8001c84:	4822      	ldr	r0, [pc, #136]	; (8001d10 <Power_Dev_OFF+0x110>)
 8001c86:	f003 fc2d 	bl	80054e4 <puts>
			HAL_UART_Transmit(&huart1, (uint8_t*)"Powering off Node2 \n", sizeof("Powering off Node1\n"),500);
 8001c8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c8e:	2214      	movs	r2, #20
 8001c90:	4920      	ldr	r1, [pc, #128]	; (8001d14 <Power_Dev_OFF+0x114>)
 8001c92:	481c      	ldr	r0, [pc, #112]	; (8001d04 <Power_Dev_OFF+0x104>)
 8001c94:	f002 fb43 	bl	800431e <HAL_UART_Transmit>

			DEV2_4_SEN_PWR(GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	481e      	ldr	r0, [pc, #120]	; (8001d18 <Power_Dev_OFF+0x118>)
 8001c9e:	f001 fcef 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_4_UART_RX_EN(GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca8:	481b      	ldr	r0, [pc, #108]	; (8001d18 <Power_Dev_OFF+0x118>)
 8001caa:	f001 fce9 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_4_LTCH_EN(GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cb4:	4814      	ldr	r0, [pc, #80]	; (8001d08 <Power_Dev_OFF+0x108>)
 8001cb6:	f001 fce3 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_PWR_EN(GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	4816      	ldr	r0, [pc, #88]	; (8001d18 <Power_Dev_OFF+0x118>)
 8001cc0:	f001 fcde 	bl	8003680 <HAL_GPIO_WritePin>
			DEV4_PWR_EN(GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	4813      	ldr	r0, [pc, #76]	; (8001d18 <Power_Dev_OFF+0x118>)
 8001cca:	f001 fcd9 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_CHG_EN(GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd4:	4810      	ldr	r0, [pc, #64]	; (8001d18 <Power_Dev_OFF+0x118>)
 8001cd6:	f001 fcd3 	bl	8003680 <HAL_GPIO_WritePin>
			break;
 8001cda:	e00a      	b.n	8001cf2 <Power_Dev_OFF+0xf2>
		default:
			printf("Invalid node selected\n");
 8001cdc:	480f      	ldr	r0, [pc, #60]	; (8001d1c <Power_Dev_OFF+0x11c>)
 8001cde:	f003 fc01 	bl	80054e4 <puts>
			HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid node selected \n", sizeof("Invalid node selected\n"),500);
 8001ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ce6:	2217      	movs	r2, #23
 8001ce8:	490d      	ldr	r1, [pc, #52]	; (8001d20 <Power_Dev_OFF+0x120>)
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <Power_Dev_OFF+0x104>)
 8001cec:	f002 fb17 	bl	800431e <HAL_UART_Transmit>
			break;
 8001cf0:	bf00      	nop
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	08006b7c 	.word	0x08006b7c
 8001d00:	08006b90 	.word	0x08006b90
 8001d04:	200064b8 	.word	0x200064b8
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	08006ba8 	.word	0x08006ba8
 8001d14:	08006bbc 	.word	0x08006bbc
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	08006bd4 	.word	0x08006bd4
 8001d20:	08006bec 	.word	0x08006bec

08001d24 <Power_Dev_ON>:

void Power_Dev_ON(char dev)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
	switch(dev)
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b32      	cmp	r3, #50	; 0x32
 8001d32:	d03c      	beq.n	8001dae <Power_Dev_ON+0x8a>
 8001d34:	2b32      	cmp	r3, #50	; 0x32
 8001d36:	dc69      	bgt.n	8001e0c <Power_Dev_ON+0xe8>
 8001d38:	2b30      	cmp	r3, #48	; 0x30
 8001d3a:	d002      	beq.n	8001d42 <Power_Dev_ON+0x1e>
 8001d3c:	2b31      	cmp	r3, #49	; 0x31
 8001d3e:	d007      	beq.n	8001d50 <Power_Dev_ON+0x2c>
 8001d40:	e064      	b.n	8001e0c <Power_Dev_ON+0xe8>
	{
		case BOTH:
			Power_Dev_OFF(NODE1);
 8001d42:	2031      	movs	r0, #49	; 0x31
 8001d44:	f7ff ff5c 	bl	8001c00 <Power_Dev_OFF>
			Power_Dev_OFF(NODE2);
 8001d48:	2032      	movs	r0, #50	; 0x32
 8001d4a:	f7ff ff59 	bl	8001c00 <Power_Dev_OFF>
			break;
 8001d4e:	e06b      	b.n	8001e28 <Power_Dev_ON+0x104>
		case NODE1:
			DEV1_3_SEN_PWR(GPIO_PIN_SET);
 8001d50:	2201      	movs	r2, #1
 8001d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d56:	4836      	ldr	r0, [pc, #216]	; (8001e30 <Power_Dev_ON+0x10c>)
 8001d58:	f001 fc92 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_3_UART_RX_EN(GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d62:	4834      	ldr	r0, [pc, #208]	; (8001e34 <Power_Dev_ON+0x110>)
 8001d64:	f001 fc8c 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_3_LTCH_EN(GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	4830      	ldr	r0, [pc, #192]	; (8001e30 <Power_Dev_ON+0x10c>)
 8001d6e:	f001 fc87 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_PWR_EN(GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	2140      	movs	r1, #64	; 0x40
 8001d76:	482e      	ldr	r0, [pc, #184]	; (8001e30 <Power_Dev_ON+0x10c>)
 8001d78:	f001 fc82 	bl	8003680 <HAL_GPIO_WritePin>
			DEV3_PWR_EN(GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	482b      	ldr	r0, [pc, #172]	; (8001e30 <Power_Dev_ON+0x10c>)
 8001d82:	f001 fc7d 	bl	8003680 <HAL_GPIO_WritePin>
			bool dev1_on = false;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73bb      	strb	r3, [r7, #14]
			//dev1_on = (Dev_Restarted('1', 30));
			if(dev1_on)
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d048      	beq.n	8001e22 <Power_Dev_ON+0xfe>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"Dev1 ON\n", 8, 500);
 8001d90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d94:	2208      	movs	r2, #8
 8001d96:	4928      	ldr	r1, [pc, #160]	; (8001e38 <Power_Dev_ON+0x114>)
 8001d98:	4828      	ldr	r0, [pc, #160]	; (8001e3c <Power_Dev_ON+0x118>)
 8001d9a:	f002 fac0 	bl	800431e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)"Dev1 ON\n", 8, 500);
 8001d9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001da2:	2208      	movs	r2, #8
 8001da4:	4924      	ldr	r1, [pc, #144]	; (8001e38 <Power_Dev_ON+0x114>)
 8001da6:	4826      	ldr	r0, [pc, #152]	; (8001e40 <Power_Dev_ON+0x11c>)
 8001da8:	f002 fab9 	bl	800431e <HAL_UART_Transmit>
			}
			break;
 8001dac:	e039      	b.n	8001e22 <Power_Dev_ON+0xfe>
		case NODE2:
			DEV2_4_SEN_PWR(GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	2101      	movs	r1, #1
 8001db2:	4824      	ldr	r0, [pc, #144]	; (8001e44 <Power_Dev_ON+0x120>)
 8001db4:	f001 fc64 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_4_UART_RX_EN(GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dbe:	4821      	ldr	r0, [pc, #132]	; (8001e44 <Power_Dev_ON+0x120>)
 8001dc0:	f001 fc5e 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_4_LTCH_EN(GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dca:	4819      	ldr	r0, [pc, #100]	; (8001e30 <Power_Dev_ON+0x10c>)
 8001dcc:	f001 fc58 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_PWR_EN(GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	481b      	ldr	r0, [pc, #108]	; (8001e44 <Power_Dev_ON+0x120>)
 8001dd6:	f001 fc53 	bl	8003680 <HAL_GPIO_WritePin>
			DEV4_PWR_EN(GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2120      	movs	r1, #32
 8001dde:	4819      	ldr	r0, [pc, #100]	; (8001e44 <Power_Dev_ON+0x120>)
 8001de0:	f001 fc4e 	bl	8003680 <HAL_GPIO_WritePin>
			bool dev2_on = false;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
			//dev2_on = (Dev_Restarted('2', 30));
			if(dev2_on)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01b      	beq.n	8001e26 <Power_Dev_ON+0x102>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"Dev2 ON\n", 8, 500);
 8001dee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001df2:	2208      	movs	r2, #8
 8001df4:	4914      	ldr	r1, [pc, #80]	; (8001e48 <Power_Dev_ON+0x124>)
 8001df6:	4811      	ldr	r0, [pc, #68]	; (8001e3c <Power_Dev_ON+0x118>)
 8001df8:	f002 fa91 	bl	800431e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)"Dev2 ON\n", 8, 500);
 8001dfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e00:	2208      	movs	r2, #8
 8001e02:	4911      	ldr	r1, [pc, #68]	; (8001e48 <Power_Dev_ON+0x124>)
 8001e04:	480e      	ldr	r0, [pc, #56]	; (8001e40 <Power_Dev_ON+0x11c>)
 8001e06:	f002 fa8a 	bl	800431e <HAL_UART_Transmit>
			}
			break;
 8001e0a:	e00c      	b.n	8001e26 <Power_Dev_ON+0x102>
		default:
			HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid node selected \n", sizeof("Invalid node selected\n"), 500);
 8001e0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e10:	2217      	movs	r2, #23
 8001e12:	490e      	ldr	r1, [pc, #56]	; (8001e4c <Power_Dev_ON+0x128>)
 8001e14:	4809      	ldr	r0, [pc, #36]	; (8001e3c <Power_Dev_ON+0x118>)
 8001e16:	f002 fa82 	bl	800431e <HAL_UART_Transmit>
			printf("Invalid node selected\n");
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <Power_Dev_ON+0x12c>)
 8001e1c:	f003 fb62 	bl	80054e4 <puts>
			break;
 8001e20:	e002      	b.n	8001e28 <Power_Dev_ON+0x104>
			break;
 8001e22:	bf00      	nop
 8001e24:	e000      	b.n	8001e28 <Power_Dev_ON+0x104>
			break;
 8001e26:	bf00      	nop
	}
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020800 	.word	0x40020800
 8001e38:	08006c04 	.word	0x08006c04
 8001e3c:	200064b8 	.word	0x200064b8
 8001e40:	200064fc 	.word	0x200064fc
 8001e44:	40020400 	.word	0x40020400
 8001e48:	08006c10 	.word	0x08006c10
 8001e4c:	08006bec 	.word	0x08006bec
 8001e50:	08006bd4 	.word	0x08006bd4

08001e54 <Set_Sensor>:


void Set_Sensor(uint8_t dev, uint8_t selected_sensor)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71bb      	strb	r3, [r7, #6]
	if (selected_sensor > (NUM_SENS_AVAILABLE-1))
 8001e64:	79bb      	ldrb	r3, [r7, #6]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d903      	bls.n	8001e72 <Set_Sensor+0x1e>
	{
		printf("Invalid Sensor Selected\n");
 8001e6a:	485e      	ldr	r0, [pc, #376]	; (8001fe4 <Set_Sensor+0x190>)
 8001e6c:	f003 fb3a 	bl	80054e4 <puts>
 8001e70:	e0b4      	b.n	8001fdc <Set_Sensor+0x188>
		return;
	}

	char sensorName[NUM_SENS_AVAILABLE][10] = {
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <Set_Sensor+0x194>)
 8001e74:	f107 0408 	add.w	r4, r7, #8
 8001e78:	461d      	mov	r5, r3
 8001e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e86:	e884 0003 	stmia.w	r4, {r0, r1}
		    "3x TMP107",
		    "DS18B20",
		    "SHT30"
	};

	switch(dev)
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b32      	cmp	r3, #50	; 0x32
 8001e8e:	d059      	beq.n	8001f44 <Set_Sensor+0xf0>
 8001e90:	2b32      	cmp	r3, #50	; 0x32
 8001e92:	f300 809f 	bgt.w	8001fd4 <Set_Sensor+0x180>
 8001e96:	2b30      	cmp	r3, #48	; 0x30
 8001e98:	d002      	beq.n	8001ea0 <Set_Sensor+0x4c>
 8001e9a:	2b31      	cmp	r3, #49	; 0x31
 8001e9c:	d00b      	beq.n	8001eb6 <Set_Sensor+0x62>
 8001e9e:	e099      	b.n	8001fd4 <Set_Sensor+0x180>
	{
		case BOTH:
			Set_Sensor(NODE1, selected_sensor);
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	2031      	movs	r0, #49	; 0x31
 8001ea6:	f7ff ffd5 	bl	8001e54 <Set_Sensor>
			Set_Sensor(NODE2, selected_sensor);
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	4619      	mov	r1, r3
 8001eae:	2032      	movs	r0, #50	; 0x32
 8001eb0:	f7ff ffd0 	bl	8001e54 <Set_Sensor>
			break;
 8001eb4:	e092      	b.n	8001fdc <Set_Sensor+0x188>
		case NODE1:
			DEV1_3_LTCH_EN(GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2120      	movs	r1, #32
 8001eba:	484c      	ldr	r0, [pc, #304]	; (8001fec <Set_Sensor+0x198>)
 8001ebc:	f001 fbe0 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_3_MUX_INH(GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2108      	movs	r1, #8
 8001ec4:	484a      	ldr	r0, [pc, #296]	; (8001ff0 <Set_Sensor+0x19c>)
 8001ec6:	f001 fbdb 	bl	8003680 <HAL_GPIO_WritePin>

			Power_Dev_OFF(NODE1);
 8001eca:	2031      	movs	r0, #49	; 0x31
 8001ecc:	f7ff fe98 	bl	8001c00 <Power_Dev_OFF>



			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0, SENS_SEL_A_STATE(selected_sensor));
 8001ed0:	79bb      	ldrb	r3, [r7, #6]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2101      	movs	r1, #1
 8001edc:	4844      	ldr	r0, [pc, #272]	; (8001ff0 <Set_Sensor+0x19c>)
 8001ede:	f001 fbcf 	bl	8003680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, SENS_SEL_B_STATE(selected_sensor));
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	483e      	ldr	r0, [pc, #248]	; (8001ff0 <Set_Sensor+0x19c>)
 8001ef8:	f001 fbc2 	bl	8003680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2, SENS_SEL_C_STATE(selected_sensor));
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2104      	movs	r1, #4
 8001f10:	4837      	ldr	r0, [pc, #220]	; (8001ff0 <Set_Sensor+0x19c>)
 8001f12:	f001 fbb5 	bl	8003680 <HAL_GPIO_WritePin>

			printf("Node 1 %s sensor selected\n", sensorName[selected_sensor]);
 8001f16:	79ba      	ldrb	r2, [r7, #6]
 8001f18:	f107 0108 	add.w	r1, r7, #8
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	440b      	add	r3, r1
 8001f26:	4619      	mov	r1, r3
 8001f28:	4832      	ldr	r0, [pc, #200]	; (8001ff4 <Set_Sensor+0x1a0>)
 8001f2a:	f003 fa55 	bl	80053d8 <iprintf>

			DEV1_3_LTCH_EN(GPIO_PIN_SET);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2120      	movs	r1, #32
 8001f32:	482e      	ldr	r0, [pc, #184]	; (8001fec <Set_Sensor+0x198>)
 8001f34:	f001 fba4 	bl	8003680 <HAL_GPIO_WritePin>
			DEV1_3_MUX_INH(GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	482c      	ldr	r0, [pc, #176]	; (8001ff0 <Set_Sensor+0x19c>)
 8001f3e:	f001 fb9f 	bl	8003680 <HAL_GPIO_WritePin>
			break;
 8001f42:	e04b      	b.n	8001fdc <Set_Sensor+0x188>
		case NODE2:
			DEV2_4_LTCH_EN(GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f4a:	4828      	ldr	r0, [pc, #160]	; (8001fec <Set_Sensor+0x198>)
 8001f4c:	f001 fb98 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_4_MUX_INH(GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2110      	movs	r1, #16
 8001f54:	4825      	ldr	r0, [pc, #148]	; (8001fec <Set_Sensor+0x198>)
 8001f56:	f001 fb93 	bl	8003680 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4, SENS_SEL_A_STATE(selected_sensor));
 8001f5a:	79bb      	ldrb	r3, [r7, #6]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	2110      	movs	r1, #16
 8001f66:	4822      	ldr	r0, [pc, #136]	; (8001ff0 <Set_Sensor+0x19c>)
 8001f68:	f001 fb8a 	bl	8003680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, SENS_SEL_B_STATE(selected_sensor));
 8001f6c:	79bb      	ldrb	r3, [r7, #6]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f82:	481d      	ldr	r0, [pc, #116]	; (8001ff8 <Set_Sensor+0x1a4>)
 8001f84:	f001 fb7c 	bl	8003680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, SENS_SEL_C_STATE(selected_sensor));
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bf14      	ite	ne
 8001f92:	2301      	movne	r3, #1
 8001f94:	2300      	moveq	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f9e:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <Set_Sensor+0x1a4>)
 8001fa0:	f001 fb6e 	bl	8003680 <HAL_GPIO_WritePin>

			printf("Node 2 %s sensor selected\n", sensorName[selected_sensor]);
 8001fa4:	79ba      	ldrb	r2, [r7, #6]
 8001fa6:	f107 0108 	add.w	r1, r7, #8
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	440b      	add	r3, r1
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4811      	ldr	r0, [pc, #68]	; (8001ffc <Set_Sensor+0x1a8>)
 8001fb8:	f003 fa0e 	bl	80053d8 <iprintf>

			DEV2_4_LTCH_EN(GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fc2:	480a      	ldr	r0, [pc, #40]	; (8001fec <Set_Sensor+0x198>)
 8001fc4:	f001 fb5c 	bl	8003680 <HAL_GPIO_WritePin>
			DEV2_4_MUX_INH(GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2110      	movs	r1, #16
 8001fcc:	4807      	ldr	r0, [pc, #28]	; (8001fec <Set_Sensor+0x198>)
 8001fce:	f001 fb57 	bl	8003680 <HAL_GPIO_WritePin>
			break;
 8001fd2:	e003      	b.n	8001fdc <Set_Sensor+0x188>
		default:
			printf("Invalid Node Selected\n");
 8001fd4:	480a      	ldr	r0, [pc, #40]	; (8002000 <Set_Sensor+0x1ac>)
 8001fd6:	f003 fa85 	bl	80054e4 <puts>
			break;
 8001fda:	bf00      	nop
	}
}
 8001fdc:	3730      	adds	r7, #48	; 0x30
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	08006c1c 	.word	0x08006c1c
 8001fe8:	08006c84 	.word	0x08006c84
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020800 	.word	0x40020800
 8001ff4:	08006c34 	.word	0x08006c34
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	08006c50 	.word	0x08006c50
 8002000:	08006c6c 	.word	0x08006c6c

08002004 <Sensor_Select_App>:

void Sensor_Select_App(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800200a:	2064      	movs	r0, #100	; 0x64
 800200c:	f000 ffdc 	bl	8002fc8 <HAL_Delay>
	char dev = (uint8_t) Get_Pi_UART_Data_Last(2);
 8002010:	2002      	movs	r0, #2
 8002012:	f7ff fc41 	bl	8001898 <Get_Pi_UART_Data_Last>
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
	char sens_num = (uint8_t) Get_Pi_UART_Data_Last(1);
 800201a:	2001      	movs	r0, #1
 800201c:	f7ff fc3c 	bl	8001898 <Get_Pi_UART_Data_Last>
 8002020:	4603      	mov	r3, r0
 8002022:	71bb      	strb	r3, [r7, #6]

	Set_Sensor(dev, sens_num);
 8002024:	79ba      	ldrb	r2, [r7, #6]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff12 	bl	8001e54 <Set_Sensor>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Sensor Selected \n", sizeof("Sensor Selected\n"),500);
 8002030:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002034:	2211      	movs	r2, #17
 8002036:	4905      	ldr	r1, [pc, #20]	; (800204c <Sensor_Select_App+0x48>)
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <Sensor_Select_App+0x4c>)
 800203a:	f002 f970 	bl	800431e <HAL_UART_Transmit>

	application_state = DEFAULT;
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <Sensor_Select_App+0x50>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	08006cac 	.word	0x08006cac
 8002050:	200064b8 	.word	0x200064b8
 8002054:	20000126 	.word	0x20000126

08002058 <Set_Charger_State>:

void Set_Charger_State(char dev, char charger_state)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	460a      	mov	r2, r1
 8002062:	71fb      	strb	r3, [r7, #7]
 8002064:	4613      	mov	r3, r2
 8002066:	71bb      	strb	r3, [r7, #6]
	switch(dev)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	2b32      	cmp	r3, #50	; 0x32
 800206c:	d022      	beq.n	80020b4 <Set_Charger_State+0x5c>
 800206e:	2b32      	cmp	r3, #50	; 0x32
 8002070:	dc31      	bgt.n	80020d6 <Set_Charger_State+0x7e>
 8002072:	2b30      	cmp	r3, #48	; 0x30
 8002074:	d002      	beq.n	800207c <Set_Charger_State+0x24>
 8002076:	2b31      	cmp	r3, #49	; 0x31
 8002078:	d00b      	beq.n	8002092 <Set_Charger_State+0x3a>
 800207a:	e02c      	b.n	80020d6 <Set_Charger_State+0x7e>
	{
		case BOTH:
			Set_Charger_State(NODE1, charger_state);
 800207c:	79bb      	ldrb	r3, [r7, #6]
 800207e:	4619      	mov	r1, r3
 8002080:	2031      	movs	r0, #49	; 0x31
 8002082:	f7ff ffe9 	bl	8002058 <Set_Charger_State>
			Set_Charger_State(NODE2, charger_state);
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	4619      	mov	r1, r3
 800208a:	2032      	movs	r0, #50	; 0x32
 800208c:	f7ff ffe4 	bl	8002058 <Set_Charger_State>
			break;
 8002090:	e02c      	b.n	80020ec <Set_Charger_State+0x94>
		case NODE1:
			if(charger_state == ON)
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	2b31      	cmp	r3, #49	; 0x31
 8002096:	d106      	bne.n	80020a6 <Set_Charger_State+0x4e>
			{
				DEV1_CHG_EN(GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800209e:	4815      	ldr	r0, [pc, #84]	; (80020f4 <Set_Charger_State+0x9c>)
 80020a0:	f001 faee 	bl	8003680 <HAL_GPIO_WritePin>
			}
			else
			{
				DEV1_CHG_EN(GPIO_PIN_RESET);
			}
			break;
 80020a4:	e022      	b.n	80020ec <Set_Charger_State+0x94>
				DEV1_CHG_EN(GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ac:	4811      	ldr	r0, [pc, #68]	; (80020f4 <Set_Charger_State+0x9c>)
 80020ae:	f001 fae7 	bl	8003680 <HAL_GPIO_WritePin>
			break;
 80020b2:	e01b      	b.n	80020ec <Set_Charger_State+0x94>
		case NODE2:
			if(charger_state == ON)
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	2b31      	cmp	r3, #49	; 0x31
 80020b8:	d106      	bne.n	80020c8 <Set_Charger_State+0x70>
			{
				DEV2_CHG_EN(GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c0:	480d      	ldr	r0, [pc, #52]	; (80020f8 <Set_Charger_State+0xa0>)
 80020c2:	f001 fadd 	bl	8003680 <HAL_GPIO_WritePin>
			}
			else
			{
				DEV2_CHG_EN(GPIO_PIN_RESET);
			}
			break;
 80020c6:	e011      	b.n	80020ec <Set_Charger_State+0x94>
				DEV2_CHG_EN(GPIO_PIN_RESET);
 80020c8:	2200      	movs	r2, #0
 80020ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ce:	480a      	ldr	r0, [pc, #40]	; (80020f8 <Set_Charger_State+0xa0>)
 80020d0:	f001 fad6 	bl	8003680 <HAL_GPIO_WritePin>
			break;
 80020d4:	e00a      	b.n	80020ec <Set_Charger_State+0x94>
		default:
			HAL_UART_Transmit(&huart1, (uint8_t*)("Invalid device selected"), sizeof(("Invalid device selected")), 500);
 80020d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020da:	2218      	movs	r2, #24
 80020dc:	4907      	ldr	r1, [pc, #28]	; (80020fc <Set_Charger_State+0xa4>)
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <Set_Charger_State+0xa8>)
 80020e0:	f002 f91d 	bl	800431e <HAL_UART_Transmit>
			printf("Invalid device selected");
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <Set_Charger_State+0xa4>)
 80020e6:	f003 f977 	bl	80053d8 <iprintf>
	}	
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020400 	.word	0x40020400
 80020fc:	08006cc0 	.word	0x08006cc0
 8002100:	200064b8 	.word	0x200064b8

08002104 <Set_Charger_App>:


void Set_Charger_App(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800210a:	2064      	movs	r0, #100	; 0x64
 800210c:	f000 ff5c 	bl	8002fc8 <HAL_Delay>

	char dev = (uint8_t) Get_Pi_UART_Data_Last(2);
 8002110:	2002      	movs	r0, #2
 8002112:	f7ff fbc1 	bl	8001898 <Get_Pi_UART_Data_Last>
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
	char chg_state = ((uint8_t) Get_Pi_UART_Data_Last(1));
 800211a:	2001      	movs	r0, #1
 800211c:	f7ff fbbc 	bl	8001898 <Get_Pi_UART_Data_Last>
 8002120:	4603      	mov	r3, r0
 8002122:	71bb      	strb	r3, [r7, #6]

	Set_Charger_State(dev, chg_state);
 8002124:	79ba      	ldrb	r2, [r7, #6]
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff94 	bl	8002058 <Set_Charger_State>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Charger State Set \n", sizeof("Charger State Set\n"), 500);
 8002130:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002134:	2213      	movs	r2, #19
 8002136:	4905      	ldr	r1, [pc, #20]	; (800214c <Set_Charger_App+0x48>)
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <Set_Charger_App+0x4c>)
 800213a:	f002 f8f0 	bl	800431e <HAL_UART_Transmit>

	application_state = DEFAULT;
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <Set_Charger_App+0x50>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	08006cd8 	.word	0x08006cd8
 8002150:	200064b8 	.word	0x200064b8
 8002154:	20000126 	.word	0x20000126

08002158 <Dev1_Check_Flag>:


void Dev1_Check_Flag(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
	if(dev1_send_flag != dev1_array_start){
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <Dev1_Check_Flag+0xa0>)
 8002160:	881a      	ldrh	r2, [r3, #0]
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <Dev1_Check_Flag+0xa4>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d041      	beq.n	80021ee <Dev1_Check_Flag+0x96>
		uint16_t num_bytes;
		if(dev1_send_flag > dev1_array_start){
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <Dev1_Check_Flag+0xa0>)
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <Dev1_Check_Flag+0xa4>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d918      	bls.n	80021a8 <Dev1_Check_Flag+0x50>
			num_bytes = dev1_send_flag - dev1_array_start;
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <Dev1_Check_Flag+0xa0>)
 8002178:	881a      	ldrh	r2, [r3, #0]
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <Dev1_Check_Flag+0xa4>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS1|", 4, 500);
 8002182:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002186:	2204      	movs	r2, #4
 8002188:	491d      	ldr	r1, [pc, #116]	; (8002200 <Dev1_Check_Flag+0xa8>)
 800218a:	481e      	ldr	r0, [pc, #120]	; (8002204 <Dev1_Check_Flag+0xac>)
 800218c:	f002 f8c7 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev1_uart_rxBuffer[dev1_array_start+1], num_bytes, 500);
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <Dev1_Check_Flag+0xa4>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <Dev1_Check_Flag+0xb0>)
 8002198:	1899      	adds	r1, r3, r2
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021a0:	4818      	ldr	r0, [pc, #96]	; (8002204 <Dev1_Check_Flag+0xac>)
 80021a2:	f002 f8bc 	bl	800431e <HAL_UART_Transmit>
 80021a6:	e01e      	b.n	80021e6 <Dev1_Check_Flag+0x8e>
		}
		else
		{
			num_bytes = dev1_uart_buffer_size - dev1_array_start;
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <Dev1_Check_Flag+0xa4>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80021b0:	3308      	adds	r3, #8
 80021b2:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS1|", 4, 500);
 80021b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021b8:	2204      	movs	r2, #4
 80021ba:	4911      	ldr	r1, [pc, #68]	; (8002200 <Dev1_Check_Flag+0xa8>)
 80021bc:	4811      	ldr	r0, [pc, #68]	; (8002204 <Dev1_Check_Flag+0xac>)
 80021be:	f002 f8ae 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev1_uart_rxBuffer[dev1_array_start+1], num_bytes, 500);
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <Dev1_Check_Flag+0xa4>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <Dev1_Check_Flag+0xb0>)
 80021ca:	1899      	adds	r1, r3, r2
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021d2:	480c      	ldr	r0, [pc, #48]	; (8002204 <Dev1_Check_Flag+0xac>)
 80021d4:	f002 f8a3 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev1_uart_rxBuffer[0], 1 /*dev1_send_flag */, 500);
 80021d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021dc:	2201      	movs	r2, #1
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <Dev1_Check_Flag+0xb0>)
 80021e0:	4808      	ldr	r0, [pc, #32]	; (8002204 <Dev1_Check_Flag+0xac>)
 80021e2:	f002 f89c 	bl	800431e <HAL_UART_Transmit>
		}
		dev1_array_start = dev1_send_flag;
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <Dev1_Check_Flag+0xa0>)
 80021e8:	881a      	ldrh	r2, [r3, #0]
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <Dev1_Check_Flag+0xa4>)
 80021ec:	801a      	strh	r2, [r3, #0]
	}
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20002974 	.word	0x20002974
 80021fc:	20002970 	.word	0x20002970
 8002200:	08006cec 	.word	0x08006cec
 8002204:	200064b8 	.word	0x200064b8
 8002208:	200015e8 	.word	0x200015e8

0800220c <Dev3_Check_Flag>:

void Dev3_Check_Flag(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
	if(dev3_send_flag != dev3_array_start){
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <Dev3_Check_Flag+0xa0>)
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <Dev3_Check_Flag+0xa4>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d041      	beq.n	80022a2 <Dev3_Check_Flag+0x96>
		uint16_t num_bytes;
		if(dev3_send_flag > dev3_array_start){
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <Dev3_Check_Flag+0xa0>)
 8002220:	881a      	ldrh	r2, [r3, #0]
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <Dev3_Check_Flag+0xa4>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d918      	bls.n	800225c <Dev3_Check_Flag+0x50>
			num_bytes = dev3_send_flag - dev3_array_start;
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <Dev3_Check_Flag+0xa0>)
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <Dev3_Check_Flag+0xa4>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC1|", 4, 500);
 8002236:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800223a:	2204      	movs	r2, #4
 800223c:	491d      	ldr	r1, [pc, #116]	; (80022b4 <Dev3_Check_Flag+0xa8>)
 800223e:	481e      	ldr	r0, [pc, #120]	; (80022b8 <Dev3_Check_Flag+0xac>)
 8002240:	f002 f86d 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev3_uart_rxBuffer[dev3_array_start+1], num_bytes, 500);
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <Dev3_Check_Flag+0xa4>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <Dev3_Check_Flag+0xb0>)
 800224c:	1899      	adds	r1, r3, r2
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002254:	4818      	ldr	r0, [pc, #96]	; (80022b8 <Dev3_Check_Flag+0xac>)
 8002256:	f002 f862 	bl	800431e <HAL_UART_Transmit>
 800225a:	e01e      	b.n	800229a <Dev3_Check_Flag+0x8e>
		}
		else
		{
			num_bytes = dev3_uart_buffer_size - dev3_array_start;
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <Dev3_Check_Flag+0xa4>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002264:	3308      	adds	r3, #8
 8002266:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC1|", 4, 500);
 8002268:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800226c:	2204      	movs	r2, #4
 800226e:	4911      	ldr	r1, [pc, #68]	; (80022b4 <Dev3_Check_Flag+0xa8>)
 8002270:	4811      	ldr	r0, [pc, #68]	; (80022b8 <Dev3_Check_Flag+0xac>)
 8002272:	f002 f854 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev3_uart_rxBuffer[dev3_array_start+1], num_bytes, 500);
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <Dev3_Check_Flag+0xa4>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	4a0f      	ldr	r2, [pc, #60]	; (80022bc <Dev3_Check_Flag+0xb0>)
 800227e:	1899      	adds	r1, r3, r2
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002286:	480c      	ldr	r0, [pc, #48]	; (80022b8 <Dev3_Check_Flag+0xac>)
 8002288:	f002 f849 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev3_uart_rxBuffer[0], 1 /*dev1_send_flag */, 500);
 800228c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002290:	2201      	movs	r2, #1
 8002292:	490a      	ldr	r1, [pc, #40]	; (80022bc <Dev3_Check_Flag+0xb0>)
 8002294:	4808      	ldr	r0, [pc, #32]	; (80022b8 <Dev3_Check_Flag+0xac>)
 8002296:	f002 f842 	bl	800431e <HAL_UART_Transmit>
		}
		dev3_array_start = dev3_send_flag;
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <Dev3_Check_Flag+0xa0>)
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <Dev3_Check_Flag+0xa4>)
 80022a0:	801a      	strh	r2, [r3, #0]
	}
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20003d08 	.word	0x20003d08
 80022b0:	20003d04 	.word	0x20003d04
 80022b4:	08006cf4 	.word	0x08006cf4
 80022b8:	200064b8 	.word	0x200064b8
 80022bc:	2000297c 	.word	0x2000297c

080022c0 <Dev2_Check_Flag>:

void Dev2_Check_Flag(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
	if(dev2_send_flag != dev2_array_start){
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <Dev2_Check_Flag+0xa0>)
 80022c8:	881a      	ldrh	r2, [r3, #0]
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <Dev2_Check_Flag+0xa4>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d042      	beq.n	8002358 <Dev2_Check_Flag+0x98>
		uint16_t num_bytes;
		if(dev2_send_flag > dev2_array_start){
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <Dev2_Check_Flag+0xa0>)
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <Dev2_Check_Flag+0xa4>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d918      	bls.n	8002310 <Dev2_Check_Flag+0x50>
			num_bytes = dev2_send_flag - dev2_array_start;
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <Dev2_Check_Flag+0xa0>)
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <Dev2_Check_Flag+0xa4>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS2|", 4, 500);
 80022ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022ee:	2204      	movs	r2, #4
 80022f0:	491d      	ldr	r1, [pc, #116]	; (8002368 <Dev2_Check_Flag+0xa8>)
 80022f2:	481e      	ldr	r0, [pc, #120]	; (800236c <Dev2_Check_Flag+0xac>)
 80022f4:	f002 f813 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev2_uart_rxBuffer[dev2_array_start+1], num_bytes, 500);
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <Dev2_Check_Flag+0xa4>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <Dev2_Check_Flag+0xb0>)
 8002300:	1899      	adds	r1, r3, r2
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002308:	4818      	ldr	r0, [pc, #96]	; (800236c <Dev2_Check_Flag+0xac>)
 800230a:	f002 f808 	bl	800431e <HAL_UART_Transmit>
 800230e:	e01f      	b.n	8002350 <Dev2_Check_Flag+0x90>
		}
		else
		{
			num_bytes = dev2_uart_buffer_size - dev2_array_start;
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <Dev2_Check_Flag+0xa4>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002318:	3308      	adds	r3, #8
 800231a:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nS2|", 4, 500);
 800231c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002320:	2204      	movs	r2, #4
 8002322:	4911      	ldr	r1, [pc, #68]	; (8002368 <Dev2_Check_Flag+0xa8>)
 8002324:	4811      	ldr	r0, [pc, #68]	; (800236c <Dev2_Check_Flag+0xac>)
 8002326:	f001 fffa 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev2_uart_rxBuffer[dev2_array_start+1], num_bytes, 500);
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <Dev2_Check_Flag+0xa4>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <Dev2_Check_Flag+0xb0>)
 8002332:	1899      	adds	r1, r3, r2
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800233a:	480c      	ldr	r0, [pc, #48]	; (800236c <Dev2_Check_Flag+0xac>)
 800233c:	f001 ffef 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev2_uart_rxBuffer[0], dev2_send_flag, 500);
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <Dev2_Check_Flag+0xa0>)
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002348:	4909      	ldr	r1, [pc, #36]	; (8002370 <Dev2_Check_Flag+0xb0>)
 800234a:	4808      	ldr	r0, [pc, #32]	; (800236c <Dev2_Check_Flag+0xac>)
 800234c:	f001 ffe7 	bl	800431e <HAL_UART_Transmit>
		}
		dev2_array_start = dev2_send_flag;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <Dev2_Check_Flag+0xa0>)
 8002352:	881a      	ldrh	r2, [r3, #0]
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <Dev2_Check_Flag+0xa4>)
 8002356:	801a      	strh	r2, [r3, #0]
	}
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20005098 	.word	0x20005098
 8002364:	20005094 	.word	0x20005094
 8002368:	08006cfc 	.word	0x08006cfc
 800236c:	200064b8 	.word	0x200064b8
 8002370:	20003d0c 	.word	0x20003d0c

08002374 <Dev4_Check_Flag>:

void Dev4_Check_Flag(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
	if(dev4_send_flag != dev4_array_start){
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <Dev4_Check_Flag+0xa0>)
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <Dev4_Check_Flag+0xa4>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d042      	beq.n	800240c <Dev4_Check_Flag+0x98>
		uint16_t num_bytes;
		if(dev4_send_flag > dev4_array_start){
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <Dev4_Check_Flag+0xa0>)
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <Dev4_Check_Flag+0xa4>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d918      	bls.n	80023c4 <Dev4_Check_Flag+0x50>
			num_bytes = dev4_send_flag - dev4_array_start;
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <Dev4_Check_Flag+0xa0>)
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <Dev4_Check_Flag+0xa4>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC2|", 4, 500);
 800239e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023a2:	2204      	movs	r2, #4
 80023a4:	491d      	ldr	r1, [pc, #116]	; (800241c <Dev4_Check_Flag+0xa8>)
 80023a6:	481e      	ldr	r0, [pc, #120]	; (8002420 <Dev4_Check_Flag+0xac>)
 80023a8:	f001 ffb9 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev4_uart_rxBuffer[dev4_array_start+1], num_bytes, 500);
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <Dev4_Check_Flag+0xa4>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <Dev4_Check_Flag+0xb0>)
 80023b4:	1899      	adds	r1, r3, r2
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023bc:	4818      	ldr	r0, [pc, #96]	; (8002420 <Dev4_Check_Flag+0xac>)
 80023be:	f001 ffae 	bl	800431e <HAL_UART_Transmit>
 80023c2:	e01f      	b.n	8002404 <Dev4_Check_Flag+0x90>
		}
		else
		{
			num_bytes = dev4_uart_buffer_size - dev4_array_start;
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <Dev4_Check_Flag+0xa4>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80023cc:	3308      	adds	r3, #8
 80023ce:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t*)"\nC2|", 4, 500);
 80023d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023d4:	2204      	movs	r2, #4
 80023d6:	4911      	ldr	r1, [pc, #68]	; (800241c <Dev4_Check_Flag+0xa8>)
 80023d8:	4811      	ldr	r0, [pc, #68]	; (8002420 <Dev4_Check_Flag+0xac>)
 80023da:	f001 ffa0 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev4_uart_rxBuffer[dev4_array_start+1], num_bytes, 500);
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <Dev4_Check_Flag+0xa4>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <Dev4_Check_Flag+0xb0>)
 80023e6:	1899      	adds	r1, r3, r2
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023ee:	480c      	ldr	r0, [pc, #48]	; (8002420 <Dev4_Check_Flag+0xac>)
 80023f0:	f001 ff95 	bl	800431e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &dev4_uart_rxBuffer[0], dev4_send_flag, 500);
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <Dev4_Check_Flag+0xa0>)
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023fc:	4909      	ldr	r1, [pc, #36]	; (8002424 <Dev4_Check_Flag+0xb0>)
 80023fe:	4808      	ldr	r0, [pc, #32]	; (8002420 <Dev4_Check_Flag+0xac>)
 8002400:	f001 ff8d 	bl	800431e <HAL_UART_Transmit>
		}
		dev4_array_start = dev4_send_flag;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <Dev4_Check_Flag+0xa0>)
 8002406:	881a      	ldrh	r2, [r3, #0]
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <Dev4_Check_Flag+0xa4>)
 800240a:	801a      	strh	r2, [r3, #0]
	}
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20006428 	.word	0x20006428
 8002418:	20006424 	.word	0x20006424
 800241c:	08006d04 	.word	0x08006d04
 8002420:	200064b8 	.word	0x200064b8
 8002424:	2000509c 	.word	0x2000509c

08002428 <Chip_Update>:
* Description: 	This routine update any low level chip functions
* Parameters:  	(none)
* Returns:    	 	(none)
******************************************************************************/
void Chip_Update(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <SystemClock_Config>:
* 				files by STM32CubeIDE.
* Parameters:  	(none)
* Returns:     	(none)
******************************************************************************/
void SystemClock_Config(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b094      	sub	sp, #80	; 0x50
 800243c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	2234      	movs	r2, #52	; 0x34
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f002 ffbe 	bl	80053c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <SystemClock_Config+0xd4>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	4a29      	ldr	r2, [pc, #164]	; (800250c <SystemClock_Config+0xd4>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246a:	6413      	str	r3, [r2, #64]	; 0x40
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <SystemClock_Config+0xd4>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002478:	2300      	movs	r3, #0
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <SystemClock_Config+0xd8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002484:	4a22      	ldr	r2, [pc, #136]	; (8002510 <SystemClock_Config+0xd8>)
 8002486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b20      	ldr	r3, [pc, #128]	; (8002510 <SystemClock_Config+0xd8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002498:	2302      	movs	r3, #2
 800249a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800249c:	2301      	movs	r3, #1
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024a0:	2310      	movs	r3, #16
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024a4:	2302      	movs	r3, #2
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024a8:	2300      	movs	r3, #0
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80024ac:	2310      	movs	r3, #16
 80024ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80024b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80024b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024b6:	2304      	movs	r3, #4
 80024b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80024ba:	2302      	movs	r3, #2
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024be:	2302      	movs	r3, #2
 80024c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4618      	mov	r0, r3
 80024c8:	f001 fc3e 	bl	8003d48 <HAL_RCC_OscConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80024d2:	f000 f81f 	bl	8002514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d6:	230f      	movs	r3, #15
 80024d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024da:	2302      	movs	r3, #2
 80024dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 f8de 	bl	80036b4 <HAL_RCC_ClockConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80024fe:	f000 f809 	bl	8002514 <Error_Handler>
  }
}
 8002502:	bf00      	nop
 8002504:	3750      	adds	r7, #80	; 0x50
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40007000 	.word	0x40007000

08002514 <Error_Handler>:
* 				in to main.c of generated files by STM32CubeIDE.
* Parameters:  	(none)
* Returns:     	(none)
******************************************************************************/
void Error_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002518:	b672      	cpsid	i
}
 800251a:	bf00      	nop
  __disable_irq();
  while (1)
 800251c:	e7fe      	b.n	800251c <Error_Handler+0x8>
	...

08002520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b43      	ldr	r3, [pc, #268]	; (8002648 <MX_GPIO_Init+0x128>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a42      	ldr	r2, [pc, #264]	; (8002648 <MX_GPIO_Init+0x128>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b40      	ldr	r3, [pc, #256]	; (8002648 <MX_GPIO_Init+0x128>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <MX_GPIO_Init+0x128>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a3b      	ldr	r2, [pc, #236]	; (8002648 <MX_GPIO_Init+0x128>)
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <MX_GPIO_Init+0x128>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b35      	ldr	r3, [pc, #212]	; (8002648 <MX_GPIO_Init+0x128>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a34      	ldr	r2, [pc, #208]	; (8002648 <MX_GPIO_Init+0x128>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <MX_GPIO_Init+0x128>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <MX_GPIO_Init+0x128>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <MX_GPIO_Init+0x128>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <MX_GPIO_Init+0x128>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <MX_GPIO_Init+0x128>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a26      	ldr	r2, [pc, #152]	; (8002648 <MX_GPIO_Init+0x128>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <MX_GPIO_Init+0x128>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80025c2:	2200      	movs	r2, #0
 80025c4:	f642 711f 	movw	r1, #12063	; 0x2f1f
 80025c8:	4820      	ldr	r0, [pc, #128]	; (800264c <MX_GPIO_Init+0x12c>)
 80025ca:	f001 f859 	bl	8003680 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80025ce:	2200      	movs	r2, #0
 80025d0:	f248 11f0 	movw	r1, #33264	; 0x81f0
 80025d4:	481e      	ldr	r0, [pc, #120]	; (8002650 <MX_GPIO_Init+0x130>)
 80025d6:	f001 f853 	bl	8003680 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80025da:	2200      	movs	r2, #0
 80025dc:	f247 31f1 	movw	r1, #29681	; 0x73f1
 80025e0:	481c      	ldr	r0, [pc, #112]	; (8002654 <MX_GPIO_Init+0x134>)
 80025e2:	f001 f84d 	bl	8003680 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80025e6:	f642 731f 	movw	r3, #12063	; 0x2f1f
 80025ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	4813      	ldr	r0, [pc, #76]	; (800264c <MX_GPIO_Init+0x12c>)
 8002600:	f000 feaa 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002604:	f248 13f0 	movw	r3, #33264	; 0x81f0
 8002608:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	480c      	ldr	r0, [pc, #48]	; (8002650 <MX_GPIO_Init+0x130>)
 800261e:	f000 fe9b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002622:	f247 33f1 	movw	r3, #29681	; 0x73f1
 8002626:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4806      	ldr	r0, [pc, #24]	; (8002654 <MX_GPIO_Init+0x134>)
 800263c:	f000 fe8c 	bl	8003358 <HAL_GPIO_Init>

}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	40020800 	.word	0x40020800
 8002650:	40020000 	.word	0x40020000
 8002654:	40020400 	.word	0x40020400

08002658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_MspInit+0x4c>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <HAL_MspInit+0x4c>)
 8002668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266c:	6453      	str	r3, [r2, #68]	; 0x44
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_MspInit+0x4c>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_MspInit+0x4c>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <HAL_MspInit+0x4c>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_MspInit+0x4c>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002696:	2007      	movs	r0, #7
 8002698:	f000 fd8a 	bl	80031b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40023800 	.word	0x40023800

080026a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <NMI_Handler+0x4>

080026ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <HardFault_Handler+0x4>

080026b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <MemManage_Handler+0x4>

080026ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <BusFault_Handler+0x4>

080026c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <UsageFault_Handler+0x4>

080026c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f4:	f000 fc48 	bl	8002f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}

080026fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <USART1_IRQHandler+0x10>)
 8002702:	f001 fecf 	bl	80044a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200064b8 	.word	0x200064b8

08002710 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <USART3_IRQHandler+0x10>)
 8002716:	f001 fec5 	bl	80044a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20006540 	.word	0x20006540

08002724 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <UART4_IRQHandler+0x10>)
 800272a:	f001 febb 	bl	80044a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20006430 	.word	0x20006430

08002738 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <UART5_IRQHandler+0x10>)
 800273e:	f001 feb1 	bl	80044a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20006474 	.word	0x20006474

0800274c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <USART6_IRQHandler+0x10>)
 8002752:	f001 fea7 	bl	80044a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20006584 	.word	0x20006584

08002760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
	return 1;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_kill>:

int _kill(int pid, int sig)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800277a:	f002 fdfb 	bl	8005374 <__errno>
 800277e:	4603      	mov	r3, r0
 8002780:	2216      	movs	r2, #22
 8002782:	601a      	str	r2, [r3, #0]
	return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_exit>:

void _exit (int status)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ffe7 	bl	8002770 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027a2:	e7fe      	b.n	80027a2 <_exit+0x12>

080027a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e00a      	b.n	80027cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027b6:	f3af 8000 	nop.w
 80027ba:	4601      	mov	r1, r0
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	60ba      	str	r2, [r7, #8]
 80027c2:	b2ca      	uxtb	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf0      	blt.n	80027b6 <_read+0x12>
	}

return len;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e009      	b.n	8002804 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60ba      	str	r2, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	dbf1      	blt.n	80027f0 <_write+0x12>
	}
	return len;
 800280c:	687b      	ldr	r3, [r7, #4]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <_close>:

int _close(int file)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
	return -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283e:	605a      	str	r2, [r3, #4]
	return 0;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <_isatty>:

int _isatty(int file)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
	return 1;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
	return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <_sbrk+0x5c>)
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <_sbrk+0x60>)
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <_sbrk+0x64>)
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <_sbrk+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d207      	bcs.n	80028c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b0:	f002 fd60 	bl	8005374 <__errno>
 80028b4:	4603      	mov	r3, r0
 80028b6:	220c      	movs	r2, #12
 80028b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	e009      	b.n	80028d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <_sbrk+0x64>)
 80028d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20020000 	.word	0x20020000
 80028e0:	00000400 	.word	0x00000400
 80028e4:	2000642c 	.word	0x2000642c
 80028e8:	200065e0 	.word	0x200065e0

080028ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <SystemInit+0x20>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <SystemInit+0x20>)
 80028f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <MX_UART4_Init+0x4c>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <MX_UART4_Init+0x50>)
 8002918:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <MX_UART4_Init+0x4c>)
 800291c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002920:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <MX_UART4_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <MX_UART4_Init+0x4c>)
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <MX_UART4_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <MX_UART4_Init+0x4c>)
 8002936:	220c      	movs	r2, #12
 8002938:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <MX_UART4_Init+0x4c>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <MX_UART4_Init+0x4c>)
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_UART4_Init+0x4c>)
 8002948:	f001 fc9c 	bl	8004284 <HAL_UART_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002952:	f7ff fddf 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20006430 	.word	0x20006430
 8002960:	40004c00 	.word	0x40004c00

08002964 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <MX_UART5_Init+0x4c>)
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <MX_UART5_Init+0x50>)
 800296c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <MX_UART5_Init+0x4c>)
 8002970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002974:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <MX_UART5_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <MX_UART5_Init+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <MX_UART5_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <MX_UART5_Init+0x4c>)
 800298a:	220c      	movs	r2, #12
 800298c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <MX_UART5_Init+0x4c>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <MX_UART5_Init+0x4c>)
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800299a:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_UART5_Init+0x4c>)
 800299c:	f001 fc72 	bl	8004284 <HAL_UART_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80029a6:	f7ff fdb5 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20006474 	.word	0x20006474
 80029b4:	40005000 	.word	0x40005000

080029b8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_USART1_UART_Init+0x50>)
 80029c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029de:	220c      	movs	r2, #12
 80029e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029f0:	f001 fc48 	bl	8004284 <HAL_UART_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029fa:	f7ff fd8b 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200064b8 	.word	0x200064b8
 8002a08:	40011000 	.word	0x40011000

08002a0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <MX_USART2_UART_Init+0x50>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a44:	f001 fc1e 	bl	8004284 <HAL_UART_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a4e:	f7ff fd61 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200064fc 	.word	0x200064fc
 8002a5c:	40004400 	.word	0x40004400

08002a60 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <MX_USART3_UART_Init+0x50>)
 8002a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a86:	220c      	movs	r2, #12
 8002a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a98:	f001 fbf4 	bl	8004284 <HAL_UART_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002aa2:	f7ff fd37 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20006540 	.word	0x20006540
 8002ab0:	40004800 	.word	0x40004800

08002ab4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ab8:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <MX_USART6_UART_Init+0x60>)
 8002abc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ac4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002ada:	220c      	movs	r2, #12
 8002adc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002aea:	4809      	ldr	r0, [pc, #36]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002aec:	f001 fbca 	bl	8004284 <HAL_UART_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002af6:	f7ff fd0d 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  huart6.Instance->CR1 |= USART_CR1_RXNEIE;
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <MX_USART6_UART_Init+0x5c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0220 	orr.w	r2, r2, #32
 8002b08:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART6_Init 2 */

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20006584 	.word	0x20006584
 8002b14:	40011400 	.word	0x40011400

08002b18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b096      	sub	sp, #88	; 0x58
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a7e      	ldr	r2, [pc, #504]	; (8002d30 <HAL_UART_MspInit+0x218>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d134      	bne.n	8002ba4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b3e:	4b7d      	ldr	r3, [pc, #500]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a7c      	ldr	r2, [pc, #496]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002b44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4a:	4b7a      	ldr	r3, [pc, #488]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
 8002b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b5a:	4b76      	ldr	r3, [pc, #472]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a75      	ldr	r2, [pc, #468]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b73      	ldr	r3, [pc, #460]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b72:	2303      	movs	r3, #3
 8002b74:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b82:	2308      	movs	r3, #8
 8002b84:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	486a      	ldr	r0, [pc, #424]	; (8002d38 <HAL_UART_MspInit+0x220>)
 8002b8e:	f000 fbe3 	bl	8003358 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	2034      	movs	r0, #52	; 0x34
 8002b98:	f000 fb15 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002b9c:	2034      	movs	r0, #52	; 0x34
 8002b9e:	f000 fb2e 	bl	80031fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002ba2:	e167      	b.n	8002e74 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==UART5)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a64      	ldr	r2, [pc, #400]	; (8002d3c <HAL_UART_MspInit+0x224>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d153      	bne.n	8002c56 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb2:	4b60      	ldr	r3, [pc, #384]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a5f      	ldr	r2, [pc, #380]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002bb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b5d      	ldr	r3, [pc, #372]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bce:	4b59      	ldr	r3, [pc, #356]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bea:	4b52      	ldr	r3, [pc, #328]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a51      	ldr	r2, [pc, #324]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c06:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c10:	2303      	movs	r3, #3
 8002c12:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c14:	2308      	movs	r3, #8
 8002c16:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4848      	ldr	r0, [pc, #288]	; (8002d40 <HAL_UART_MspInit+0x228>)
 8002c20:	f000 fb9a 	bl	8003358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c24:	2304      	movs	r3, #4
 8002c26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c34:	2308      	movs	r3, #8
 8002c36:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4841      	ldr	r0, [pc, #260]	; (8002d44 <HAL_UART_MspInit+0x22c>)
 8002c40:	f000 fb8a 	bl	8003358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	2035      	movs	r0, #53	; 0x35
 8002c4a:	f000 fabc 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002c4e:	2035      	movs	r0, #53	; 0x35
 8002c50:	f000 fad5 	bl	80031fe <HAL_NVIC_EnableIRQ>
}
 8002c54:	e10e      	b.n	8002e74 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <HAL_UART_MspInit+0x230>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d135      	bne.n	8002ccc <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c64:	4b33      	ldr	r3, [pc, #204]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	4a32      	ldr	r2, [pc, #200]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002c6a:	f043 0310 	orr.w	r3, r3, #16
 8002c6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c70:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c80:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a2b      	ldr	r2, [pc, #172]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c98:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002caa:	2307      	movs	r3, #7
 8002cac:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4820      	ldr	r0, [pc, #128]	; (8002d38 <HAL_UART_MspInit+0x220>)
 8002cb6:	f000 fb4f 	bl	8003358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2025      	movs	r0, #37	; 0x25
 8002cc0:	f000 fa81 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cc4:	2025      	movs	r0, #37	; 0x25
 8002cc6:	f000 fa9a 	bl	80031fe <HAL_NVIC_EnableIRQ>
}
 8002cca:	e0d3      	b.n	8002e74 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_UART_MspInit+0x234>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d13c      	bne.n	8002d50 <HAL_UART_MspInit+0x238>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a0e      	ldr	r2, [pc, #56]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_UART_MspInit+0x21c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d0e:	230c      	movs	r3, #12
 8002d10:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d1e:	2307      	movs	r3, #7
 8002d20:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d26:	4619      	mov	r1, r3
 8002d28:	4803      	ldr	r0, [pc, #12]	; (8002d38 <HAL_UART_MspInit+0x220>)
 8002d2a:	f000 fb15 	bl	8003358 <HAL_GPIO_Init>
}
 8002d2e:	e0a1      	b.n	8002e74 <HAL_UART_MspInit+0x35c>
 8002d30:	40004c00 	.word	0x40004c00
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40005000 	.word	0x40005000
 8002d40:	40020800 	.word	0x40020800
 8002d44:	40020c00 	.word	0x40020c00
 8002d48:	40011000 	.word	0x40011000
 8002d4c:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a49      	ldr	r2, [pc, #292]	; (8002e7c <HAL_UART_MspInit+0x364>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d153      	bne.n	8002e02 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	4b48      	ldr	r3, [pc, #288]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a47      	ldr	r2, [pc, #284]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b45      	ldr	r3, [pc, #276]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a39      	ldr	r2, [pc, #228]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002dae:	2320      	movs	r3, #32
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	482e      	ldr	r0, [pc, #184]	; (8002e84 <HAL_UART_MspInit+0x36c>)
 8002dca:	f000 fac5 	bl	8003358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002de0:	2307      	movs	r3, #7
 8002de2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002de8:	4619      	mov	r1, r3
 8002dea:	4827      	ldr	r0, [pc, #156]	; (8002e88 <HAL_UART_MspInit+0x370>)
 8002dec:	f000 fab4 	bl	8003358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2100      	movs	r1, #0
 8002df4:	2027      	movs	r0, #39	; 0x27
 8002df6:	f000 f9e6 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002dfa:	2027      	movs	r0, #39	; 0x27
 8002dfc:	f000 f9ff 	bl	80031fe <HAL_NVIC_EnableIRQ>
}
 8002e00:	e038      	b.n	8002e74 <HAL_UART_MspInit+0x35c>
  else if(uartHandle->Instance==USART6)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_UART_MspInit+0x374>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d133      	bne.n	8002e74 <HAL_UART_MspInit+0x35c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002e16:	f043 0320 	orr.w	r3, r3, #32
 8002e1a:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	6313      	str	r3, [r2, #48]	; 0x30
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_UART_MspInit+0x368>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e44:	23c0      	movs	r3, #192	; 0xc0
 8002e46:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e54:	2308      	movs	r3, #8
 8002e56:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4809      	ldr	r0, [pc, #36]	; (8002e84 <HAL_UART_MspInit+0x36c>)
 8002e60:	f000 fa7a 	bl	8003358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2100      	movs	r1, #0
 8002e68:	2047      	movs	r0, #71	; 0x47
 8002e6a:	f000 f9ac 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e6e:	2047      	movs	r0, #71	; 0x47
 8002e70:	f000 f9c5 	bl	80031fe <HAL_NVIC_EnableIRQ>
}
 8002e74:	bf00      	nop
 8002e76:	3758      	adds	r7, #88	; 0x58
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40004800 	.word	0x40004800
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020400 	.word	0x40020400
 8002e8c:	40011400 	.word	0x40011400

08002e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e94:	480d      	ldr	r0, [pc, #52]	; (8002ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e96:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e9c:	e002      	b.n	8002ea4 <LoopCopyDataInit>

08002e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea2:	3304      	adds	r3, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea8:	d3f9      	bcc.n	8002e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002eac:	4c0b      	ldr	r4, [pc, #44]	; (8002edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb0:	e001      	b.n	8002eb6 <LoopFillZerobss>

08002eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb4:	3204      	adds	r2, #4

08002eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb8:	d3fb      	bcc.n	8002eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eba:	f7ff fd17 	bl	80028ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ebe:	f002 fa5f 	bl	8005380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ec2:	f7fd fc6d 	bl	80007a0 <main>
  bx  lr    
 8002ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002ed4:	08006e7c 	.word	0x08006e7c
  ldr r2, =_sbss
 8002ed8:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8002edc:	200065dc 	.word	0x200065dc

08002ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee0:	e7fe      	b.n	8002ee0 <ADC_IRQHandler>
	...

08002ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee8:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_Init+0x40>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <HAL_Init+0x40>)
 8002eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_Init+0x40>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <HAL_Init+0x40>)
 8002efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_Init+0x40>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_Init+0x40>)
 8002f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	f000 f94f 	bl	80031b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f12:	2000      	movs	r0, #0
 8002f14:	f000 f808 	bl	8002f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f18:	f7ff fb9e 	bl	8002658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023c00 	.word	0x40023c00

08002f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_InitTick+0x54>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_InitTick+0x58>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f967 	bl	800321a <HAL_SYSTICK_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00e      	b.n	8002f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d80a      	bhi.n	8002f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f000 f92f 	bl	80031c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f68:	4a06      	ldr	r2, [pc, #24]	; (8002f84 <HAL_InitTick+0x5c>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000094 	.word	0x20000094
 8002f80:	2000009c 	.word	0x2000009c
 8002f84:	20000098 	.word	0x20000098

08002f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_IncTick+0x20>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_IncTick+0x24>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_IncTick+0x24>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	2000009c 	.word	0x2000009c
 8002fac:	200065c8 	.word	0x200065c8

08002fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_GetTick+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	200065c8 	.word	0x200065c8

08002fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff ffee 	bl	8002fb0 <HAL_GetTick>
 8002fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d005      	beq.n	8002fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_Delay+0x44>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fee:	bf00      	nop
 8002ff0:	f7ff ffde 	bl	8002fb0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d8f7      	bhi.n	8002ff0 <HAL_Delay+0x28>
  {
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000009c 	.word	0x2000009c

08003010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800303c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <__NVIC_GetPriorityGrouping+0x18>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0307 	and.w	r3, r3, #7
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	db0b      	blt.n	800309e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4907      	ldr	r1, [pc, #28]	; (80030ac <__NVIC_EnableIRQ+0x38>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2001      	movs	r0, #1
 8003096:	fa00 f202 	lsl.w	r2, r0, r2
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000e100 	.word	0xe000e100

080030b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	db0a      	blt.n	80030da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	490c      	ldr	r1, [pc, #48]	; (80030fc <__NVIC_SetPriority+0x4c>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	0112      	lsls	r2, r2, #4
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	440b      	add	r3, r1
 80030d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d8:	e00a      	b.n	80030f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4908      	ldr	r1, [pc, #32]	; (8003100 <__NVIC_SetPriority+0x50>)
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	3b04      	subs	r3, #4
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	440b      	add	r3, r1
 80030ee:	761a      	strb	r2, [r3, #24]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000e100 	.word	0xe000e100
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	; 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f1c3 0307 	rsb	r3, r3, #7
 800311e:	2b04      	cmp	r3, #4
 8003120:	bf28      	it	cs
 8003122:	2304      	movcs	r3, #4
 8003124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3304      	adds	r3, #4
 800312a:	2b06      	cmp	r3, #6
 800312c:	d902      	bls.n	8003134 <NVIC_EncodePriority+0x30>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3b03      	subs	r3, #3
 8003132:	e000      	b.n	8003136 <NVIC_EncodePriority+0x32>
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	f04f 32ff 	mov.w	r2, #4294967295
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43da      	mvns	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800314c:	f04f 31ff 	mov.w	r1, #4294967295
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	43d9      	mvns	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	4313      	orrs	r3, r2
         );
}
 800315e:	4618      	mov	r0, r3
 8003160:	3724      	adds	r7, #36	; 0x24
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800317c:	d301      	bcc.n	8003182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317e:	2301      	movs	r3, #1
 8003180:	e00f      	b.n	80031a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <SysTick_Config+0x40>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318a:	210f      	movs	r1, #15
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	f7ff ff8e 	bl	80030b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <SysTick_Config+0x40>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <SysTick_Config+0x40>)
 800319c:	2207      	movs	r2, #7
 800319e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	e000e010 	.word	0xe000e010

080031b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff29 	bl	8003010 <__NVIC_SetPriorityGrouping>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d8:	f7ff ff3e 	bl	8003058 <__NVIC_GetPriorityGrouping>
 80031dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f7ff ff8e 	bl	8003104 <NVIC_EncodePriority>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff5d 	bl	80030b0 <__NVIC_SetPriority>
}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff31 	bl	8003074 <__NVIC_EnableIRQ>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffa2 	bl	800316c <SysTick_Config>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003240:	f7ff feb6 	bl	8002fb0 <HAL_GetTick>
 8003244:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d008      	beq.n	8003264 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e052      	b.n	800330a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0216 	bic.w	r2, r2, #22
 8003272:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003282:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <HAL_DMA_Abort+0x62>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0208 	bic.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b4:	e013      	b.n	80032de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b6:	f7ff fe7b 	bl	8002fb0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d90c      	bls.n	80032de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e015      	b.n	800330a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e4      	bne.n	80032b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	223f      	movs	r2, #63	; 0x3f
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d004      	beq.n	8003330 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e00c      	b.n	800334a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2205      	movs	r2, #5
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e165      	b.n	8003640 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003374:	2201      	movs	r2, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	f040 8154 	bne.w	800363a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d005      	beq.n	80033aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d130      	bne.n	800340c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 0201 	and.w	r2, r3, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b03      	cmp	r3, #3
 8003416:	d017      	beq.n	8003448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d123      	bne.n	800349c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	08da      	lsrs	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3208      	adds	r2, #8
 800345c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	220f      	movs	r2, #15
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	08da      	lsrs	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3208      	adds	r2, #8
 8003496:	69b9      	ldr	r1, [r7, #24]
 8003498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80ae 	beq.w	800363a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <HAL_GPIO_Init+0x300>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4a5c      	ldr	r2, [pc, #368]	; (8003658 <HAL_GPIO_Init+0x300>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	4b5a      	ldr	r3, [pc, #360]	; (8003658 <HAL_GPIO_Init+0x300>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fa:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_GPIO_Init+0x304>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a4f      	ldr	r2, [pc, #316]	; (8003660 <HAL_GPIO_Init+0x308>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d025      	beq.n	8003572 <HAL_GPIO_Init+0x21a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a4e      	ldr	r2, [pc, #312]	; (8003664 <HAL_GPIO_Init+0x30c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01f      	beq.n	800356e <HAL_GPIO_Init+0x216>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4d      	ldr	r2, [pc, #308]	; (8003668 <HAL_GPIO_Init+0x310>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d019      	beq.n	800356a <HAL_GPIO_Init+0x212>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4c      	ldr	r2, [pc, #304]	; (800366c <HAL_GPIO_Init+0x314>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_GPIO_Init+0x20e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4b      	ldr	r2, [pc, #300]	; (8003670 <HAL_GPIO_Init+0x318>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00d      	beq.n	8003562 <HAL_GPIO_Init+0x20a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4a      	ldr	r2, [pc, #296]	; (8003674 <HAL_GPIO_Init+0x31c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <HAL_GPIO_Init+0x206>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a49      	ldr	r2, [pc, #292]	; (8003678 <HAL_GPIO_Init+0x320>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_GPIO_Init+0x202>
 8003556:	2306      	movs	r3, #6
 8003558:	e00c      	b.n	8003574 <HAL_GPIO_Init+0x21c>
 800355a:	2307      	movs	r3, #7
 800355c:	e00a      	b.n	8003574 <HAL_GPIO_Init+0x21c>
 800355e:	2305      	movs	r3, #5
 8003560:	e008      	b.n	8003574 <HAL_GPIO_Init+0x21c>
 8003562:	2304      	movs	r3, #4
 8003564:	e006      	b.n	8003574 <HAL_GPIO_Init+0x21c>
 8003566:	2303      	movs	r3, #3
 8003568:	e004      	b.n	8003574 <HAL_GPIO_Init+0x21c>
 800356a:	2302      	movs	r3, #2
 800356c:	e002      	b.n	8003574 <HAL_GPIO_Init+0x21c>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_GPIO_Init+0x21c>
 8003572:	2300      	movs	r3, #0
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	f002 0203 	and.w	r2, r2, #3
 800357a:	0092      	lsls	r2, r2, #2
 800357c:	4093      	lsls	r3, r2
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003584:	4935      	ldr	r1, [pc, #212]	; (800365c <HAL_GPIO_Init+0x304>)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	3302      	adds	r3, #2
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003592:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_GPIO_Init+0x324>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035b6:	4a31      	ldr	r2, [pc, #196]	; (800367c <HAL_GPIO_Init+0x324>)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035bc:	4b2f      	ldr	r3, [pc, #188]	; (800367c <HAL_GPIO_Init+0x324>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e0:	4a26      	ldr	r2, [pc, #152]	; (800367c <HAL_GPIO_Init+0x324>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035e6:	4b25      	ldr	r3, [pc, #148]	; (800367c <HAL_GPIO_Init+0x324>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800360a:	4a1c      	ldr	r2, [pc, #112]	; (800367c <HAL_GPIO_Init+0x324>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_GPIO_Init+0x324>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003634:	4a11      	ldr	r2, [pc, #68]	; (800367c <HAL_GPIO_Init+0x324>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3301      	adds	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	f67f ae96 	bls.w	8003374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	40013800 	.word	0x40013800
 8003660:	40020000 	.word	0x40020000
 8003664:	40020400 	.word	0x40020400
 8003668:	40020800 	.word	0x40020800
 800366c:	40020c00 	.word	0x40020c00
 8003670:	40021000 	.word	0x40021000
 8003674:	40021400 	.word	0x40021400
 8003678:	40021800 	.word	0x40021800
 800367c:	40013c00 	.word	0x40013c00

08003680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800369c:	e003      	b.n	80036a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800369e:	887b      	ldrh	r3, [r7, #2]
 80036a0:	041a      	lsls	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	619a      	str	r2, [r3, #24]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0cc      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c8:	4b68      	ldr	r3, [pc, #416]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d90c      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0b8      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a58      	ldr	r2, [pc, #352]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a52      	ldr	r2, [pc, #328]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800372a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372c:	4b50      	ldr	r3, [pc, #320]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	494d      	ldr	r1, [pc, #308]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d044      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d119      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d003      	beq.n	8003772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376e:	2b03      	cmp	r3, #3
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003772:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e06f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e067      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4934      	ldr	r1, [pc, #208]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a4:	f7ff fc04 	bl	8002fb0 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ac:	f7ff fc00 	bl	8002fb0 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e04f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 020c 	and.w	r2, r3, #12
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1eb      	bne.n	80037ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d20c      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e032      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4916      	ldr	r1, [pc, #88]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800383a:	f000 f855 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800383e:	4602      	mov	r2, r0
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	490a      	ldr	r1, [pc, #40]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	5ccb      	ldrb	r3, [r1, r3]
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fb64 	bl	8002f28 <HAL_InitTick>

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023c00 	.word	0x40023c00
 8003870:	40023800 	.word	0x40023800
 8003874:	08006d0c 	.word	0x08006d0c
 8003878:	20000094 	.word	0x20000094
 800387c:	20000098 	.word	0x20000098

08003880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_GetHCLKFreq+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000094 	.word	0x20000094

08003898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800389c:	f7ff fff0 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0a9b      	lsrs	r3, r3, #10
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40023800 	.word	0x40023800
 80038bc:	08006d1c 	.word	0x08006d1c

080038c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038c4:	f7ff ffdc 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	0b5b      	lsrs	r3, r3, #13
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	08006d1c 	.word	0x08006d1c

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ec:	b0ae      	sub	sp, #184	; 0xb8
 80038ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800390e:	4bcb      	ldr	r3, [pc, #812]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b0c      	cmp	r3, #12
 8003918:	f200 8206 	bhi.w	8003d28 <HAL_RCC_GetSysClockFreq+0x440>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <HAL_RCC_GetSysClockFreq+0x3c>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003959 	.word	0x08003959
 8003928:	08003d29 	.word	0x08003d29
 800392c:	08003d29 	.word	0x08003d29
 8003930:	08003d29 	.word	0x08003d29
 8003934:	08003961 	.word	0x08003961
 8003938:	08003d29 	.word	0x08003d29
 800393c:	08003d29 	.word	0x08003d29
 8003940:	08003d29 	.word	0x08003d29
 8003944:	08003969 	.word	0x08003969
 8003948:	08003d29 	.word	0x08003d29
 800394c:	08003d29 	.word	0x08003d29
 8003950:	08003d29 	.word	0x08003d29
 8003954:	08003b59 	.word	0x08003b59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003958:	4bb9      	ldr	r3, [pc, #740]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x358>)
 800395a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800395e:	e1e7      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003960:	4bb8      	ldr	r3, [pc, #736]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003966:	e1e3      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003968:	4bb4      	ldr	r3, [pc, #720]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x354>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003974:	4bb1      	ldr	r3, [pc, #708]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d071      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003980:	4bae      	ldr	r3, [pc, #696]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	2200      	movs	r2, #0
 8003988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800398c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	f04f 0000 	mov.w	r0, #0
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	0159      	lsls	r1, r3, #5
 80039b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b8:	0150      	lsls	r0, r2, #5
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4621      	mov	r1, r4
 80039c0:	1a51      	subs	r1, r2, r1
 80039c2:	6439      	str	r1, [r7, #64]	; 0x40
 80039c4:	4629      	mov	r1, r5
 80039c6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ca:	647b      	str	r3, [r7, #68]	; 0x44
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80039d8:	4649      	mov	r1, r9
 80039da:	018b      	lsls	r3, r1, #6
 80039dc:	4641      	mov	r1, r8
 80039de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039e2:	4641      	mov	r1, r8
 80039e4:	018a      	lsls	r2, r1, #6
 80039e6:	4641      	mov	r1, r8
 80039e8:	1a51      	subs	r1, r2, r1
 80039ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80039ec:	4649      	mov	r1, r9
 80039ee:	eb63 0301 	sbc.w	r3, r3, r1
 80039f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a00:	4649      	mov	r1, r9
 8003a02:	00cb      	lsls	r3, r1, #3
 8003a04:	4641      	mov	r1, r8
 8003a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0a:	4641      	mov	r1, r8
 8003a0c:	00ca      	lsls	r2, r1, #3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	4622      	mov	r2, r4
 8003a16:	189b      	adds	r3, r3, r2
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1a:	462b      	mov	r3, r5
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	eb42 0303 	adc.w	r3, r2, r3
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a30:	4629      	mov	r1, r5
 8003a32:	024b      	lsls	r3, r1, #9
 8003a34:	4621      	mov	r1, r4
 8003a36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	024a      	lsls	r2, r1, #9
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a54:	f7fc fc44 	bl	80002e0 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a62:	e067      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a64:	4b75      	ldr	r3, [pc, #468]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a70:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a7e:	2300      	movs	r3, #0
 8003a80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	0159      	lsls	r1, r3, #5
 8003a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a98:	0150      	lsls	r0, r2, #5
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	1a51      	subs	r1, r2, r1
 8003aa2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ab8:	4649      	mov	r1, r9
 8003aba:	018b      	lsls	r3, r1, #6
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	018a      	lsls	r2, r1, #6
 8003ac6:	4641      	mov	r1, r8
 8003ac8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003acc:	4649      	mov	r1, r9
 8003ace:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ade:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ae2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae6:	4692      	mov	sl, r2
 8003ae8:	469b      	mov	fp, r3
 8003aea:	4623      	mov	r3, r4
 8003aec:	eb1a 0303 	adds.w	r3, sl, r3
 8003af0:	623b      	str	r3, [r7, #32]
 8003af2:	462b      	mov	r3, r5
 8003af4:	eb4b 0303 	adc.w	r3, fp, r3
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b06:	4629      	mov	r1, r5
 8003b08:	028b      	lsls	r3, r1, #10
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b10:	4621      	mov	r1, r4
 8003b12:	028a      	lsls	r2, r1, #10
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b20:	677a      	str	r2, [r7, #116]	; 0x74
 8003b22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b26:	f7fc fbdb 	bl	80002e0 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4613      	mov	r3, r2
 8003b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b34:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b56:	e0eb      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b58:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b64:	4b35      	ldr	r3, [pc, #212]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d06b      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	2200      	movs	r2, #0
 8003b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	663b      	str	r3, [r7, #96]	; 0x60
 8003b84:	2300      	movs	r3, #0
 8003b86:	667b      	str	r3, [r7, #100]	; 0x64
 8003b88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	462b      	mov	r3, r5
 8003b90:	f04f 0000 	mov.w	r0, #0
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	0159      	lsls	r1, r3, #5
 8003b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b9e:	0150      	lsls	r0, r2, #5
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	1a51      	subs	r1, r2, r1
 8003ba8:	61b9      	str	r1, [r7, #24]
 8003baa:	4629      	mov	r1, r5
 8003bac:	eb63 0301 	sbc.w	r3, r3, r1
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bbe:	4659      	mov	r1, fp
 8003bc0:	018b      	lsls	r3, r1, #6
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bc8:	4651      	mov	r1, sl
 8003bca:	018a      	lsls	r2, r1, #6
 8003bcc:	4651      	mov	r1, sl
 8003bce:	ebb2 0801 	subs.w	r8, r2, r1
 8003bd2:	4659      	mov	r1, fp
 8003bd4:	eb63 0901 	sbc.w	r9, r3, r1
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003be4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bec:	4690      	mov	r8, r2
 8003bee:	4699      	mov	r9, r3
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	eb18 0303 	adds.w	r3, r8, r3
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	eb49 0303 	adc.w	r3, r9, r3
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	024b      	lsls	r3, r1, #9
 8003c10:	4621      	mov	r1, r4
 8003c12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c16:	4621      	mov	r1, r4
 8003c18:	024a      	lsls	r2, r1, #9
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c22:	2200      	movs	r2, #0
 8003c24:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c2c:	f7fc fb58 	bl	80002e0 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4613      	mov	r3, r2
 8003c36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c3a:	e065      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x420>
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c48:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	099b      	lsrs	r3, r3, #6
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	4611      	mov	r1, r2
 8003c54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c58:	653b      	str	r3, [r7, #80]	; 0x50
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c62:	4642      	mov	r2, r8
 8003c64:	464b      	mov	r3, r9
 8003c66:	f04f 0000 	mov.w	r0, #0
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	0159      	lsls	r1, r3, #5
 8003c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c74:	0150      	lsls	r0, r2, #5
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	1a51      	subs	r1, r2, r1
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	4649      	mov	r1, r9
 8003c82:	eb63 0301 	sbc.w	r3, r3, r1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c94:	4659      	mov	r1, fp
 8003c96:	018b      	lsls	r3, r1, #6
 8003c98:	4651      	mov	r1, sl
 8003c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c9e:	4651      	mov	r1, sl
 8003ca0:	018a      	lsls	r2, r1, #6
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	1a54      	subs	r4, r2, r1
 8003ca6:	4659      	mov	r1, fp
 8003ca8:	eb63 0501 	sbc.w	r5, r3, r1
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	00eb      	lsls	r3, r5, #3
 8003cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cba:	00e2      	lsls	r2, r4, #3
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	4643      	mov	r3, r8
 8003cc2:	18e3      	adds	r3, r4, r3
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	eb45 0303 	adc.w	r3, r5, r3
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	028b      	lsls	r3, r1, #10
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	028a      	lsls	r2, r1, #10
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cf6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cfa:	f7fc faf1 	bl	80002e0 <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4613      	mov	r3, r2
 8003d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	0f1b      	lsrs	r3, r3, #28
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d26:	e003      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	37b8      	adds	r7, #184	; 0xb8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	00f42400 	.word	0x00f42400

08003d48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e28d      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8083 	beq.w	8003e6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d68:	4b94      	ldr	r3, [pc, #592]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d019      	beq.n	8003da8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d74:	4b91      	ldr	r3, [pc, #580]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d80:	4b8e      	ldr	r3, [pc, #568]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8c:	d00c      	beq.n	8003da8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8e:	4b8b      	ldr	r3, [pc, #556]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d96:	2b0c      	cmp	r3, #12
 8003d98:	d112      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9a:	4b88      	ldr	r3, [pc, #544]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da6:	d10b      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da8:	4b84      	ldr	r3, [pc, #528]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d05b      	beq.n	8003e6c <HAL_RCC_OscConfig+0x124>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d157      	bne.n	8003e6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e25a      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x90>
 8003dca:	4b7c      	ldr	r3, [pc, #496]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7b      	ldr	r2, [pc, #492]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e01d      	b.n	8003e14 <HAL_RCC_OscConfig+0xcc>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0xb4>
 8003de2:	4b76      	ldr	r3, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a75      	ldr	r2, [pc, #468]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b73      	ldr	r3, [pc, #460]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a72      	ldr	r2, [pc, #456]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0xcc>
 8003dfc:	4b6f      	ldr	r3, [pc, #444]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6e      	ldr	r2, [pc, #440]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b6c      	ldr	r3, [pc, #432]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6b      	ldr	r2, [pc, #428]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7ff f8c8 	bl	8002fb0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e24:	f7ff f8c4 	bl	8002fb0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e21f      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	4b61      	ldr	r3, [pc, #388]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0xdc>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7ff f8b4 	bl	8002fb0 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7ff f8b0 	bl	8002fb0 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e20b      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5e:	4b57      	ldr	r3, [pc, #348]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x104>
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d06f      	beq.n	8003f5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e7a:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d017      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e86:	4b4d      	ldr	r3, [pc, #308]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d105      	bne.n	8003e9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e92:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eaa:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d116      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_RCC_OscConfig+0x186>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e1d3      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4937      	ldr	r1, [pc, #220]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	e03a      	b.n	8003f5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7ff f85d 	bl	8002fb0 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efa:	f7ff f859 	bl	8002fb0 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1b4      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4925      	ldr	r1, [pc, #148]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	e015      	b.n	8003f5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7ff f83c 	bl	8002fb0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7ff f838 	bl	8002fb0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e193      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d036      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_RCC_OscConfig+0x27c>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7ff f81c 	bl	8002fb0 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7ff f818 	bl	8002fb0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e173      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x234>
 8003f9a:	e01b      	b.n	8003fd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa2:	f7ff f805 	bl	8002fb0 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	e00e      	b.n	8003fc8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003faa:	f7ff f801 	bl	8002fb0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d907      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e15c      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	42470000 	.word	0x42470000
 8003fc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	4b8a      	ldr	r3, [pc, #552]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8003fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ea      	bne.n	8003faa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8097 	beq.w	8004110 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b83      	ldr	r3, [pc, #524]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b7f      	ldr	r3, [pc, #508]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a7e      	ldr	r2, [pc, #504]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	4b7c      	ldr	r3, [pc, #496]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b79      	ldr	r3, [pc, #484]	; (80041f8 <HAL_RCC_OscConfig+0x4b0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d118      	bne.n	8004050 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401e:	4b76      	ldr	r3, [pc, #472]	; (80041f8 <HAL_RCC_OscConfig+0x4b0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a75      	ldr	r2, [pc, #468]	; (80041f8 <HAL_RCC_OscConfig+0x4b0>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402a:	f7fe ffc1 	bl	8002fb0 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fe ffbd 	bl	8002fb0 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e118      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	4b6c      	ldr	r3, [pc, #432]	; (80041f8 <HAL_RCC_OscConfig+0x4b0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d106      	bne.n	8004066 <HAL_RCC_OscConfig+0x31e>
 8004058:	4b66      	ldr	r3, [pc, #408]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	e01c      	b.n	80040a0 <HAL_RCC_OscConfig+0x358>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b05      	cmp	r3, #5
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x340>
 800406e:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a60      	ldr	r2, [pc, #384]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	4b5e      	ldr	r3, [pc, #376]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	4a5d      	ldr	r2, [pc, #372]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6713      	str	r3, [r2, #112]	; 0x70
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0x358>
 8004088:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4a59      	ldr	r2, [pc, #356]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	6713      	str	r3, [r2, #112]	; 0x70
 8004094:	4b57      	ldr	r3, [pc, #348]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a56      	ldr	r2, [pc, #344]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 800409a:	f023 0304 	bic.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d015      	beq.n	80040d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fe ff82 	bl	8002fb0 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fe ff7e 	bl	8002fb0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0d7      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c6:	4b4b      	ldr	r3, [pc, #300]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ee      	beq.n	80040b0 <HAL_RCC_OscConfig+0x368>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7fe ff6c 	bl	8002fb0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fe ff68 	bl	8002fb0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0c1      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f2:	4b40      	ldr	r3, [pc, #256]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ee      	bne.n	80040dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	4a3a      	ldr	r2, [pc, #232]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80ad 	beq.w	8004274 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800411a:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b08      	cmp	r3, #8
 8004124:	d060      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d145      	bne.n	80041ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_RCC_OscConfig+0x4b4>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe ff3c 	bl	8002fb0 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413c:	f7fe ff38 	bl	8002fb0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e093      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414e:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	3b01      	subs	r3, #1
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	071b      	lsls	r3, r3, #28
 8004186:	491b      	ldr	r1, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x4b4>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004192:	f7fe ff0d 	bl	8002fb0 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419a:	f7fe ff09 	bl	8002fb0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e064      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ac:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x452>
 80041b8:	e05c      	b.n	8004274 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_RCC_OscConfig+0x4b4>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fe fef6 	bl	8002fb0 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe fef2 	bl	8002fb0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e04d      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x480>
 80041e6:	e045      	b.n	8004274 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e040      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40007000 	.word	0x40007000
 80041fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <HAL_RCC_OscConfig+0x538>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d030      	beq.n	8004270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d129      	bne.n	8004270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d122      	bne.n	8004270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004238:	4293      	cmp	r3, r2
 800423a:	d119      	bne.n	8004270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	085b      	lsrs	r3, r3, #1
 8004248:	3b01      	subs	r3, #1
 800424a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d10f      	bne.n	8004270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d107      	bne.n	8004270 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800

08004284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e03f      	b.n	8004316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fe fc34 	bl	8002b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fddf 	bl	8004e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b08a      	sub	sp, #40	; 0x28
 8004322:	af02      	add	r7, sp, #8
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b20      	cmp	r3, #32
 800433c:	d17c      	bne.n	8004438 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_UART_Transmit+0x2c>
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e075      	b.n	800443a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_UART_Transmit+0x3e>
 8004358:	2302      	movs	r3, #2
 800435a:	e06e      	b.n	800443a <HAL_UART_Transmit+0x11c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2221      	movs	r2, #33	; 0x21
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004372:	f7fe fe1d 	bl	8002fb0 <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	88fa      	ldrh	r2, [r7, #6]
 800437c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	d108      	bne.n	80043a0 <HAL_UART_Transmit+0x82>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d104      	bne.n	80043a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	e003      	b.n	80043a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043b0:	e02a      	b.n	8004408 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fb1f 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e036      	b.n	800443a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	3302      	adds	r3, #2
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	e007      	b.n	80043fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	3301      	adds	r3, #1
 80043f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1cf      	bne.n	80043b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 faef 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e006      	b.n	800443a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	4613      	mov	r3, r2
 800444e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b20      	cmp	r3, #32
 800445a:	d11d      	bne.n	8004498 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_UART_Receive_IT+0x26>
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e016      	b.n	800449a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_UART_Receive_IT+0x38>
 8004476:	2302      	movs	r3, #2
 8004478:	e00f      	b.n	800449a <HAL_UART_Receive_IT+0x58>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	461a      	mov	r2, r3
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fb24 	bl	8004adc <UART_Start_Receive_IT>
 8004494:	4603      	mov	r3, r0
 8004496:	e000      	b.n	800449a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004498:	2302      	movs	r3, #2
  }
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b0ba      	sub	sp, #232	; 0xe8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <HAL_UART_IRQHandler+0x66>
 80044f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fc07 	bl	8004d16 <UART_Receive_IT>
      return;
 8004508:	e256      	b.n	80049b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800450a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80de 	beq.w	80046d0 <HAL_UART_IRQHandler+0x22c>
 8004514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004524:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80d1 	beq.w	80046d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_UART_IRQHandler+0xae>
 800453a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_UART_IRQHandler+0xd2>
 800455e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f043 0202 	orr.w	r2, r3, #2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00b      	beq.n	800459a <HAL_UART_IRQHandler+0xf6>
 8004582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f043 0204 	orr.w	r2, r3, #4
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d011      	beq.n	80045ca <HAL_UART_IRQHandler+0x126>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f043 0208 	orr.w	r2, r3, #8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 81ed 	beq.w	80049ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_UART_IRQHandler+0x14e>
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fb92 	bl	8004d16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d103      	bne.n	800461e <HAL_UART_IRQHandler+0x17a>
 8004616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d04f      	beq.n	80046be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa9a 	bl	8004b58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d141      	bne.n	80046b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3314      	adds	r3, #20
 8004638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800464c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3314      	adds	r3, #20
 800465a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800465e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800466a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1d9      	bne.n	8004632 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	2b00      	cmp	r3, #0
 8004684:	d013      	beq.n	80046ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	4a7d      	ldr	r2, [pc, #500]	; (8004880 <HAL_UART_IRQHandler+0x3dc>)
 800468c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fe3d 	bl	8003312 <HAL_DMA_Abort_IT>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046a8:	4610      	mov	r0, r2
 80046aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	e00e      	b.n	80046cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f990 	bl	80049d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	e00a      	b.n	80046cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f98c 	bl	80049d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	e006      	b.n	80046cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f988 	bl	80049d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046ca:	e170      	b.n	80049ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	bf00      	nop
    return;
 80046ce:	e16e      	b.n	80049ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	f040 814a 	bne.w	800496e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8143 	beq.w	800496e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 813c 	beq.w	800496e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	f040 80b4 	bne.w	8004884 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004728:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8140 	beq.w	80049b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800473a:	429a      	cmp	r2, r3
 800473c:	f080 8139 	bcs.w	80049b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004746:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004752:	f000 8088 	beq.w	8004866 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800476c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004782:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800478e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800479a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1d9      	bne.n	8004756 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3314      	adds	r3, #20
 80047c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e1      	bne.n	80047a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3314      	adds	r3, #20
 80047e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3314      	adds	r3, #20
 80047fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004802:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004804:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004808:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e3      	bne.n	80047de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004836:	f023 0310 	bic.w	r3, r3, #16
 800483a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004848:	65ba      	str	r2, [r7, #88]	; 0x58
 800484a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800484e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e3      	bne.n	8004824 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	4618      	mov	r0, r3
 8004862:	f7fe fce6 	bl	8003232 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800486e:	b29b      	uxth	r3, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	b29b      	uxth	r3, r3
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8b6 	bl	80049e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800487c:	e099      	b.n	80049b2 <HAL_UART_IRQHandler+0x50e>
 800487e:	bf00      	nop
 8004880:	08004c1f 	.word	0x08004c1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800488c:	b29b      	uxth	r3, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 808b 	beq.w	80049b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8086 	beq.w	80049b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048ce:	647a      	str	r2, [r7, #68]	; 0x44
 80048d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e3      	bne.n	80048aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	623b      	str	r3, [r7, #32]
   return(result);
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004906:	633a      	str	r2, [r7, #48]	; 0x30
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800490c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e3      	bne.n	80048e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	60fb      	str	r3, [r7, #12]
   return(result);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0310 	bic.w	r3, r3, #16
 800493e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69b9      	ldr	r1, [r7, #24]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	617b      	str	r3, [r7, #20]
   return(result);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e3      	bne.n	8004928 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f83e 	bl	80049e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800496c:	e023      	b.n	80049b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800496e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_UART_IRQHandler+0x4ea>
 800497a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f95d 	bl	8004c46 <UART_Transmit_IT>
    return;
 800498c:	e014      	b.n	80049b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00e      	beq.n	80049b8 <HAL_UART_IRQHandler+0x514>
 800499a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f99d 	bl	8004ce6 <UART_EndTransmit_IT>
    return;
 80049ac:	e004      	b.n	80049b8 <HAL_UART_IRQHandler+0x514>
    return;
 80049ae:	bf00      	nop
 80049b0:	e002      	b.n	80049b8 <HAL_UART_IRQHandler+0x514>
      return;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <HAL_UART_IRQHandler+0x514>
      return;
 80049b6:	bf00      	nop
  }
}
 80049b8:	37e8      	adds	r7, #232	; 0xe8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop

080049c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b090      	sub	sp, #64	; 0x40
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a10:	e050      	b.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d04c      	beq.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a20:	f7fe fac6 	bl	8002fb0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d241      	bcs.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a50:	637a      	str	r2, [r7, #52]	; 0x34
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3314      	adds	r3, #20
 8004a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	613b      	str	r3, [r7, #16]
   return(result);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3314      	adds	r3, #20
 8004a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a84:	623a      	str	r2, [r7, #32]
 8004a86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	69f9      	ldr	r1, [r7, #28]
 8004a8a:	6a3a      	ldr	r2, [r7, #32]
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e00f      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4013      	ands	r3, r2
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d09f      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3740      	adds	r7, #64	; 0x40
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	88fa      	ldrh	r2, [r7, #6]
 8004afa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2222      	movs	r2, #34	; 0x22
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0220 	orr.w	r2, r2, #32
 8004b48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b095      	sub	sp, #84	; 0x54
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b80:	643a      	str	r2, [r7, #64]	; 0x40
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3314      	adds	r3, #20
 8004b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3314      	adds	r3, #20
 8004bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d119      	bne.n	8004c04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f023 0310 	bic.w	r3, r3, #16
 8004be6:	647b      	str	r3, [r7, #68]	; 0x44
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf0:	61ba      	str	r2, [r7, #24]
 8004bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6979      	ldr	r1, [r7, #20]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c12:	bf00      	nop
 8004c14:	3754      	adds	r7, #84	; 0x54
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff fecb 	bl	80049d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b21      	cmp	r3, #33	; 0x21
 8004c58:	d13e      	bne.n	8004cd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c62:	d114      	bne.n	8004c8e <UART_Transmit_IT+0x48>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d110      	bne.n	8004c8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	1c9a      	adds	r2, r3, #2
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]
 8004c8c:	e008      	b.n	8004ca0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	1c59      	adds	r1, r3, #1
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6211      	str	r1, [r2, #32]
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	4619      	mov	r1, r3
 8004cae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10f      	bne.n	8004cd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e000      	b.n	8004cda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cd8:	2302      	movs	r3, #2
  }
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fe5a 	bl	80049c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b08c      	sub	sp, #48	; 0x30
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b22      	cmp	r3, #34	; 0x22
 8004d28:	f040 80ab 	bne.w	8004e82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d34:	d117      	bne.n	8004d66 <UART_Receive_IT+0x50>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d113      	bne.n	8004d66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	1c9a      	adds	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
 8004d64:	e026      	b.n	8004db4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d78:	d007      	beq.n	8004d8a <UART_Receive_IT+0x74>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <UART_Receive_IT+0x82>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	e008      	b.n	8004daa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d15a      	bne.n	8004e7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0220 	bic.w	r2, r2, #32
 8004dd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d135      	bne.n	8004e74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f023 0310 	bic.w	r3, r3, #16
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	623a      	str	r2, [r7, #32]
 8004e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	69f9      	ldr	r1, [r7, #28]
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e5      	bne.n	8004e0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d10a      	bne.n	8004e66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff fdbb 	bl	80049e8 <HAL_UARTEx_RxEventCallback>
 8004e72:	e002      	b.n	8004e7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7fb fce3 	bl	8000840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e002      	b.n	8004e84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
  }
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3730      	adds	r7, #48	; 0x30
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b0c0      	sub	sp, #256	; 0x100
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	68d9      	ldr	r1, [r3, #12]
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	ea40 0301 	orr.w	r3, r0, r1
 8004eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ee4:	f021 010c 	bic.w	r1, r1, #12
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f06:	6999      	ldr	r1, [r3, #24]
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	ea40 0301 	orr.w	r3, r0, r1
 8004f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b8f      	ldr	r3, [pc, #572]	; (8005158 <UART_SetConfig+0x2cc>)
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d005      	beq.n	8004f2c <UART_SetConfig+0xa0>
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b8d      	ldr	r3, [pc, #564]	; (800515c <UART_SetConfig+0x2d0>)
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d104      	bne.n	8004f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe fcc8 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8004f30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f34:	e003      	b.n	8004f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f36:	f7fe fcaf 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8004f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f48:	f040 810c 	bne.w	8005164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f5e:	4622      	mov	r2, r4
 8004f60:	462b      	mov	r3, r5
 8004f62:	1891      	adds	r1, r2, r2
 8004f64:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f66:	415b      	adcs	r3, r3
 8004f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f6e:	4621      	mov	r1, r4
 8004f70:	eb12 0801 	adds.w	r8, r2, r1
 8004f74:	4629      	mov	r1, r5
 8004f76:	eb43 0901 	adc.w	r9, r3, r1
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f8e:	4690      	mov	r8, r2
 8004f90:	4699      	mov	r9, r3
 8004f92:	4623      	mov	r3, r4
 8004f94:	eb18 0303 	adds.w	r3, r8, r3
 8004f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	eb49 0303 	adc.w	r3, r9, r3
 8004fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fba:	460b      	mov	r3, r1
 8004fbc:	18db      	adds	r3, r3, r3
 8004fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	eb42 0303 	adc.w	r3, r2, r3
 8004fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8004fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fd0:	f7fb f986 	bl	80002e0 <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4b61      	ldr	r3, [pc, #388]	; (8005160 <UART_SetConfig+0x2d4>)
 8004fda:	fba3 2302 	umull	r2, r3, r3, r2
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	011c      	lsls	r4, r3, #4
 8004fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	1891      	adds	r1, r2, r2
 8004ffa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ffc:	415b      	adcs	r3, r3
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005004:	4641      	mov	r1, r8
 8005006:	eb12 0a01 	adds.w	sl, r2, r1
 800500a:	4649      	mov	r1, r9
 800500c:	eb43 0b01 	adc.w	fp, r3, r1
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800501c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005024:	4692      	mov	sl, r2
 8005026:	469b      	mov	fp, r3
 8005028:	4643      	mov	r3, r8
 800502a:	eb1a 0303 	adds.w	r3, sl, r3
 800502e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005032:	464b      	mov	r3, r9
 8005034:	eb4b 0303 	adc.w	r3, fp, r3
 8005038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005048:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800504c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005050:	460b      	mov	r3, r1
 8005052:	18db      	adds	r3, r3, r3
 8005054:	643b      	str	r3, [r7, #64]	; 0x40
 8005056:	4613      	mov	r3, r2
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	647b      	str	r3, [r7, #68]	; 0x44
 800505e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005066:	f7fb f93b 	bl	80002e0 <__aeabi_uldivmod>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4611      	mov	r1, r2
 8005070:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <UART_SetConfig+0x2d4>)
 8005072:	fba3 2301 	umull	r2, r3, r3, r1
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2264      	movs	r2, #100	; 0x64
 800507a:	fb02 f303 	mul.w	r3, r2, r3
 800507e:	1acb      	subs	r3, r1, r3
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005086:	4b36      	ldr	r3, [pc, #216]	; (8005160 <UART_SetConfig+0x2d4>)
 8005088:	fba3 2302 	umull	r2, r3, r3, r2
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005094:	441c      	add	r4, r3
 8005096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509a:	2200      	movs	r2, #0
 800509c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050a8:	4642      	mov	r2, r8
 80050aa:	464b      	mov	r3, r9
 80050ac:	1891      	adds	r1, r2, r2
 80050ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80050b0:	415b      	adcs	r3, r3
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050b8:	4641      	mov	r1, r8
 80050ba:	1851      	adds	r1, r2, r1
 80050bc:	6339      	str	r1, [r7, #48]	; 0x30
 80050be:	4649      	mov	r1, r9
 80050c0:	414b      	adcs	r3, r1
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050d0:	4659      	mov	r1, fp
 80050d2:	00cb      	lsls	r3, r1, #3
 80050d4:	4651      	mov	r1, sl
 80050d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050da:	4651      	mov	r1, sl
 80050dc:	00ca      	lsls	r2, r1, #3
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	4642      	mov	r2, r8
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050ec:	464b      	mov	r3, r9
 80050ee:	460a      	mov	r2, r1
 80050f0:	eb42 0303 	adc.w	r3, r2, r3
 80050f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005104:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800510c:	460b      	mov	r3, r1
 800510e:	18db      	adds	r3, r3, r3
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
 8005112:	4613      	mov	r3, r2
 8005114:	eb42 0303 	adc.w	r3, r2, r3
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800511e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005122:	f7fb f8dd 	bl	80002e0 <__aeabi_uldivmod>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <UART_SetConfig+0x2d4>)
 800512c:	fba3 1302 	umull	r1, r3, r3, r2
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	2164      	movs	r1, #100	; 0x64
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	3332      	adds	r3, #50	; 0x32
 800513e:	4a08      	ldr	r2, [pc, #32]	; (8005160 <UART_SetConfig+0x2d4>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	f003 0207 	and.w	r2, r3, #7
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4422      	add	r2, r4
 8005152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005154:	e105      	b.n	8005362 <UART_SetConfig+0x4d6>
 8005156:	bf00      	nop
 8005158:	40011000 	.word	0x40011000
 800515c:	40011400 	.word	0x40011400
 8005160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005168:	2200      	movs	r2, #0
 800516a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800516e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005176:	4642      	mov	r2, r8
 8005178:	464b      	mov	r3, r9
 800517a:	1891      	adds	r1, r2, r2
 800517c:	6239      	str	r1, [r7, #32]
 800517e:	415b      	adcs	r3, r3
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
 8005182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005186:	4641      	mov	r1, r8
 8005188:	1854      	adds	r4, r2, r1
 800518a:	4649      	mov	r1, r9
 800518c:	eb43 0501 	adc.w	r5, r3, r1
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	00eb      	lsls	r3, r5, #3
 800519a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519e:	00e2      	lsls	r2, r4, #3
 80051a0:	4614      	mov	r4, r2
 80051a2:	461d      	mov	r5, r3
 80051a4:	4643      	mov	r3, r8
 80051a6:	18e3      	adds	r3, r4, r3
 80051a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051ac:	464b      	mov	r3, r9
 80051ae:	eb45 0303 	adc.w	r3, r5, r3
 80051b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051d2:	4629      	mov	r1, r5
 80051d4:	008b      	lsls	r3, r1, #2
 80051d6:	4621      	mov	r1, r4
 80051d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051dc:	4621      	mov	r1, r4
 80051de:	008a      	lsls	r2, r1, #2
 80051e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051e4:	f7fb f87c 	bl	80002e0 <__aeabi_uldivmod>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4b60      	ldr	r3, [pc, #384]	; (8005370 <UART_SetConfig+0x4e4>)
 80051ee:	fba3 2302 	umull	r2, r3, r3, r2
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	011c      	lsls	r4, r3, #4
 80051f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005200:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	1891      	adds	r1, r2, r2
 800520e:	61b9      	str	r1, [r7, #24]
 8005210:	415b      	adcs	r3, r3
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005218:	4641      	mov	r1, r8
 800521a:	1851      	adds	r1, r2, r1
 800521c:	6139      	str	r1, [r7, #16]
 800521e:	4649      	mov	r1, r9
 8005220:	414b      	adcs	r3, r1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005230:	4659      	mov	r1, fp
 8005232:	00cb      	lsls	r3, r1, #3
 8005234:	4651      	mov	r1, sl
 8005236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523a:	4651      	mov	r1, sl
 800523c:	00ca      	lsls	r2, r1, #3
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	4603      	mov	r3, r0
 8005244:	4642      	mov	r2, r8
 8005246:	189b      	adds	r3, r3, r2
 8005248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800524c:	464b      	mov	r3, r9
 800524e:	460a      	mov	r2, r1
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	67bb      	str	r3, [r7, #120]	; 0x78
 8005262:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005270:	4649      	mov	r1, r9
 8005272:	008b      	lsls	r3, r1, #2
 8005274:	4641      	mov	r1, r8
 8005276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527a:	4641      	mov	r1, r8
 800527c:	008a      	lsls	r2, r1, #2
 800527e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005282:	f7fb f82d 	bl	80002e0 <__aeabi_uldivmod>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <UART_SetConfig+0x4e4>)
 800528c:	fba3 1302 	umull	r1, r3, r3, r2
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	2164      	movs	r1, #100	; 0x64
 8005294:	fb01 f303 	mul.w	r3, r1, r3
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	3332      	adds	r3, #50	; 0x32
 800529e:	4a34      	ldr	r2, [pc, #208]	; (8005370 <UART_SetConfig+0x4e4>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052aa:	441c      	add	r4, r3
 80052ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b0:	2200      	movs	r2, #0
 80052b2:	673b      	str	r3, [r7, #112]	; 0x70
 80052b4:	677a      	str	r2, [r7, #116]	; 0x74
 80052b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052ba:	4642      	mov	r2, r8
 80052bc:	464b      	mov	r3, r9
 80052be:	1891      	adds	r1, r2, r2
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	415b      	adcs	r3, r3
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ca:	4641      	mov	r1, r8
 80052cc:	1851      	adds	r1, r2, r1
 80052ce:	6039      	str	r1, [r7, #0]
 80052d0:	4649      	mov	r1, r9
 80052d2:	414b      	adcs	r3, r1
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052e2:	4659      	mov	r1, fp
 80052e4:	00cb      	lsls	r3, r1, #3
 80052e6:	4651      	mov	r1, sl
 80052e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ec:	4651      	mov	r1, sl
 80052ee:	00ca      	lsls	r2, r1, #3
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	4603      	mov	r3, r0
 80052f6:	4642      	mov	r2, r8
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80052fc:	464b      	mov	r3, r9
 80052fe:	460a      	mov	r2, r1
 8005300:	eb42 0303 	adc.w	r3, r2, r3
 8005304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	663b      	str	r3, [r7, #96]	; 0x60
 8005310:	667a      	str	r2, [r7, #100]	; 0x64
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800531e:	4649      	mov	r1, r9
 8005320:	008b      	lsls	r3, r1, #2
 8005322:	4641      	mov	r1, r8
 8005324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005328:	4641      	mov	r1, r8
 800532a:	008a      	lsls	r2, r1, #2
 800532c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005330:	f7fa ffd6 	bl	80002e0 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <UART_SetConfig+0x4e4>)
 800533a:	fba3 1302 	umull	r1, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2164      	movs	r1, #100	; 0x64
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	3332      	adds	r3, #50	; 0x32
 800534c:	4a08      	ldr	r2, [pc, #32]	; (8005370 <UART_SetConfig+0x4e4>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 020f 	and.w	r2, r3, #15
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4422      	add	r2, r4
 8005360:	609a      	str	r2, [r3, #8]
}
 8005362:	bf00      	nop
 8005364:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536e:	bf00      	nop
 8005370:	51eb851f 	.word	0x51eb851f

08005374 <__errno>:
 8005374:	4b01      	ldr	r3, [pc, #4]	; (800537c <__errno+0x8>)
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	200000a0 	.word	0x200000a0

08005380 <__libc_init_array>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4d0d      	ldr	r5, [pc, #52]	; (80053b8 <__libc_init_array+0x38>)
 8005384:	4c0d      	ldr	r4, [pc, #52]	; (80053bc <__libc_init_array+0x3c>)
 8005386:	1b64      	subs	r4, r4, r5
 8005388:	10a4      	asrs	r4, r4, #2
 800538a:	2600      	movs	r6, #0
 800538c:	42a6      	cmp	r6, r4
 800538e:	d109      	bne.n	80053a4 <__libc_init_array+0x24>
 8005390:	4d0b      	ldr	r5, [pc, #44]	; (80053c0 <__libc_init_array+0x40>)
 8005392:	4c0c      	ldr	r4, [pc, #48]	; (80053c4 <__libc_init_array+0x44>)
 8005394:	f001 f93c 	bl	8006610 <_init>
 8005398:	1b64      	subs	r4, r4, r5
 800539a:	10a4      	asrs	r4, r4, #2
 800539c:	2600      	movs	r6, #0
 800539e:	42a6      	cmp	r6, r4
 80053a0:	d105      	bne.n	80053ae <__libc_init_array+0x2e>
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
 80053a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a8:	4798      	blx	r3
 80053aa:	3601      	adds	r6, #1
 80053ac:	e7ee      	b.n	800538c <__libc_init_array+0xc>
 80053ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b2:	4798      	blx	r3
 80053b4:	3601      	adds	r6, #1
 80053b6:	e7f2      	b.n	800539e <__libc_init_array+0x1e>
 80053b8:	08006e74 	.word	0x08006e74
 80053bc:	08006e74 	.word	0x08006e74
 80053c0:	08006e74 	.word	0x08006e74
 80053c4:	08006e78 	.word	0x08006e78

080053c8 <memset>:
 80053c8:	4402      	add	r2, r0
 80053ca:	4603      	mov	r3, r0
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d100      	bne.n	80053d2 <memset+0xa>
 80053d0:	4770      	bx	lr
 80053d2:	f803 1b01 	strb.w	r1, [r3], #1
 80053d6:	e7f9      	b.n	80053cc <memset+0x4>

080053d8 <iprintf>:
 80053d8:	b40f      	push	{r0, r1, r2, r3}
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <iprintf+0x2c>)
 80053dc:	b513      	push	{r0, r1, r4, lr}
 80053de:	681c      	ldr	r4, [r3, #0]
 80053e0:	b124      	cbz	r4, 80053ec <iprintf+0x14>
 80053e2:	69a3      	ldr	r3, [r4, #24]
 80053e4:	b913      	cbnz	r3, 80053ec <iprintf+0x14>
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 fb10 	bl	8005a0c <__sinit>
 80053ec:	ab05      	add	r3, sp, #20
 80053ee:	9a04      	ldr	r2, [sp, #16]
 80053f0:	68a1      	ldr	r1, [r4, #8]
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fd33 	bl	8005e60 <_vfiprintf_r>
 80053fa:	b002      	add	sp, #8
 80053fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005400:	b004      	add	sp, #16
 8005402:	4770      	bx	lr
 8005404:	200000a0 	.word	0x200000a0

08005408 <_puts_r>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	460e      	mov	r6, r1
 800540c:	4605      	mov	r5, r0
 800540e:	b118      	cbz	r0, 8005418 <_puts_r+0x10>
 8005410:	6983      	ldr	r3, [r0, #24]
 8005412:	b90b      	cbnz	r3, 8005418 <_puts_r+0x10>
 8005414:	f000 fafa 	bl	8005a0c <__sinit>
 8005418:	69ab      	ldr	r3, [r5, #24]
 800541a:	68ac      	ldr	r4, [r5, #8]
 800541c:	b913      	cbnz	r3, 8005424 <_puts_r+0x1c>
 800541e:	4628      	mov	r0, r5
 8005420:	f000 faf4 	bl	8005a0c <__sinit>
 8005424:	4b2c      	ldr	r3, [pc, #176]	; (80054d8 <_puts_r+0xd0>)
 8005426:	429c      	cmp	r4, r3
 8005428:	d120      	bne.n	800546c <_puts_r+0x64>
 800542a:	686c      	ldr	r4, [r5, #4]
 800542c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800542e:	07db      	lsls	r3, r3, #31
 8005430:	d405      	bmi.n	800543e <_puts_r+0x36>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	0598      	lsls	r0, r3, #22
 8005436:	d402      	bmi.n	800543e <_puts_r+0x36>
 8005438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800543a:	f000 fb97 	bl	8005b6c <__retarget_lock_acquire_recursive>
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	0719      	lsls	r1, r3, #28
 8005442:	d51d      	bpl.n	8005480 <_puts_r+0x78>
 8005444:	6923      	ldr	r3, [r4, #16]
 8005446:	b1db      	cbz	r3, 8005480 <_puts_r+0x78>
 8005448:	3e01      	subs	r6, #1
 800544a:	68a3      	ldr	r3, [r4, #8]
 800544c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005450:	3b01      	subs	r3, #1
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	bb39      	cbnz	r1, 80054a6 <_puts_r+0x9e>
 8005456:	2b00      	cmp	r3, #0
 8005458:	da38      	bge.n	80054cc <_puts_r+0xc4>
 800545a:	4622      	mov	r2, r4
 800545c:	210a      	movs	r1, #10
 800545e:	4628      	mov	r0, r5
 8005460:	f000 f8dc 	bl	800561c <__swbuf_r>
 8005464:	3001      	adds	r0, #1
 8005466:	d011      	beq.n	800548c <_puts_r+0x84>
 8005468:	250a      	movs	r5, #10
 800546a:	e011      	b.n	8005490 <_puts_r+0x88>
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <_puts_r+0xd4>)
 800546e:	429c      	cmp	r4, r3
 8005470:	d101      	bne.n	8005476 <_puts_r+0x6e>
 8005472:	68ac      	ldr	r4, [r5, #8]
 8005474:	e7da      	b.n	800542c <_puts_r+0x24>
 8005476:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <_puts_r+0xd8>)
 8005478:	429c      	cmp	r4, r3
 800547a:	bf08      	it	eq
 800547c:	68ec      	ldreq	r4, [r5, #12]
 800547e:	e7d5      	b.n	800542c <_puts_r+0x24>
 8005480:	4621      	mov	r1, r4
 8005482:	4628      	mov	r0, r5
 8005484:	f000 f91c 	bl	80056c0 <__swsetup_r>
 8005488:	2800      	cmp	r0, #0
 800548a:	d0dd      	beq.n	8005448 <_puts_r+0x40>
 800548c:	f04f 35ff 	mov.w	r5, #4294967295
 8005490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005492:	07da      	lsls	r2, r3, #31
 8005494:	d405      	bmi.n	80054a2 <_puts_r+0x9a>
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	059b      	lsls	r3, r3, #22
 800549a:	d402      	bmi.n	80054a2 <_puts_r+0x9a>
 800549c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549e:	f000 fb66 	bl	8005b6e <__retarget_lock_release_recursive>
 80054a2:	4628      	mov	r0, r5
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da04      	bge.n	80054b4 <_puts_r+0xac>
 80054aa:	69a2      	ldr	r2, [r4, #24]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	dc06      	bgt.n	80054be <_puts_r+0xb6>
 80054b0:	290a      	cmp	r1, #10
 80054b2:	d004      	beq.n	80054be <_puts_r+0xb6>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	6022      	str	r2, [r4, #0]
 80054ba:	7019      	strb	r1, [r3, #0]
 80054bc:	e7c5      	b.n	800544a <_puts_r+0x42>
 80054be:	4622      	mov	r2, r4
 80054c0:	4628      	mov	r0, r5
 80054c2:	f000 f8ab 	bl	800561c <__swbuf_r>
 80054c6:	3001      	adds	r0, #1
 80054c8:	d1bf      	bne.n	800544a <_puts_r+0x42>
 80054ca:	e7df      	b.n	800548c <_puts_r+0x84>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	250a      	movs	r5, #10
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	6022      	str	r2, [r4, #0]
 80054d4:	701d      	strb	r5, [r3, #0]
 80054d6:	e7db      	b.n	8005490 <_puts_r+0x88>
 80054d8:	08006df8 	.word	0x08006df8
 80054dc:	08006e18 	.word	0x08006e18
 80054e0:	08006dd8 	.word	0x08006dd8

080054e4 <puts>:
 80054e4:	4b02      	ldr	r3, [pc, #8]	; (80054f0 <puts+0xc>)
 80054e6:	4601      	mov	r1, r0
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	f7ff bf8d 	b.w	8005408 <_puts_r>
 80054ee:	bf00      	nop
 80054f0:	200000a0 	.word	0x200000a0

080054f4 <strcat>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	4602      	mov	r2, r0
 80054f8:	7814      	ldrb	r4, [r2, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	3201      	adds	r2, #1
 80054fe:	2c00      	cmp	r4, #0
 8005500:	d1fa      	bne.n	80054f8 <strcat+0x4>
 8005502:	3b01      	subs	r3, #1
 8005504:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005508:	f803 2f01 	strb.w	r2, [r3, #1]!
 800550c:	2a00      	cmp	r2, #0
 800550e:	d1f9      	bne.n	8005504 <strcat+0x10>
 8005510:	bd10      	pop	{r4, pc}

08005512 <strncpy>:
 8005512:	b510      	push	{r4, lr}
 8005514:	3901      	subs	r1, #1
 8005516:	4603      	mov	r3, r0
 8005518:	b132      	cbz	r2, 8005528 <strncpy+0x16>
 800551a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800551e:	f803 4b01 	strb.w	r4, [r3], #1
 8005522:	3a01      	subs	r2, #1
 8005524:	2c00      	cmp	r4, #0
 8005526:	d1f7      	bne.n	8005518 <strncpy+0x6>
 8005528:	441a      	add	r2, r3
 800552a:	2100      	movs	r1, #0
 800552c:	4293      	cmp	r3, r2
 800552e:	d100      	bne.n	8005532 <strncpy+0x20>
 8005530:	bd10      	pop	{r4, pc}
 8005532:	f803 1b01 	strb.w	r1, [r3], #1
 8005536:	e7f9      	b.n	800552c <strncpy+0x1a>

08005538 <strstr>:
 8005538:	780a      	ldrb	r2, [r1, #0]
 800553a:	b570      	push	{r4, r5, r6, lr}
 800553c:	b96a      	cbnz	r2, 800555a <strstr+0x22>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	429a      	cmp	r2, r3
 8005542:	d109      	bne.n	8005558 <strstr+0x20>
 8005544:	460c      	mov	r4, r1
 8005546:	4605      	mov	r5, r0
 8005548:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f6      	beq.n	800553e <strstr+0x6>
 8005550:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005554:	429e      	cmp	r6, r3
 8005556:	d0f7      	beq.n	8005548 <strstr+0x10>
 8005558:	3001      	adds	r0, #1
 800555a:	7803      	ldrb	r3, [r0, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1ef      	bne.n	8005540 <strstr+0x8>
 8005560:	4618      	mov	r0, r3
 8005562:	e7ec      	b.n	800553e <strstr+0x6>

08005564 <strtok>:
 8005564:	4b16      	ldr	r3, [pc, #88]	; (80055c0 <strtok+0x5c>)
 8005566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005568:	681e      	ldr	r6, [r3, #0]
 800556a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800556c:	4605      	mov	r5, r0
 800556e:	b9fc      	cbnz	r4, 80055b0 <strtok+0x4c>
 8005570:	2050      	movs	r0, #80	; 0x50
 8005572:	9101      	str	r1, [sp, #4]
 8005574:	f000 fb62 	bl	8005c3c <malloc>
 8005578:	9901      	ldr	r1, [sp, #4]
 800557a:	65b0      	str	r0, [r6, #88]	; 0x58
 800557c:	4602      	mov	r2, r0
 800557e:	b920      	cbnz	r0, 800558a <strtok+0x26>
 8005580:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <strtok+0x60>)
 8005582:	4811      	ldr	r0, [pc, #68]	; (80055c8 <strtok+0x64>)
 8005584:	2157      	movs	r1, #87	; 0x57
 8005586:	f000 f909 	bl	800579c <__assert_func>
 800558a:	e9c0 4400 	strd	r4, r4, [r0]
 800558e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005592:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005596:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800559a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800559e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80055a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80055a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80055aa:	6184      	str	r4, [r0, #24]
 80055ac:	7704      	strb	r4, [r0, #28]
 80055ae:	6244      	str	r4, [r0, #36]	; 0x24
 80055b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80055b2:	2301      	movs	r3, #1
 80055b4:	4628      	mov	r0, r5
 80055b6:	b002      	add	sp, #8
 80055b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055bc:	f000 b806 	b.w	80055cc <__strtok_r>
 80055c0:	200000a0 	.word	0x200000a0
 80055c4:	08006d28 	.word	0x08006d28
 80055c8:	08006d3f 	.word	0x08006d3f

080055cc <__strtok_r>:
 80055cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ce:	b908      	cbnz	r0, 80055d4 <__strtok_r+0x8>
 80055d0:	6810      	ldr	r0, [r2, #0]
 80055d2:	b188      	cbz	r0, 80055f8 <__strtok_r+0x2c>
 80055d4:	4604      	mov	r4, r0
 80055d6:	4620      	mov	r0, r4
 80055d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80055dc:	460f      	mov	r7, r1
 80055de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80055e2:	b91e      	cbnz	r6, 80055ec <__strtok_r+0x20>
 80055e4:	b965      	cbnz	r5, 8005600 <__strtok_r+0x34>
 80055e6:	6015      	str	r5, [r2, #0]
 80055e8:	4628      	mov	r0, r5
 80055ea:	e005      	b.n	80055f8 <__strtok_r+0x2c>
 80055ec:	42b5      	cmp	r5, r6
 80055ee:	d1f6      	bne.n	80055de <__strtok_r+0x12>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <__strtok_r+0xa>
 80055f4:	6014      	str	r4, [r2, #0]
 80055f6:	7003      	strb	r3, [r0, #0]
 80055f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fa:	461c      	mov	r4, r3
 80055fc:	e00c      	b.n	8005618 <__strtok_r+0x4c>
 80055fe:	b915      	cbnz	r5, 8005606 <__strtok_r+0x3a>
 8005600:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005604:	460e      	mov	r6, r1
 8005606:	f816 5b01 	ldrb.w	r5, [r6], #1
 800560a:	42ab      	cmp	r3, r5
 800560c:	d1f7      	bne.n	80055fe <__strtok_r+0x32>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f3      	beq.n	80055fa <__strtok_r+0x2e>
 8005612:	2300      	movs	r3, #0
 8005614:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005618:	6014      	str	r4, [r2, #0]
 800561a:	e7ed      	b.n	80055f8 <__strtok_r+0x2c>

0800561c <__swbuf_r>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	460e      	mov	r6, r1
 8005620:	4614      	mov	r4, r2
 8005622:	4605      	mov	r5, r0
 8005624:	b118      	cbz	r0, 800562e <__swbuf_r+0x12>
 8005626:	6983      	ldr	r3, [r0, #24]
 8005628:	b90b      	cbnz	r3, 800562e <__swbuf_r+0x12>
 800562a:	f000 f9ef 	bl	8005a0c <__sinit>
 800562e:	4b21      	ldr	r3, [pc, #132]	; (80056b4 <__swbuf_r+0x98>)
 8005630:	429c      	cmp	r4, r3
 8005632:	d12b      	bne.n	800568c <__swbuf_r+0x70>
 8005634:	686c      	ldr	r4, [r5, #4]
 8005636:	69a3      	ldr	r3, [r4, #24]
 8005638:	60a3      	str	r3, [r4, #8]
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	071a      	lsls	r2, r3, #28
 800563e:	d52f      	bpl.n	80056a0 <__swbuf_r+0x84>
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	b36b      	cbz	r3, 80056a0 <__swbuf_r+0x84>
 8005644:	6923      	ldr	r3, [r4, #16]
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	1ac0      	subs	r0, r0, r3
 800564a:	6963      	ldr	r3, [r4, #20]
 800564c:	b2f6      	uxtb	r6, r6
 800564e:	4283      	cmp	r3, r0
 8005650:	4637      	mov	r7, r6
 8005652:	dc04      	bgt.n	800565e <__swbuf_r+0x42>
 8005654:	4621      	mov	r1, r4
 8005656:	4628      	mov	r0, r5
 8005658:	f000 f944 	bl	80058e4 <_fflush_r>
 800565c:	bb30      	cbnz	r0, 80056ac <__swbuf_r+0x90>
 800565e:	68a3      	ldr	r3, [r4, #8]
 8005660:	3b01      	subs	r3, #1
 8005662:	60a3      	str	r3, [r4, #8]
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	6022      	str	r2, [r4, #0]
 800566a:	701e      	strb	r6, [r3, #0]
 800566c:	6963      	ldr	r3, [r4, #20]
 800566e:	3001      	adds	r0, #1
 8005670:	4283      	cmp	r3, r0
 8005672:	d004      	beq.n	800567e <__swbuf_r+0x62>
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	07db      	lsls	r3, r3, #31
 8005678:	d506      	bpl.n	8005688 <__swbuf_r+0x6c>
 800567a:	2e0a      	cmp	r6, #10
 800567c:	d104      	bne.n	8005688 <__swbuf_r+0x6c>
 800567e:	4621      	mov	r1, r4
 8005680:	4628      	mov	r0, r5
 8005682:	f000 f92f 	bl	80058e4 <_fflush_r>
 8005686:	b988      	cbnz	r0, 80056ac <__swbuf_r+0x90>
 8005688:	4638      	mov	r0, r7
 800568a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800568c:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <__swbuf_r+0x9c>)
 800568e:	429c      	cmp	r4, r3
 8005690:	d101      	bne.n	8005696 <__swbuf_r+0x7a>
 8005692:	68ac      	ldr	r4, [r5, #8]
 8005694:	e7cf      	b.n	8005636 <__swbuf_r+0x1a>
 8005696:	4b09      	ldr	r3, [pc, #36]	; (80056bc <__swbuf_r+0xa0>)
 8005698:	429c      	cmp	r4, r3
 800569a:	bf08      	it	eq
 800569c:	68ec      	ldreq	r4, [r5, #12]
 800569e:	e7ca      	b.n	8005636 <__swbuf_r+0x1a>
 80056a0:	4621      	mov	r1, r4
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f80c 	bl	80056c0 <__swsetup_r>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d0cb      	beq.n	8005644 <__swbuf_r+0x28>
 80056ac:	f04f 37ff 	mov.w	r7, #4294967295
 80056b0:	e7ea      	b.n	8005688 <__swbuf_r+0x6c>
 80056b2:	bf00      	nop
 80056b4:	08006df8 	.word	0x08006df8
 80056b8:	08006e18 	.word	0x08006e18
 80056bc:	08006dd8 	.word	0x08006dd8

080056c0 <__swsetup_r>:
 80056c0:	4b32      	ldr	r3, [pc, #200]	; (800578c <__swsetup_r+0xcc>)
 80056c2:	b570      	push	{r4, r5, r6, lr}
 80056c4:	681d      	ldr	r5, [r3, #0]
 80056c6:	4606      	mov	r6, r0
 80056c8:	460c      	mov	r4, r1
 80056ca:	b125      	cbz	r5, 80056d6 <__swsetup_r+0x16>
 80056cc:	69ab      	ldr	r3, [r5, #24]
 80056ce:	b913      	cbnz	r3, 80056d6 <__swsetup_r+0x16>
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 f99b 	bl	8005a0c <__sinit>
 80056d6:	4b2e      	ldr	r3, [pc, #184]	; (8005790 <__swsetup_r+0xd0>)
 80056d8:	429c      	cmp	r4, r3
 80056da:	d10f      	bne.n	80056fc <__swsetup_r+0x3c>
 80056dc:	686c      	ldr	r4, [r5, #4]
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056e4:	0719      	lsls	r1, r3, #28
 80056e6:	d42c      	bmi.n	8005742 <__swsetup_r+0x82>
 80056e8:	06dd      	lsls	r5, r3, #27
 80056ea:	d411      	bmi.n	8005710 <__swsetup_r+0x50>
 80056ec:	2309      	movs	r3, #9
 80056ee:	6033      	str	r3, [r6, #0]
 80056f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	f04f 30ff 	mov.w	r0, #4294967295
 80056fa:	e03e      	b.n	800577a <__swsetup_r+0xba>
 80056fc:	4b25      	ldr	r3, [pc, #148]	; (8005794 <__swsetup_r+0xd4>)
 80056fe:	429c      	cmp	r4, r3
 8005700:	d101      	bne.n	8005706 <__swsetup_r+0x46>
 8005702:	68ac      	ldr	r4, [r5, #8]
 8005704:	e7eb      	b.n	80056de <__swsetup_r+0x1e>
 8005706:	4b24      	ldr	r3, [pc, #144]	; (8005798 <__swsetup_r+0xd8>)
 8005708:	429c      	cmp	r4, r3
 800570a:	bf08      	it	eq
 800570c:	68ec      	ldreq	r4, [r5, #12]
 800570e:	e7e6      	b.n	80056de <__swsetup_r+0x1e>
 8005710:	0758      	lsls	r0, r3, #29
 8005712:	d512      	bpl.n	800573a <__swsetup_r+0x7a>
 8005714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005716:	b141      	cbz	r1, 800572a <__swsetup_r+0x6a>
 8005718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800571c:	4299      	cmp	r1, r3
 800571e:	d002      	beq.n	8005726 <__swsetup_r+0x66>
 8005720:	4630      	mov	r0, r6
 8005722:	f000 fa93 	bl	8005c4c <_free_r>
 8005726:	2300      	movs	r3, #0
 8005728:	6363      	str	r3, [r4, #52]	; 0x34
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005730:	81a3      	strh	r3, [r4, #12]
 8005732:	2300      	movs	r3, #0
 8005734:	6063      	str	r3, [r4, #4]
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	f043 0308 	orr.w	r3, r3, #8
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	6923      	ldr	r3, [r4, #16]
 8005744:	b94b      	cbnz	r3, 800575a <__swsetup_r+0x9a>
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800574c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005750:	d003      	beq.n	800575a <__swsetup_r+0x9a>
 8005752:	4621      	mov	r1, r4
 8005754:	4630      	mov	r0, r6
 8005756:	f000 fa31 	bl	8005bbc <__smakebuf_r>
 800575a:	89a0      	ldrh	r0, [r4, #12]
 800575c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005760:	f010 0301 	ands.w	r3, r0, #1
 8005764:	d00a      	beq.n	800577c <__swsetup_r+0xbc>
 8005766:	2300      	movs	r3, #0
 8005768:	60a3      	str	r3, [r4, #8]
 800576a:	6963      	ldr	r3, [r4, #20]
 800576c:	425b      	negs	r3, r3
 800576e:	61a3      	str	r3, [r4, #24]
 8005770:	6923      	ldr	r3, [r4, #16]
 8005772:	b943      	cbnz	r3, 8005786 <__swsetup_r+0xc6>
 8005774:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005778:	d1ba      	bne.n	80056f0 <__swsetup_r+0x30>
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	0781      	lsls	r1, r0, #30
 800577e:	bf58      	it	pl
 8005780:	6963      	ldrpl	r3, [r4, #20]
 8005782:	60a3      	str	r3, [r4, #8]
 8005784:	e7f4      	b.n	8005770 <__swsetup_r+0xb0>
 8005786:	2000      	movs	r0, #0
 8005788:	e7f7      	b.n	800577a <__swsetup_r+0xba>
 800578a:	bf00      	nop
 800578c:	200000a0 	.word	0x200000a0
 8005790:	08006df8 	.word	0x08006df8
 8005794:	08006e18 	.word	0x08006e18
 8005798:	08006dd8 	.word	0x08006dd8

0800579c <__assert_func>:
 800579c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800579e:	4614      	mov	r4, r2
 80057a0:	461a      	mov	r2, r3
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <__assert_func+0x2c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4605      	mov	r5, r0
 80057a8:	68d8      	ldr	r0, [r3, #12]
 80057aa:	b14c      	cbz	r4, 80057c0 <__assert_func+0x24>
 80057ac:	4b07      	ldr	r3, [pc, #28]	; (80057cc <__assert_func+0x30>)
 80057ae:	9100      	str	r1, [sp, #0]
 80057b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057b4:	4906      	ldr	r1, [pc, #24]	; (80057d0 <__assert_func+0x34>)
 80057b6:	462b      	mov	r3, r5
 80057b8:	f000 f9a6 	bl	8005b08 <fiprintf>
 80057bc:	f000 fe7a 	bl	80064b4 <abort>
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <__assert_func+0x38>)
 80057c2:	461c      	mov	r4, r3
 80057c4:	e7f3      	b.n	80057ae <__assert_func+0x12>
 80057c6:	bf00      	nop
 80057c8:	200000a0 	.word	0x200000a0
 80057cc:	08006d9c 	.word	0x08006d9c
 80057d0:	08006da9 	.word	0x08006da9
 80057d4:	08006dd7 	.word	0x08006dd7

080057d8 <__sflush_r>:
 80057d8:	898a      	ldrh	r2, [r1, #12]
 80057da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	4605      	mov	r5, r0
 80057e0:	0710      	lsls	r0, r2, #28
 80057e2:	460c      	mov	r4, r1
 80057e4:	d458      	bmi.n	8005898 <__sflush_r+0xc0>
 80057e6:	684b      	ldr	r3, [r1, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dc05      	bgt.n	80057f8 <__sflush_r+0x20>
 80057ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dc02      	bgt.n	80057f8 <__sflush_r+0x20>
 80057f2:	2000      	movs	r0, #0
 80057f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057fa:	2e00      	cmp	r6, #0
 80057fc:	d0f9      	beq.n	80057f2 <__sflush_r+0x1a>
 80057fe:	2300      	movs	r3, #0
 8005800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005804:	682f      	ldr	r7, [r5, #0]
 8005806:	602b      	str	r3, [r5, #0]
 8005808:	d032      	beq.n	8005870 <__sflush_r+0x98>
 800580a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	075a      	lsls	r2, r3, #29
 8005810:	d505      	bpl.n	800581e <__sflush_r+0x46>
 8005812:	6863      	ldr	r3, [r4, #4]
 8005814:	1ac0      	subs	r0, r0, r3
 8005816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005818:	b10b      	cbz	r3, 800581e <__sflush_r+0x46>
 800581a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800581c:	1ac0      	subs	r0, r0, r3
 800581e:	2300      	movs	r3, #0
 8005820:	4602      	mov	r2, r0
 8005822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005824:	6a21      	ldr	r1, [r4, #32]
 8005826:	4628      	mov	r0, r5
 8005828:	47b0      	blx	r6
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	d106      	bne.n	800583e <__sflush_r+0x66>
 8005830:	6829      	ldr	r1, [r5, #0]
 8005832:	291d      	cmp	r1, #29
 8005834:	d82c      	bhi.n	8005890 <__sflush_r+0xb8>
 8005836:	4a2a      	ldr	r2, [pc, #168]	; (80058e0 <__sflush_r+0x108>)
 8005838:	40ca      	lsrs	r2, r1
 800583a:	07d6      	lsls	r6, r2, #31
 800583c:	d528      	bpl.n	8005890 <__sflush_r+0xb8>
 800583e:	2200      	movs	r2, #0
 8005840:	6062      	str	r2, [r4, #4]
 8005842:	04d9      	lsls	r1, r3, #19
 8005844:	6922      	ldr	r2, [r4, #16]
 8005846:	6022      	str	r2, [r4, #0]
 8005848:	d504      	bpl.n	8005854 <__sflush_r+0x7c>
 800584a:	1c42      	adds	r2, r0, #1
 800584c:	d101      	bne.n	8005852 <__sflush_r+0x7a>
 800584e:	682b      	ldr	r3, [r5, #0]
 8005850:	b903      	cbnz	r3, 8005854 <__sflush_r+0x7c>
 8005852:	6560      	str	r0, [r4, #84]	; 0x54
 8005854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005856:	602f      	str	r7, [r5, #0]
 8005858:	2900      	cmp	r1, #0
 800585a:	d0ca      	beq.n	80057f2 <__sflush_r+0x1a>
 800585c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005860:	4299      	cmp	r1, r3
 8005862:	d002      	beq.n	800586a <__sflush_r+0x92>
 8005864:	4628      	mov	r0, r5
 8005866:	f000 f9f1 	bl	8005c4c <_free_r>
 800586a:	2000      	movs	r0, #0
 800586c:	6360      	str	r0, [r4, #52]	; 0x34
 800586e:	e7c1      	b.n	80057f4 <__sflush_r+0x1c>
 8005870:	6a21      	ldr	r1, [r4, #32]
 8005872:	2301      	movs	r3, #1
 8005874:	4628      	mov	r0, r5
 8005876:	47b0      	blx	r6
 8005878:	1c41      	adds	r1, r0, #1
 800587a:	d1c7      	bne.n	800580c <__sflush_r+0x34>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0c4      	beq.n	800580c <__sflush_r+0x34>
 8005882:	2b1d      	cmp	r3, #29
 8005884:	d001      	beq.n	800588a <__sflush_r+0xb2>
 8005886:	2b16      	cmp	r3, #22
 8005888:	d101      	bne.n	800588e <__sflush_r+0xb6>
 800588a:	602f      	str	r7, [r5, #0]
 800588c:	e7b1      	b.n	80057f2 <__sflush_r+0x1a>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005894:	81a3      	strh	r3, [r4, #12]
 8005896:	e7ad      	b.n	80057f4 <__sflush_r+0x1c>
 8005898:	690f      	ldr	r7, [r1, #16]
 800589a:	2f00      	cmp	r7, #0
 800589c:	d0a9      	beq.n	80057f2 <__sflush_r+0x1a>
 800589e:	0793      	lsls	r3, r2, #30
 80058a0:	680e      	ldr	r6, [r1, #0]
 80058a2:	bf08      	it	eq
 80058a4:	694b      	ldreq	r3, [r1, #20]
 80058a6:	600f      	str	r7, [r1, #0]
 80058a8:	bf18      	it	ne
 80058aa:	2300      	movne	r3, #0
 80058ac:	eba6 0807 	sub.w	r8, r6, r7
 80058b0:	608b      	str	r3, [r1, #8]
 80058b2:	f1b8 0f00 	cmp.w	r8, #0
 80058b6:	dd9c      	ble.n	80057f2 <__sflush_r+0x1a>
 80058b8:	6a21      	ldr	r1, [r4, #32]
 80058ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058bc:	4643      	mov	r3, r8
 80058be:	463a      	mov	r2, r7
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b0      	blx	r6
 80058c4:	2800      	cmp	r0, #0
 80058c6:	dc06      	bgt.n	80058d6 <__sflush_r+0xfe>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	e78e      	b.n	80057f4 <__sflush_r+0x1c>
 80058d6:	4407      	add	r7, r0
 80058d8:	eba8 0800 	sub.w	r8, r8, r0
 80058dc:	e7e9      	b.n	80058b2 <__sflush_r+0xda>
 80058de:	bf00      	nop
 80058e0:	20400001 	.word	0x20400001

080058e4 <_fflush_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	690b      	ldr	r3, [r1, #16]
 80058e8:	4605      	mov	r5, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	b913      	cbnz	r3, 80058f4 <_fflush_r+0x10>
 80058ee:	2500      	movs	r5, #0
 80058f0:	4628      	mov	r0, r5
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	b118      	cbz	r0, 80058fe <_fflush_r+0x1a>
 80058f6:	6983      	ldr	r3, [r0, #24]
 80058f8:	b90b      	cbnz	r3, 80058fe <_fflush_r+0x1a>
 80058fa:	f000 f887 	bl	8005a0c <__sinit>
 80058fe:	4b14      	ldr	r3, [pc, #80]	; (8005950 <_fflush_r+0x6c>)
 8005900:	429c      	cmp	r4, r3
 8005902:	d11b      	bne.n	800593c <_fflush_r+0x58>
 8005904:	686c      	ldr	r4, [r5, #4]
 8005906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0ef      	beq.n	80058ee <_fflush_r+0xa>
 800590e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005910:	07d0      	lsls	r0, r2, #31
 8005912:	d404      	bmi.n	800591e <_fflush_r+0x3a>
 8005914:	0599      	lsls	r1, r3, #22
 8005916:	d402      	bmi.n	800591e <_fflush_r+0x3a>
 8005918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800591a:	f000 f927 	bl	8005b6c <__retarget_lock_acquire_recursive>
 800591e:	4628      	mov	r0, r5
 8005920:	4621      	mov	r1, r4
 8005922:	f7ff ff59 	bl	80057d8 <__sflush_r>
 8005926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005928:	07da      	lsls	r2, r3, #31
 800592a:	4605      	mov	r5, r0
 800592c:	d4e0      	bmi.n	80058f0 <_fflush_r+0xc>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	059b      	lsls	r3, r3, #22
 8005932:	d4dd      	bmi.n	80058f0 <_fflush_r+0xc>
 8005934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005936:	f000 f91a 	bl	8005b6e <__retarget_lock_release_recursive>
 800593a:	e7d9      	b.n	80058f0 <_fflush_r+0xc>
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <_fflush_r+0x70>)
 800593e:	429c      	cmp	r4, r3
 8005940:	d101      	bne.n	8005946 <_fflush_r+0x62>
 8005942:	68ac      	ldr	r4, [r5, #8]
 8005944:	e7df      	b.n	8005906 <_fflush_r+0x22>
 8005946:	4b04      	ldr	r3, [pc, #16]	; (8005958 <_fflush_r+0x74>)
 8005948:	429c      	cmp	r4, r3
 800594a:	bf08      	it	eq
 800594c:	68ec      	ldreq	r4, [r5, #12]
 800594e:	e7da      	b.n	8005906 <_fflush_r+0x22>
 8005950:	08006df8 	.word	0x08006df8
 8005954:	08006e18 	.word	0x08006e18
 8005958:	08006dd8 	.word	0x08006dd8

0800595c <std>:
 800595c:	2300      	movs	r3, #0
 800595e:	b510      	push	{r4, lr}
 8005960:	4604      	mov	r4, r0
 8005962:	e9c0 3300 	strd	r3, r3, [r0]
 8005966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800596a:	6083      	str	r3, [r0, #8]
 800596c:	8181      	strh	r1, [r0, #12]
 800596e:	6643      	str	r3, [r0, #100]	; 0x64
 8005970:	81c2      	strh	r2, [r0, #14]
 8005972:	6183      	str	r3, [r0, #24]
 8005974:	4619      	mov	r1, r3
 8005976:	2208      	movs	r2, #8
 8005978:	305c      	adds	r0, #92	; 0x5c
 800597a:	f7ff fd25 	bl	80053c8 <memset>
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std+0x38>)
 8005980:	6263      	str	r3, [r4, #36]	; 0x24
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <std+0x3c>)
 8005984:	62a3      	str	r3, [r4, #40]	; 0x28
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <std+0x40>)
 8005988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <std+0x44>)
 800598c:	6224      	str	r4, [r4, #32]
 800598e:	6323      	str	r3, [r4, #48]	; 0x30
 8005990:	bd10      	pop	{r4, pc}
 8005992:	bf00      	nop
 8005994:	08006409 	.word	0x08006409
 8005998:	0800642b 	.word	0x0800642b
 800599c:	08006463 	.word	0x08006463
 80059a0:	08006487 	.word	0x08006487

080059a4 <_cleanup_r>:
 80059a4:	4901      	ldr	r1, [pc, #4]	; (80059ac <_cleanup_r+0x8>)
 80059a6:	f000 b8c1 	b.w	8005b2c <_fwalk_reent>
 80059aa:	bf00      	nop
 80059ac:	080058e5 	.word	0x080058e5

080059b0 <__sfmoreglue>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	2268      	movs	r2, #104	; 0x68
 80059b4:	1e4d      	subs	r5, r1, #1
 80059b6:	4355      	muls	r5, r2
 80059b8:	460e      	mov	r6, r1
 80059ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059be:	f000 f9b1 	bl	8005d24 <_malloc_r>
 80059c2:	4604      	mov	r4, r0
 80059c4:	b140      	cbz	r0, 80059d8 <__sfmoreglue+0x28>
 80059c6:	2100      	movs	r1, #0
 80059c8:	e9c0 1600 	strd	r1, r6, [r0]
 80059cc:	300c      	adds	r0, #12
 80059ce:	60a0      	str	r0, [r4, #8]
 80059d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059d4:	f7ff fcf8 	bl	80053c8 <memset>
 80059d8:	4620      	mov	r0, r4
 80059da:	bd70      	pop	{r4, r5, r6, pc}

080059dc <__sfp_lock_acquire>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__sfp_lock_acquire+0x8>)
 80059de:	f000 b8c5 	b.w	8005b6c <__retarget_lock_acquire_recursive>
 80059e2:	bf00      	nop
 80059e4:	200065cd 	.word	0x200065cd

080059e8 <__sfp_lock_release>:
 80059e8:	4801      	ldr	r0, [pc, #4]	; (80059f0 <__sfp_lock_release+0x8>)
 80059ea:	f000 b8c0 	b.w	8005b6e <__retarget_lock_release_recursive>
 80059ee:	bf00      	nop
 80059f0:	200065cd 	.word	0x200065cd

080059f4 <__sinit_lock_acquire>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sinit_lock_acquire+0x8>)
 80059f6:	f000 b8b9 	b.w	8005b6c <__retarget_lock_acquire_recursive>
 80059fa:	bf00      	nop
 80059fc:	200065ce 	.word	0x200065ce

08005a00 <__sinit_lock_release>:
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <__sinit_lock_release+0x8>)
 8005a02:	f000 b8b4 	b.w	8005b6e <__retarget_lock_release_recursive>
 8005a06:	bf00      	nop
 8005a08:	200065ce 	.word	0x200065ce

08005a0c <__sinit>:
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	4604      	mov	r4, r0
 8005a10:	f7ff fff0 	bl	80059f4 <__sinit_lock_acquire>
 8005a14:	69a3      	ldr	r3, [r4, #24]
 8005a16:	b11b      	cbz	r3, 8005a20 <__sinit+0x14>
 8005a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a1c:	f7ff bff0 	b.w	8005a00 <__sinit_lock_release>
 8005a20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a24:	6523      	str	r3, [r4, #80]	; 0x50
 8005a26:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <__sinit+0x68>)
 8005a28:	4a13      	ldr	r2, [pc, #76]	; (8005a78 <__sinit+0x6c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a2e:	42a3      	cmp	r3, r4
 8005a30:	bf04      	itt	eq
 8005a32:	2301      	moveq	r3, #1
 8005a34:	61a3      	streq	r3, [r4, #24]
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 f820 	bl	8005a7c <__sfp>
 8005a3c:	6060      	str	r0, [r4, #4]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 f81c 	bl	8005a7c <__sfp>
 8005a44:	60a0      	str	r0, [r4, #8]
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 f818 	bl	8005a7c <__sfp>
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	60e0      	str	r0, [r4, #12]
 8005a50:	2104      	movs	r1, #4
 8005a52:	6860      	ldr	r0, [r4, #4]
 8005a54:	f7ff ff82 	bl	800595c <std>
 8005a58:	68a0      	ldr	r0, [r4, #8]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2109      	movs	r1, #9
 8005a5e:	f7ff ff7d 	bl	800595c <std>
 8005a62:	68e0      	ldr	r0, [r4, #12]
 8005a64:	2202      	movs	r2, #2
 8005a66:	2112      	movs	r1, #18
 8005a68:	f7ff ff78 	bl	800595c <std>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	61a3      	str	r3, [r4, #24]
 8005a70:	e7d2      	b.n	8005a18 <__sinit+0xc>
 8005a72:	bf00      	nop
 8005a74:	08006d24 	.word	0x08006d24
 8005a78:	080059a5 	.word	0x080059a5

08005a7c <__sfp>:
 8005a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7e:	4607      	mov	r7, r0
 8005a80:	f7ff ffac 	bl	80059dc <__sfp_lock_acquire>
 8005a84:	4b1e      	ldr	r3, [pc, #120]	; (8005b00 <__sfp+0x84>)
 8005a86:	681e      	ldr	r6, [r3, #0]
 8005a88:	69b3      	ldr	r3, [r6, #24]
 8005a8a:	b913      	cbnz	r3, 8005a92 <__sfp+0x16>
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff ffbd 	bl	8005a0c <__sinit>
 8005a92:	3648      	adds	r6, #72	; 0x48
 8005a94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	d503      	bpl.n	8005aa4 <__sfp+0x28>
 8005a9c:	6833      	ldr	r3, [r6, #0]
 8005a9e:	b30b      	cbz	r3, 8005ae4 <__sfp+0x68>
 8005aa0:	6836      	ldr	r6, [r6, #0]
 8005aa2:	e7f7      	b.n	8005a94 <__sfp+0x18>
 8005aa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005aa8:	b9d5      	cbnz	r5, 8005ae0 <__sfp+0x64>
 8005aaa:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <__sfp+0x88>)
 8005aac:	60e3      	str	r3, [r4, #12]
 8005aae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ab2:	6665      	str	r5, [r4, #100]	; 0x64
 8005ab4:	f000 f859 	bl	8005b6a <__retarget_lock_init_recursive>
 8005ab8:	f7ff ff96 	bl	80059e8 <__sfp_lock_release>
 8005abc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ac0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ac4:	6025      	str	r5, [r4, #0]
 8005ac6:	61a5      	str	r5, [r4, #24]
 8005ac8:	2208      	movs	r2, #8
 8005aca:	4629      	mov	r1, r5
 8005acc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ad0:	f7ff fc7a 	bl	80053c8 <memset>
 8005ad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005adc:	4620      	mov	r0, r4
 8005ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae0:	3468      	adds	r4, #104	; 0x68
 8005ae2:	e7d9      	b.n	8005a98 <__sfp+0x1c>
 8005ae4:	2104      	movs	r1, #4
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	f7ff ff62 	bl	80059b0 <__sfmoreglue>
 8005aec:	4604      	mov	r4, r0
 8005aee:	6030      	str	r0, [r6, #0]
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d1d5      	bne.n	8005aa0 <__sfp+0x24>
 8005af4:	f7ff ff78 	bl	80059e8 <__sfp_lock_release>
 8005af8:	230c      	movs	r3, #12
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	e7ee      	b.n	8005adc <__sfp+0x60>
 8005afe:	bf00      	nop
 8005b00:	08006d24 	.word	0x08006d24
 8005b04:	ffff0001 	.word	0xffff0001

08005b08 <fiprintf>:
 8005b08:	b40e      	push	{r1, r2, r3}
 8005b0a:	b503      	push	{r0, r1, lr}
 8005b0c:	4601      	mov	r1, r0
 8005b0e:	ab03      	add	r3, sp, #12
 8005b10:	4805      	ldr	r0, [pc, #20]	; (8005b28 <fiprintf+0x20>)
 8005b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b16:	6800      	ldr	r0, [r0, #0]
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	f000 f9a1 	bl	8005e60 <_vfiprintf_r>
 8005b1e:	b002      	add	sp, #8
 8005b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b24:	b003      	add	sp, #12
 8005b26:	4770      	bx	lr
 8005b28:	200000a0 	.word	0x200000a0

08005b2c <_fwalk_reent>:
 8005b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b30:	4606      	mov	r6, r0
 8005b32:	4688      	mov	r8, r1
 8005b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b38:	2700      	movs	r7, #0
 8005b3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b3e:	f1b9 0901 	subs.w	r9, r9, #1
 8005b42:	d505      	bpl.n	8005b50 <_fwalk_reent+0x24>
 8005b44:	6824      	ldr	r4, [r4, #0]
 8005b46:	2c00      	cmp	r4, #0
 8005b48:	d1f7      	bne.n	8005b3a <_fwalk_reent+0xe>
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b50:	89ab      	ldrh	r3, [r5, #12]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d907      	bls.n	8005b66 <_fwalk_reent+0x3a>
 8005b56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	d003      	beq.n	8005b66 <_fwalk_reent+0x3a>
 8005b5e:	4629      	mov	r1, r5
 8005b60:	4630      	mov	r0, r6
 8005b62:	47c0      	blx	r8
 8005b64:	4307      	orrs	r7, r0
 8005b66:	3568      	adds	r5, #104	; 0x68
 8005b68:	e7e9      	b.n	8005b3e <_fwalk_reent+0x12>

08005b6a <__retarget_lock_init_recursive>:
 8005b6a:	4770      	bx	lr

08005b6c <__retarget_lock_acquire_recursive>:
 8005b6c:	4770      	bx	lr

08005b6e <__retarget_lock_release_recursive>:
 8005b6e:	4770      	bx	lr

08005b70 <__swhatbuf_r>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	460e      	mov	r6, r1
 8005b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	b096      	sub	sp, #88	; 0x58
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	461d      	mov	r5, r3
 8005b80:	da08      	bge.n	8005b94 <__swhatbuf_r+0x24>
 8005b82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	602a      	str	r2, [r5, #0]
 8005b8a:	061a      	lsls	r2, r3, #24
 8005b8c:	d410      	bmi.n	8005bb0 <__swhatbuf_r+0x40>
 8005b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b92:	e00e      	b.n	8005bb2 <__swhatbuf_r+0x42>
 8005b94:	466a      	mov	r2, sp
 8005b96:	f000 fca5 	bl	80064e4 <_fstat_r>
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	dbf1      	blt.n	8005b82 <__swhatbuf_r+0x12>
 8005b9e:	9a01      	ldr	r2, [sp, #4]
 8005ba0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ba4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ba8:	425a      	negs	r2, r3
 8005baa:	415a      	adcs	r2, r3
 8005bac:	602a      	str	r2, [r5, #0]
 8005bae:	e7ee      	b.n	8005b8e <__swhatbuf_r+0x1e>
 8005bb0:	2340      	movs	r3, #64	; 0x40
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	b016      	add	sp, #88	; 0x58
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bbc <__smakebuf_r>:
 8005bbc:	898b      	ldrh	r3, [r1, #12]
 8005bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bc0:	079d      	lsls	r5, r3, #30
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	d507      	bpl.n	8005bd8 <__smakebuf_r+0x1c>
 8005bc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	6163      	str	r3, [r4, #20]
 8005bd4:	b002      	add	sp, #8
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	ab01      	add	r3, sp, #4
 8005bda:	466a      	mov	r2, sp
 8005bdc:	f7ff ffc8 	bl	8005b70 <__swhatbuf_r>
 8005be0:	9900      	ldr	r1, [sp, #0]
 8005be2:	4605      	mov	r5, r0
 8005be4:	4630      	mov	r0, r6
 8005be6:	f000 f89d 	bl	8005d24 <_malloc_r>
 8005bea:	b948      	cbnz	r0, 8005c00 <__smakebuf_r+0x44>
 8005bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf0:	059a      	lsls	r2, r3, #22
 8005bf2:	d4ef      	bmi.n	8005bd4 <__smakebuf_r+0x18>
 8005bf4:	f023 0303 	bic.w	r3, r3, #3
 8005bf8:	f043 0302 	orr.w	r3, r3, #2
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	e7e3      	b.n	8005bc8 <__smakebuf_r+0xc>
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <__smakebuf_r+0x7c>)
 8005c02:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	6020      	str	r0, [r4, #0]
 8005c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0c:	81a3      	strh	r3, [r4, #12]
 8005c0e:	9b00      	ldr	r3, [sp, #0]
 8005c10:	6163      	str	r3, [r4, #20]
 8005c12:	9b01      	ldr	r3, [sp, #4]
 8005c14:	6120      	str	r0, [r4, #16]
 8005c16:	b15b      	cbz	r3, 8005c30 <__smakebuf_r+0x74>
 8005c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f000 fc73 	bl	8006508 <_isatty_r>
 8005c22:	b128      	cbz	r0, 8005c30 <__smakebuf_r+0x74>
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	89a0      	ldrh	r0, [r4, #12]
 8005c32:	4305      	orrs	r5, r0
 8005c34:	81a5      	strh	r5, [r4, #12]
 8005c36:	e7cd      	b.n	8005bd4 <__smakebuf_r+0x18>
 8005c38:	080059a5 	.word	0x080059a5

08005c3c <malloc>:
 8005c3c:	4b02      	ldr	r3, [pc, #8]	; (8005c48 <malloc+0xc>)
 8005c3e:	4601      	mov	r1, r0
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	f000 b86f 	b.w	8005d24 <_malloc_r>
 8005c46:	bf00      	nop
 8005c48:	200000a0 	.word	0x200000a0

08005c4c <_free_r>:
 8005c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	d044      	beq.n	8005cdc <_free_r+0x90>
 8005c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c56:	9001      	str	r0, [sp, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c5e:	bfb8      	it	lt
 8005c60:	18e4      	addlt	r4, r4, r3
 8005c62:	f000 fc73 	bl	800654c <__malloc_lock>
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <_free_r+0x94>)
 8005c68:	9801      	ldr	r0, [sp, #4]
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	b933      	cbnz	r3, 8005c7c <_free_r+0x30>
 8005c6e:	6063      	str	r3, [r4, #4]
 8005c70:	6014      	str	r4, [r2, #0]
 8005c72:	b003      	add	sp, #12
 8005c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c78:	f000 bc6e 	b.w	8006558 <__malloc_unlock>
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d908      	bls.n	8005c92 <_free_r+0x46>
 8005c80:	6825      	ldr	r5, [r4, #0]
 8005c82:	1961      	adds	r1, r4, r5
 8005c84:	428b      	cmp	r3, r1
 8005c86:	bf01      	itttt	eq
 8005c88:	6819      	ldreq	r1, [r3, #0]
 8005c8a:	685b      	ldreq	r3, [r3, #4]
 8005c8c:	1949      	addeq	r1, r1, r5
 8005c8e:	6021      	streq	r1, [r4, #0]
 8005c90:	e7ed      	b.n	8005c6e <_free_r+0x22>
 8005c92:	461a      	mov	r2, r3
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b10b      	cbz	r3, 8005c9c <_free_r+0x50>
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	d9fa      	bls.n	8005c92 <_free_r+0x46>
 8005c9c:	6811      	ldr	r1, [r2, #0]
 8005c9e:	1855      	adds	r5, r2, r1
 8005ca0:	42a5      	cmp	r5, r4
 8005ca2:	d10b      	bne.n	8005cbc <_free_r+0x70>
 8005ca4:	6824      	ldr	r4, [r4, #0]
 8005ca6:	4421      	add	r1, r4
 8005ca8:	1854      	adds	r4, r2, r1
 8005caa:	42a3      	cmp	r3, r4
 8005cac:	6011      	str	r1, [r2, #0]
 8005cae:	d1e0      	bne.n	8005c72 <_free_r+0x26>
 8005cb0:	681c      	ldr	r4, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	6053      	str	r3, [r2, #4]
 8005cb6:	4421      	add	r1, r4
 8005cb8:	6011      	str	r1, [r2, #0]
 8005cba:	e7da      	b.n	8005c72 <_free_r+0x26>
 8005cbc:	d902      	bls.n	8005cc4 <_free_r+0x78>
 8005cbe:	230c      	movs	r3, #12
 8005cc0:	6003      	str	r3, [r0, #0]
 8005cc2:	e7d6      	b.n	8005c72 <_free_r+0x26>
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	1961      	adds	r1, r4, r5
 8005cc8:	428b      	cmp	r3, r1
 8005cca:	bf04      	itt	eq
 8005ccc:	6819      	ldreq	r1, [r3, #0]
 8005cce:	685b      	ldreq	r3, [r3, #4]
 8005cd0:	6063      	str	r3, [r4, #4]
 8005cd2:	bf04      	itt	eq
 8005cd4:	1949      	addeq	r1, r1, r5
 8005cd6:	6021      	streq	r1, [r4, #0]
 8005cd8:	6054      	str	r4, [r2, #4]
 8005cda:	e7ca      	b.n	8005c72 <_free_r+0x26>
 8005cdc:	b003      	add	sp, #12
 8005cde:	bd30      	pop	{r4, r5, pc}
 8005ce0:	200065d0 	.word	0x200065d0

08005ce4 <sbrk_aligned>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	4e0e      	ldr	r6, [pc, #56]	; (8005d20 <sbrk_aligned+0x3c>)
 8005ce8:	460c      	mov	r4, r1
 8005cea:	6831      	ldr	r1, [r6, #0]
 8005cec:	4605      	mov	r5, r0
 8005cee:	b911      	cbnz	r1, 8005cf6 <sbrk_aligned+0x12>
 8005cf0:	f000 fb7a 	bl	80063e8 <_sbrk_r>
 8005cf4:	6030      	str	r0, [r6, #0]
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 fb75 	bl	80063e8 <_sbrk_r>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d00a      	beq.n	8005d18 <sbrk_aligned+0x34>
 8005d02:	1cc4      	adds	r4, r0, #3
 8005d04:	f024 0403 	bic.w	r4, r4, #3
 8005d08:	42a0      	cmp	r0, r4
 8005d0a:	d007      	beq.n	8005d1c <sbrk_aligned+0x38>
 8005d0c:	1a21      	subs	r1, r4, r0
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 fb6a 	bl	80063e8 <_sbrk_r>
 8005d14:	3001      	adds	r0, #1
 8005d16:	d101      	bne.n	8005d1c <sbrk_aligned+0x38>
 8005d18:	f04f 34ff 	mov.w	r4, #4294967295
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	200065d4 	.word	0x200065d4

08005d24 <_malloc_r>:
 8005d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d28:	1ccd      	adds	r5, r1, #3
 8005d2a:	f025 0503 	bic.w	r5, r5, #3
 8005d2e:	3508      	adds	r5, #8
 8005d30:	2d0c      	cmp	r5, #12
 8005d32:	bf38      	it	cc
 8005d34:	250c      	movcc	r5, #12
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	4607      	mov	r7, r0
 8005d3a:	db01      	blt.n	8005d40 <_malloc_r+0x1c>
 8005d3c:	42a9      	cmp	r1, r5
 8005d3e:	d905      	bls.n	8005d4c <_malloc_r+0x28>
 8005d40:	230c      	movs	r3, #12
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	2600      	movs	r6, #0
 8005d46:	4630      	mov	r0, r6
 8005d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d4c:	4e2e      	ldr	r6, [pc, #184]	; (8005e08 <_malloc_r+0xe4>)
 8005d4e:	f000 fbfd 	bl	800654c <__malloc_lock>
 8005d52:	6833      	ldr	r3, [r6, #0]
 8005d54:	461c      	mov	r4, r3
 8005d56:	bb34      	cbnz	r4, 8005da6 <_malloc_r+0x82>
 8005d58:	4629      	mov	r1, r5
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f7ff ffc2 	bl	8005ce4 <sbrk_aligned>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	4604      	mov	r4, r0
 8005d64:	d14d      	bne.n	8005e02 <_malloc_r+0xde>
 8005d66:	6834      	ldr	r4, [r6, #0]
 8005d68:	4626      	mov	r6, r4
 8005d6a:	2e00      	cmp	r6, #0
 8005d6c:	d140      	bne.n	8005df0 <_malloc_r+0xcc>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	4631      	mov	r1, r6
 8005d72:	4638      	mov	r0, r7
 8005d74:	eb04 0803 	add.w	r8, r4, r3
 8005d78:	f000 fb36 	bl	80063e8 <_sbrk_r>
 8005d7c:	4580      	cmp	r8, r0
 8005d7e:	d13a      	bne.n	8005df6 <_malloc_r+0xd2>
 8005d80:	6821      	ldr	r1, [r4, #0]
 8005d82:	3503      	adds	r5, #3
 8005d84:	1a6d      	subs	r5, r5, r1
 8005d86:	f025 0503 	bic.w	r5, r5, #3
 8005d8a:	3508      	adds	r5, #8
 8005d8c:	2d0c      	cmp	r5, #12
 8005d8e:	bf38      	it	cc
 8005d90:	250c      	movcc	r5, #12
 8005d92:	4629      	mov	r1, r5
 8005d94:	4638      	mov	r0, r7
 8005d96:	f7ff ffa5 	bl	8005ce4 <sbrk_aligned>
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d02b      	beq.n	8005df6 <_malloc_r+0xd2>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	442b      	add	r3, r5
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	e00e      	b.n	8005dc4 <_malloc_r+0xa0>
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	1b52      	subs	r2, r2, r5
 8005daa:	d41e      	bmi.n	8005dea <_malloc_r+0xc6>
 8005dac:	2a0b      	cmp	r2, #11
 8005dae:	d916      	bls.n	8005dde <_malloc_r+0xba>
 8005db0:	1961      	adds	r1, r4, r5
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	6025      	str	r5, [r4, #0]
 8005db6:	bf18      	it	ne
 8005db8:	6059      	strne	r1, [r3, #4]
 8005dba:	6863      	ldr	r3, [r4, #4]
 8005dbc:	bf08      	it	eq
 8005dbe:	6031      	streq	r1, [r6, #0]
 8005dc0:	5162      	str	r2, [r4, r5]
 8005dc2:	604b      	str	r3, [r1, #4]
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	f104 060b 	add.w	r6, r4, #11
 8005dca:	f000 fbc5 	bl	8006558 <__malloc_unlock>
 8005dce:	f026 0607 	bic.w	r6, r6, #7
 8005dd2:	1d23      	adds	r3, r4, #4
 8005dd4:	1af2      	subs	r2, r6, r3
 8005dd6:	d0b6      	beq.n	8005d46 <_malloc_r+0x22>
 8005dd8:	1b9b      	subs	r3, r3, r6
 8005dda:	50a3      	str	r3, [r4, r2]
 8005ddc:	e7b3      	b.n	8005d46 <_malloc_r+0x22>
 8005dde:	6862      	ldr	r2, [r4, #4]
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	bf0c      	ite	eq
 8005de4:	6032      	streq	r2, [r6, #0]
 8005de6:	605a      	strne	r2, [r3, #4]
 8005de8:	e7ec      	b.n	8005dc4 <_malloc_r+0xa0>
 8005dea:	4623      	mov	r3, r4
 8005dec:	6864      	ldr	r4, [r4, #4]
 8005dee:	e7b2      	b.n	8005d56 <_malloc_r+0x32>
 8005df0:	4634      	mov	r4, r6
 8005df2:	6876      	ldr	r6, [r6, #4]
 8005df4:	e7b9      	b.n	8005d6a <_malloc_r+0x46>
 8005df6:	230c      	movs	r3, #12
 8005df8:	603b      	str	r3, [r7, #0]
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	f000 fbac 	bl	8006558 <__malloc_unlock>
 8005e00:	e7a1      	b.n	8005d46 <_malloc_r+0x22>
 8005e02:	6025      	str	r5, [r4, #0]
 8005e04:	e7de      	b.n	8005dc4 <_malloc_r+0xa0>
 8005e06:	bf00      	nop
 8005e08:	200065d0 	.word	0x200065d0

08005e0c <__sfputc_r>:
 8005e0c:	6893      	ldr	r3, [r2, #8]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	b410      	push	{r4}
 8005e14:	6093      	str	r3, [r2, #8]
 8005e16:	da08      	bge.n	8005e2a <__sfputc_r+0x1e>
 8005e18:	6994      	ldr	r4, [r2, #24]
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	db01      	blt.n	8005e22 <__sfputc_r+0x16>
 8005e1e:	290a      	cmp	r1, #10
 8005e20:	d103      	bne.n	8005e2a <__sfputc_r+0x1e>
 8005e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e26:	f7ff bbf9 	b.w	800561c <__swbuf_r>
 8005e2a:	6813      	ldr	r3, [r2, #0]
 8005e2c:	1c58      	adds	r0, r3, #1
 8005e2e:	6010      	str	r0, [r2, #0]
 8005e30:	7019      	strb	r1, [r3, #0]
 8005e32:	4608      	mov	r0, r1
 8005e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <__sfputs_r>:
 8005e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	460f      	mov	r7, r1
 8005e40:	4614      	mov	r4, r2
 8005e42:	18d5      	adds	r5, r2, r3
 8005e44:	42ac      	cmp	r4, r5
 8005e46:	d101      	bne.n	8005e4c <__sfputs_r+0x12>
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e007      	b.n	8005e5c <__sfputs_r+0x22>
 8005e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e50:	463a      	mov	r2, r7
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff ffda 	bl	8005e0c <__sfputc_r>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d1f3      	bne.n	8005e44 <__sfputs_r+0xa>
 8005e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e60 <_vfiprintf_r>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	460d      	mov	r5, r1
 8005e66:	b09d      	sub	sp, #116	; 0x74
 8005e68:	4614      	mov	r4, r2
 8005e6a:	4698      	mov	r8, r3
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	b118      	cbz	r0, 8005e78 <_vfiprintf_r+0x18>
 8005e70:	6983      	ldr	r3, [r0, #24]
 8005e72:	b90b      	cbnz	r3, 8005e78 <_vfiprintf_r+0x18>
 8005e74:	f7ff fdca 	bl	8005a0c <__sinit>
 8005e78:	4b89      	ldr	r3, [pc, #548]	; (80060a0 <_vfiprintf_r+0x240>)
 8005e7a:	429d      	cmp	r5, r3
 8005e7c:	d11b      	bne.n	8005eb6 <_vfiprintf_r+0x56>
 8005e7e:	6875      	ldr	r5, [r6, #4]
 8005e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e82:	07d9      	lsls	r1, r3, #31
 8005e84:	d405      	bmi.n	8005e92 <_vfiprintf_r+0x32>
 8005e86:	89ab      	ldrh	r3, [r5, #12]
 8005e88:	059a      	lsls	r2, r3, #22
 8005e8a:	d402      	bmi.n	8005e92 <_vfiprintf_r+0x32>
 8005e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e8e:	f7ff fe6d 	bl	8005b6c <__retarget_lock_acquire_recursive>
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	071b      	lsls	r3, r3, #28
 8005e96:	d501      	bpl.n	8005e9c <_vfiprintf_r+0x3c>
 8005e98:	692b      	ldr	r3, [r5, #16]
 8005e9a:	b9eb      	cbnz	r3, 8005ed8 <_vfiprintf_r+0x78>
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f7ff fc0e 	bl	80056c0 <__swsetup_r>
 8005ea4:	b1c0      	cbz	r0, 8005ed8 <_vfiprintf_r+0x78>
 8005ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ea8:	07dc      	lsls	r4, r3, #31
 8005eaa:	d50e      	bpl.n	8005eca <_vfiprintf_r+0x6a>
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	b01d      	add	sp, #116	; 0x74
 8005eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb6:	4b7b      	ldr	r3, [pc, #492]	; (80060a4 <_vfiprintf_r+0x244>)
 8005eb8:	429d      	cmp	r5, r3
 8005eba:	d101      	bne.n	8005ec0 <_vfiprintf_r+0x60>
 8005ebc:	68b5      	ldr	r5, [r6, #8]
 8005ebe:	e7df      	b.n	8005e80 <_vfiprintf_r+0x20>
 8005ec0:	4b79      	ldr	r3, [pc, #484]	; (80060a8 <_vfiprintf_r+0x248>)
 8005ec2:	429d      	cmp	r5, r3
 8005ec4:	bf08      	it	eq
 8005ec6:	68f5      	ldreq	r5, [r6, #12]
 8005ec8:	e7da      	b.n	8005e80 <_vfiprintf_r+0x20>
 8005eca:	89ab      	ldrh	r3, [r5, #12]
 8005ecc:	0598      	lsls	r0, r3, #22
 8005ece:	d4ed      	bmi.n	8005eac <_vfiprintf_r+0x4c>
 8005ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ed2:	f7ff fe4c 	bl	8005b6e <__retarget_lock_release_recursive>
 8005ed6:	e7e9      	b.n	8005eac <_vfiprintf_r+0x4c>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9309      	str	r3, [sp, #36]	; 0x24
 8005edc:	2320      	movs	r3, #32
 8005ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee6:	2330      	movs	r3, #48	; 0x30
 8005ee8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060ac <_vfiprintf_r+0x24c>
 8005eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ef0:	f04f 0901 	mov.w	r9, #1
 8005ef4:	4623      	mov	r3, r4
 8005ef6:	469a      	mov	sl, r3
 8005ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005efc:	b10a      	cbz	r2, 8005f02 <_vfiprintf_r+0xa2>
 8005efe:	2a25      	cmp	r2, #37	; 0x25
 8005f00:	d1f9      	bne.n	8005ef6 <_vfiprintf_r+0x96>
 8005f02:	ebba 0b04 	subs.w	fp, sl, r4
 8005f06:	d00b      	beq.n	8005f20 <_vfiprintf_r+0xc0>
 8005f08:	465b      	mov	r3, fp
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7ff ff93 	bl	8005e3a <__sfputs_r>
 8005f14:	3001      	adds	r0, #1
 8005f16:	f000 80aa 	beq.w	800606e <_vfiprintf_r+0x20e>
 8005f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f1c:	445a      	add	r2, fp
 8005f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f20:	f89a 3000 	ldrb.w	r3, [sl]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80a2 	beq.w	800606e <_vfiprintf_r+0x20e>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f34:	f10a 0a01 	add.w	sl, sl, #1
 8005f38:	9304      	str	r3, [sp, #16]
 8005f3a:	9307      	str	r3, [sp, #28]
 8005f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f40:	931a      	str	r3, [sp, #104]	; 0x68
 8005f42:	4654      	mov	r4, sl
 8005f44:	2205      	movs	r2, #5
 8005f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f4a:	4858      	ldr	r0, [pc, #352]	; (80060ac <_vfiprintf_r+0x24c>)
 8005f4c:	f7fa f978 	bl	8000240 <memchr>
 8005f50:	9a04      	ldr	r2, [sp, #16]
 8005f52:	b9d8      	cbnz	r0, 8005f8c <_vfiprintf_r+0x12c>
 8005f54:	06d1      	lsls	r1, r2, #27
 8005f56:	bf44      	itt	mi
 8005f58:	2320      	movmi	r3, #32
 8005f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f5e:	0713      	lsls	r3, r2, #28
 8005f60:	bf44      	itt	mi
 8005f62:	232b      	movmi	r3, #43	; 0x2b
 8005f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f68:	f89a 3000 	ldrb.w	r3, [sl]
 8005f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f6e:	d015      	beq.n	8005f9c <_vfiprintf_r+0x13c>
 8005f70:	9a07      	ldr	r2, [sp, #28]
 8005f72:	4654      	mov	r4, sl
 8005f74:	2000      	movs	r0, #0
 8005f76:	f04f 0c0a 	mov.w	ip, #10
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f80:	3b30      	subs	r3, #48	; 0x30
 8005f82:	2b09      	cmp	r3, #9
 8005f84:	d94e      	bls.n	8006024 <_vfiprintf_r+0x1c4>
 8005f86:	b1b0      	cbz	r0, 8005fb6 <_vfiprintf_r+0x156>
 8005f88:	9207      	str	r2, [sp, #28]
 8005f8a:	e014      	b.n	8005fb6 <_vfiprintf_r+0x156>
 8005f8c:	eba0 0308 	sub.w	r3, r0, r8
 8005f90:	fa09 f303 	lsl.w	r3, r9, r3
 8005f94:	4313      	orrs	r3, r2
 8005f96:	9304      	str	r3, [sp, #16]
 8005f98:	46a2      	mov	sl, r4
 8005f9a:	e7d2      	b.n	8005f42 <_vfiprintf_r+0xe2>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	1d19      	adds	r1, r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	9103      	str	r1, [sp, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bfbb      	ittet	lt
 8005fa8:	425b      	neglt	r3, r3
 8005faa:	f042 0202 	orrlt.w	r2, r2, #2
 8005fae:	9307      	strge	r3, [sp, #28]
 8005fb0:	9307      	strlt	r3, [sp, #28]
 8005fb2:	bfb8      	it	lt
 8005fb4:	9204      	strlt	r2, [sp, #16]
 8005fb6:	7823      	ldrb	r3, [r4, #0]
 8005fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8005fba:	d10c      	bne.n	8005fd6 <_vfiprintf_r+0x176>
 8005fbc:	7863      	ldrb	r3, [r4, #1]
 8005fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc0:	d135      	bne.n	800602e <_vfiprintf_r+0x1ce>
 8005fc2:	9b03      	ldr	r3, [sp, #12]
 8005fc4:	1d1a      	adds	r2, r3, #4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	9203      	str	r2, [sp, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bfb8      	it	lt
 8005fce:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fd2:	3402      	adds	r4, #2
 8005fd4:	9305      	str	r3, [sp, #20]
 8005fd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060bc <_vfiprintf_r+0x25c>
 8005fda:	7821      	ldrb	r1, [r4, #0]
 8005fdc:	2203      	movs	r2, #3
 8005fde:	4650      	mov	r0, sl
 8005fe0:	f7fa f92e 	bl	8000240 <memchr>
 8005fe4:	b140      	cbz	r0, 8005ff8 <_vfiprintf_r+0x198>
 8005fe6:	2340      	movs	r3, #64	; 0x40
 8005fe8:	eba0 000a 	sub.w	r0, r0, sl
 8005fec:	fa03 f000 	lsl.w	r0, r3, r0
 8005ff0:	9b04      	ldr	r3, [sp, #16]
 8005ff2:	4303      	orrs	r3, r0
 8005ff4:	3401      	adds	r4, #1
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffc:	482c      	ldr	r0, [pc, #176]	; (80060b0 <_vfiprintf_r+0x250>)
 8005ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006002:	2206      	movs	r2, #6
 8006004:	f7fa f91c 	bl	8000240 <memchr>
 8006008:	2800      	cmp	r0, #0
 800600a:	d03f      	beq.n	800608c <_vfiprintf_r+0x22c>
 800600c:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <_vfiprintf_r+0x254>)
 800600e:	bb1b      	cbnz	r3, 8006058 <_vfiprintf_r+0x1f8>
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	3307      	adds	r3, #7
 8006014:	f023 0307 	bic.w	r3, r3, #7
 8006018:	3308      	adds	r3, #8
 800601a:	9303      	str	r3, [sp, #12]
 800601c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601e:	443b      	add	r3, r7
 8006020:	9309      	str	r3, [sp, #36]	; 0x24
 8006022:	e767      	b.n	8005ef4 <_vfiprintf_r+0x94>
 8006024:	fb0c 3202 	mla	r2, ip, r2, r3
 8006028:	460c      	mov	r4, r1
 800602a:	2001      	movs	r0, #1
 800602c:	e7a5      	b.n	8005f7a <_vfiprintf_r+0x11a>
 800602e:	2300      	movs	r3, #0
 8006030:	3401      	adds	r4, #1
 8006032:	9305      	str	r3, [sp, #20]
 8006034:	4619      	mov	r1, r3
 8006036:	f04f 0c0a 	mov.w	ip, #10
 800603a:	4620      	mov	r0, r4
 800603c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006040:	3a30      	subs	r2, #48	; 0x30
 8006042:	2a09      	cmp	r2, #9
 8006044:	d903      	bls.n	800604e <_vfiprintf_r+0x1ee>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0c5      	beq.n	8005fd6 <_vfiprintf_r+0x176>
 800604a:	9105      	str	r1, [sp, #20]
 800604c:	e7c3      	b.n	8005fd6 <_vfiprintf_r+0x176>
 800604e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006052:	4604      	mov	r4, r0
 8006054:	2301      	movs	r3, #1
 8006056:	e7f0      	b.n	800603a <_vfiprintf_r+0x1da>
 8006058:	ab03      	add	r3, sp, #12
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	462a      	mov	r2, r5
 800605e:	4b16      	ldr	r3, [pc, #88]	; (80060b8 <_vfiprintf_r+0x258>)
 8006060:	a904      	add	r1, sp, #16
 8006062:	4630      	mov	r0, r6
 8006064:	f3af 8000 	nop.w
 8006068:	4607      	mov	r7, r0
 800606a:	1c78      	adds	r0, r7, #1
 800606c:	d1d6      	bne.n	800601c <_vfiprintf_r+0x1bc>
 800606e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006070:	07d9      	lsls	r1, r3, #31
 8006072:	d405      	bmi.n	8006080 <_vfiprintf_r+0x220>
 8006074:	89ab      	ldrh	r3, [r5, #12]
 8006076:	059a      	lsls	r2, r3, #22
 8006078:	d402      	bmi.n	8006080 <_vfiprintf_r+0x220>
 800607a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800607c:	f7ff fd77 	bl	8005b6e <__retarget_lock_release_recursive>
 8006080:	89ab      	ldrh	r3, [r5, #12]
 8006082:	065b      	lsls	r3, r3, #25
 8006084:	f53f af12 	bmi.w	8005eac <_vfiprintf_r+0x4c>
 8006088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800608a:	e711      	b.n	8005eb0 <_vfiprintf_r+0x50>
 800608c:	ab03      	add	r3, sp, #12
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	462a      	mov	r2, r5
 8006092:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <_vfiprintf_r+0x258>)
 8006094:	a904      	add	r1, sp, #16
 8006096:	4630      	mov	r0, r6
 8006098:	f000 f880 	bl	800619c <_printf_i>
 800609c:	e7e4      	b.n	8006068 <_vfiprintf_r+0x208>
 800609e:	bf00      	nop
 80060a0:	08006df8 	.word	0x08006df8
 80060a4:	08006e18 	.word	0x08006e18
 80060a8:	08006dd8 	.word	0x08006dd8
 80060ac:	08006e38 	.word	0x08006e38
 80060b0:	08006e42 	.word	0x08006e42
 80060b4:	00000000 	.word	0x00000000
 80060b8:	08005e3b 	.word	0x08005e3b
 80060bc:	08006e3e 	.word	0x08006e3e

080060c0 <_printf_common>:
 80060c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	4616      	mov	r6, r2
 80060c6:	4699      	mov	r9, r3
 80060c8:	688a      	ldr	r2, [r1, #8]
 80060ca:	690b      	ldr	r3, [r1, #16]
 80060cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060d0:	4293      	cmp	r3, r2
 80060d2:	bfb8      	it	lt
 80060d4:	4613      	movlt	r3, r2
 80060d6:	6033      	str	r3, [r6, #0]
 80060d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060dc:	4607      	mov	r7, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	b10a      	cbz	r2, 80060e6 <_printf_common+0x26>
 80060e2:	3301      	adds	r3, #1
 80060e4:	6033      	str	r3, [r6, #0]
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	0699      	lsls	r1, r3, #26
 80060ea:	bf42      	ittt	mi
 80060ec:	6833      	ldrmi	r3, [r6, #0]
 80060ee:	3302      	addmi	r3, #2
 80060f0:	6033      	strmi	r3, [r6, #0]
 80060f2:	6825      	ldr	r5, [r4, #0]
 80060f4:	f015 0506 	ands.w	r5, r5, #6
 80060f8:	d106      	bne.n	8006108 <_printf_common+0x48>
 80060fa:	f104 0a19 	add.w	sl, r4, #25
 80060fe:	68e3      	ldr	r3, [r4, #12]
 8006100:	6832      	ldr	r2, [r6, #0]
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	42ab      	cmp	r3, r5
 8006106:	dc26      	bgt.n	8006156 <_printf_common+0x96>
 8006108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800610c:	1e13      	subs	r3, r2, #0
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	bf18      	it	ne
 8006112:	2301      	movne	r3, #1
 8006114:	0692      	lsls	r2, r2, #26
 8006116:	d42b      	bmi.n	8006170 <_printf_common+0xb0>
 8006118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800611c:	4649      	mov	r1, r9
 800611e:	4638      	mov	r0, r7
 8006120:	47c0      	blx	r8
 8006122:	3001      	adds	r0, #1
 8006124:	d01e      	beq.n	8006164 <_printf_common+0xa4>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	68e5      	ldr	r5, [r4, #12]
 800612a:	6832      	ldr	r2, [r6, #0]
 800612c:	f003 0306 	and.w	r3, r3, #6
 8006130:	2b04      	cmp	r3, #4
 8006132:	bf08      	it	eq
 8006134:	1aad      	subeq	r5, r5, r2
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	6922      	ldr	r2, [r4, #16]
 800613a:	bf0c      	ite	eq
 800613c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006140:	2500      	movne	r5, #0
 8006142:	4293      	cmp	r3, r2
 8006144:	bfc4      	itt	gt
 8006146:	1a9b      	subgt	r3, r3, r2
 8006148:	18ed      	addgt	r5, r5, r3
 800614a:	2600      	movs	r6, #0
 800614c:	341a      	adds	r4, #26
 800614e:	42b5      	cmp	r5, r6
 8006150:	d11a      	bne.n	8006188 <_printf_common+0xc8>
 8006152:	2000      	movs	r0, #0
 8006154:	e008      	b.n	8006168 <_printf_common+0xa8>
 8006156:	2301      	movs	r3, #1
 8006158:	4652      	mov	r2, sl
 800615a:	4649      	mov	r1, r9
 800615c:	4638      	mov	r0, r7
 800615e:	47c0      	blx	r8
 8006160:	3001      	adds	r0, #1
 8006162:	d103      	bne.n	800616c <_printf_common+0xac>
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616c:	3501      	adds	r5, #1
 800616e:	e7c6      	b.n	80060fe <_printf_common+0x3e>
 8006170:	18e1      	adds	r1, r4, r3
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	2030      	movs	r0, #48	; 0x30
 8006176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800617a:	4422      	add	r2, r4
 800617c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006184:	3302      	adds	r3, #2
 8006186:	e7c7      	b.n	8006118 <_printf_common+0x58>
 8006188:	2301      	movs	r3, #1
 800618a:	4622      	mov	r2, r4
 800618c:	4649      	mov	r1, r9
 800618e:	4638      	mov	r0, r7
 8006190:	47c0      	blx	r8
 8006192:	3001      	adds	r0, #1
 8006194:	d0e6      	beq.n	8006164 <_printf_common+0xa4>
 8006196:	3601      	adds	r6, #1
 8006198:	e7d9      	b.n	800614e <_printf_common+0x8e>
	...

0800619c <_printf_i>:
 800619c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	7e0f      	ldrb	r7, [r1, #24]
 80061a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061a4:	2f78      	cmp	r7, #120	; 0x78
 80061a6:	4691      	mov	r9, r2
 80061a8:	4680      	mov	r8, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	469a      	mov	sl, r3
 80061ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061b2:	d807      	bhi.n	80061c4 <_printf_i+0x28>
 80061b4:	2f62      	cmp	r7, #98	; 0x62
 80061b6:	d80a      	bhi.n	80061ce <_printf_i+0x32>
 80061b8:	2f00      	cmp	r7, #0
 80061ba:	f000 80d8 	beq.w	800636e <_printf_i+0x1d2>
 80061be:	2f58      	cmp	r7, #88	; 0x58
 80061c0:	f000 80a3 	beq.w	800630a <_printf_i+0x16e>
 80061c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061cc:	e03a      	b.n	8006244 <_printf_i+0xa8>
 80061ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061d2:	2b15      	cmp	r3, #21
 80061d4:	d8f6      	bhi.n	80061c4 <_printf_i+0x28>
 80061d6:	a101      	add	r1, pc, #4	; (adr r1, 80061dc <_printf_i+0x40>)
 80061d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061dc:	08006235 	.word	0x08006235
 80061e0:	08006249 	.word	0x08006249
 80061e4:	080061c5 	.word	0x080061c5
 80061e8:	080061c5 	.word	0x080061c5
 80061ec:	080061c5 	.word	0x080061c5
 80061f0:	080061c5 	.word	0x080061c5
 80061f4:	08006249 	.word	0x08006249
 80061f8:	080061c5 	.word	0x080061c5
 80061fc:	080061c5 	.word	0x080061c5
 8006200:	080061c5 	.word	0x080061c5
 8006204:	080061c5 	.word	0x080061c5
 8006208:	08006355 	.word	0x08006355
 800620c:	08006279 	.word	0x08006279
 8006210:	08006337 	.word	0x08006337
 8006214:	080061c5 	.word	0x080061c5
 8006218:	080061c5 	.word	0x080061c5
 800621c:	08006377 	.word	0x08006377
 8006220:	080061c5 	.word	0x080061c5
 8006224:	08006279 	.word	0x08006279
 8006228:	080061c5 	.word	0x080061c5
 800622c:	080061c5 	.word	0x080061c5
 8006230:	0800633f 	.word	0x0800633f
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	1d1a      	adds	r2, r3, #4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	602a      	str	r2, [r5, #0]
 800623c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006244:	2301      	movs	r3, #1
 8006246:	e0a3      	b.n	8006390 <_printf_i+0x1f4>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	6829      	ldr	r1, [r5, #0]
 800624c:	0606      	lsls	r6, r0, #24
 800624e:	f101 0304 	add.w	r3, r1, #4
 8006252:	d50a      	bpl.n	800626a <_printf_i+0xce>
 8006254:	680e      	ldr	r6, [r1, #0]
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	2e00      	cmp	r6, #0
 800625a:	da03      	bge.n	8006264 <_printf_i+0xc8>
 800625c:	232d      	movs	r3, #45	; 0x2d
 800625e:	4276      	negs	r6, r6
 8006260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006264:	485e      	ldr	r0, [pc, #376]	; (80063e0 <_printf_i+0x244>)
 8006266:	230a      	movs	r3, #10
 8006268:	e019      	b.n	800629e <_printf_i+0x102>
 800626a:	680e      	ldr	r6, [r1, #0]
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006272:	bf18      	it	ne
 8006274:	b236      	sxthne	r6, r6
 8006276:	e7ef      	b.n	8006258 <_printf_i+0xbc>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	1d19      	adds	r1, r3, #4
 800627e:	6029      	str	r1, [r5, #0]
 8006280:	0601      	lsls	r1, r0, #24
 8006282:	d501      	bpl.n	8006288 <_printf_i+0xec>
 8006284:	681e      	ldr	r6, [r3, #0]
 8006286:	e002      	b.n	800628e <_printf_i+0xf2>
 8006288:	0646      	lsls	r6, r0, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0xe8>
 800628c:	881e      	ldrh	r6, [r3, #0]
 800628e:	4854      	ldr	r0, [pc, #336]	; (80063e0 <_printf_i+0x244>)
 8006290:	2f6f      	cmp	r7, #111	; 0x6f
 8006292:	bf0c      	ite	eq
 8006294:	2308      	moveq	r3, #8
 8006296:	230a      	movne	r3, #10
 8006298:	2100      	movs	r1, #0
 800629a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800629e:	6865      	ldr	r5, [r4, #4]
 80062a0:	60a5      	str	r5, [r4, #8]
 80062a2:	2d00      	cmp	r5, #0
 80062a4:	bfa2      	ittt	ge
 80062a6:	6821      	ldrge	r1, [r4, #0]
 80062a8:	f021 0104 	bicge.w	r1, r1, #4
 80062ac:	6021      	strge	r1, [r4, #0]
 80062ae:	b90e      	cbnz	r6, 80062b4 <_printf_i+0x118>
 80062b0:	2d00      	cmp	r5, #0
 80062b2:	d04d      	beq.n	8006350 <_printf_i+0x1b4>
 80062b4:	4615      	mov	r5, r2
 80062b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80062ba:	fb03 6711 	mls	r7, r3, r1, r6
 80062be:	5dc7      	ldrb	r7, [r0, r7]
 80062c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062c4:	4637      	mov	r7, r6
 80062c6:	42bb      	cmp	r3, r7
 80062c8:	460e      	mov	r6, r1
 80062ca:	d9f4      	bls.n	80062b6 <_printf_i+0x11a>
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d10b      	bne.n	80062e8 <_printf_i+0x14c>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	07de      	lsls	r6, r3, #31
 80062d4:	d508      	bpl.n	80062e8 <_printf_i+0x14c>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	6861      	ldr	r1, [r4, #4]
 80062da:	4299      	cmp	r1, r3
 80062dc:	bfde      	ittt	le
 80062de:	2330      	movle	r3, #48	; 0x30
 80062e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062e8:	1b52      	subs	r2, r2, r5
 80062ea:	6122      	str	r2, [r4, #16]
 80062ec:	f8cd a000 	str.w	sl, [sp]
 80062f0:	464b      	mov	r3, r9
 80062f2:	aa03      	add	r2, sp, #12
 80062f4:	4621      	mov	r1, r4
 80062f6:	4640      	mov	r0, r8
 80062f8:	f7ff fee2 	bl	80060c0 <_printf_common>
 80062fc:	3001      	adds	r0, #1
 80062fe:	d14c      	bne.n	800639a <_printf_i+0x1fe>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	b004      	add	sp, #16
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	4835      	ldr	r0, [pc, #212]	; (80063e0 <_printf_i+0x244>)
 800630c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006310:	6829      	ldr	r1, [r5, #0]
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f851 6b04 	ldr.w	r6, [r1], #4
 8006318:	6029      	str	r1, [r5, #0]
 800631a:	061d      	lsls	r5, r3, #24
 800631c:	d514      	bpl.n	8006348 <_printf_i+0x1ac>
 800631e:	07df      	lsls	r7, r3, #31
 8006320:	bf44      	itt	mi
 8006322:	f043 0320 	orrmi.w	r3, r3, #32
 8006326:	6023      	strmi	r3, [r4, #0]
 8006328:	b91e      	cbnz	r6, 8006332 <_printf_i+0x196>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	f023 0320 	bic.w	r3, r3, #32
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	2310      	movs	r3, #16
 8006334:	e7b0      	b.n	8006298 <_printf_i+0xfc>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	f043 0320 	orr.w	r3, r3, #32
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	2378      	movs	r3, #120	; 0x78
 8006340:	4828      	ldr	r0, [pc, #160]	; (80063e4 <_printf_i+0x248>)
 8006342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006346:	e7e3      	b.n	8006310 <_printf_i+0x174>
 8006348:	0659      	lsls	r1, r3, #25
 800634a:	bf48      	it	mi
 800634c:	b2b6      	uxthmi	r6, r6
 800634e:	e7e6      	b.n	800631e <_printf_i+0x182>
 8006350:	4615      	mov	r5, r2
 8006352:	e7bb      	b.n	80062cc <_printf_i+0x130>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	6826      	ldr	r6, [r4, #0]
 8006358:	6961      	ldr	r1, [r4, #20]
 800635a:	1d18      	adds	r0, r3, #4
 800635c:	6028      	str	r0, [r5, #0]
 800635e:	0635      	lsls	r5, r6, #24
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	d501      	bpl.n	8006368 <_printf_i+0x1cc>
 8006364:	6019      	str	r1, [r3, #0]
 8006366:	e002      	b.n	800636e <_printf_i+0x1d2>
 8006368:	0670      	lsls	r0, r6, #25
 800636a:	d5fb      	bpl.n	8006364 <_printf_i+0x1c8>
 800636c:	8019      	strh	r1, [r3, #0]
 800636e:	2300      	movs	r3, #0
 8006370:	6123      	str	r3, [r4, #16]
 8006372:	4615      	mov	r5, r2
 8006374:	e7ba      	b.n	80062ec <_printf_i+0x150>
 8006376:	682b      	ldr	r3, [r5, #0]
 8006378:	1d1a      	adds	r2, r3, #4
 800637a:	602a      	str	r2, [r5, #0]
 800637c:	681d      	ldr	r5, [r3, #0]
 800637e:	6862      	ldr	r2, [r4, #4]
 8006380:	2100      	movs	r1, #0
 8006382:	4628      	mov	r0, r5
 8006384:	f7f9 ff5c 	bl	8000240 <memchr>
 8006388:	b108      	cbz	r0, 800638e <_printf_i+0x1f2>
 800638a:	1b40      	subs	r0, r0, r5
 800638c:	6060      	str	r0, [r4, #4]
 800638e:	6863      	ldr	r3, [r4, #4]
 8006390:	6123      	str	r3, [r4, #16]
 8006392:	2300      	movs	r3, #0
 8006394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006398:	e7a8      	b.n	80062ec <_printf_i+0x150>
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	462a      	mov	r2, r5
 800639e:	4649      	mov	r1, r9
 80063a0:	4640      	mov	r0, r8
 80063a2:	47d0      	blx	sl
 80063a4:	3001      	adds	r0, #1
 80063a6:	d0ab      	beq.n	8006300 <_printf_i+0x164>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	079b      	lsls	r3, r3, #30
 80063ac:	d413      	bmi.n	80063d6 <_printf_i+0x23a>
 80063ae:	68e0      	ldr	r0, [r4, #12]
 80063b0:	9b03      	ldr	r3, [sp, #12]
 80063b2:	4298      	cmp	r0, r3
 80063b4:	bfb8      	it	lt
 80063b6:	4618      	movlt	r0, r3
 80063b8:	e7a4      	b.n	8006304 <_printf_i+0x168>
 80063ba:	2301      	movs	r3, #1
 80063bc:	4632      	mov	r2, r6
 80063be:	4649      	mov	r1, r9
 80063c0:	4640      	mov	r0, r8
 80063c2:	47d0      	blx	sl
 80063c4:	3001      	adds	r0, #1
 80063c6:	d09b      	beq.n	8006300 <_printf_i+0x164>
 80063c8:	3501      	adds	r5, #1
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	9903      	ldr	r1, [sp, #12]
 80063ce:	1a5b      	subs	r3, r3, r1
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dcf2      	bgt.n	80063ba <_printf_i+0x21e>
 80063d4:	e7eb      	b.n	80063ae <_printf_i+0x212>
 80063d6:	2500      	movs	r5, #0
 80063d8:	f104 0619 	add.w	r6, r4, #25
 80063dc:	e7f5      	b.n	80063ca <_printf_i+0x22e>
 80063de:	bf00      	nop
 80063e0:	08006e49 	.word	0x08006e49
 80063e4:	08006e5a 	.word	0x08006e5a

080063e8 <_sbrk_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d06      	ldr	r5, [pc, #24]	; (8006404 <_sbrk_r+0x1c>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	f7fc fa44 	bl	8002880 <_sbrk>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_sbrk_r+0x1a>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_sbrk_r+0x1a>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	200065d8 	.word	0x200065d8

08006408 <__sread>:
 8006408:	b510      	push	{r4, lr}
 800640a:	460c      	mov	r4, r1
 800640c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006410:	f000 f8a8 	bl	8006564 <_read_r>
 8006414:	2800      	cmp	r0, #0
 8006416:	bfab      	itete	ge
 8006418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800641a:	89a3      	ldrhlt	r3, [r4, #12]
 800641c:	181b      	addge	r3, r3, r0
 800641e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006422:	bfac      	ite	ge
 8006424:	6563      	strge	r3, [r4, #84]	; 0x54
 8006426:	81a3      	strhlt	r3, [r4, #12]
 8006428:	bd10      	pop	{r4, pc}

0800642a <__swrite>:
 800642a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800642e:	461f      	mov	r7, r3
 8006430:	898b      	ldrh	r3, [r1, #12]
 8006432:	05db      	lsls	r3, r3, #23
 8006434:	4605      	mov	r5, r0
 8006436:	460c      	mov	r4, r1
 8006438:	4616      	mov	r6, r2
 800643a:	d505      	bpl.n	8006448 <__swrite+0x1e>
 800643c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006440:	2302      	movs	r3, #2
 8006442:	2200      	movs	r2, #0
 8006444:	f000 f870 	bl	8006528 <_lseek_r>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800644e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	4632      	mov	r2, r6
 8006456:	463b      	mov	r3, r7
 8006458:	4628      	mov	r0, r5
 800645a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800645e:	f000 b817 	b.w	8006490 <_write_r>

08006462 <__sseek>:
 8006462:	b510      	push	{r4, lr}
 8006464:	460c      	mov	r4, r1
 8006466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646a:	f000 f85d 	bl	8006528 <_lseek_r>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	bf15      	itete	ne
 8006474:	6560      	strne	r0, [r4, #84]	; 0x54
 8006476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800647a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800647e:	81a3      	strheq	r3, [r4, #12]
 8006480:	bf18      	it	ne
 8006482:	81a3      	strhne	r3, [r4, #12]
 8006484:	bd10      	pop	{r4, pc}

08006486 <__sclose>:
 8006486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648a:	f000 b81b 	b.w	80064c4 <_close_r>
	...

08006490 <_write_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d07      	ldr	r5, [pc, #28]	; (80064b0 <_write_r+0x20>)
 8006494:	4604      	mov	r4, r0
 8006496:	4608      	mov	r0, r1
 8006498:	4611      	mov	r1, r2
 800649a:	2200      	movs	r2, #0
 800649c:	602a      	str	r2, [r5, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	f7fc f99d 	bl	80027de <_write>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_write_r+0x1e>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_write_r+0x1e>
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	200065d8 	.word	0x200065d8

080064b4 <abort>:
 80064b4:	b508      	push	{r3, lr}
 80064b6:	2006      	movs	r0, #6
 80064b8:	f000 f88e 	bl	80065d8 <raise>
 80064bc:	2001      	movs	r0, #1
 80064be:	f7fc f967 	bl	8002790 <_exit>
	...

080064c4 <_close_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4d06      	ldr	r5, [pc, #24]	; (80064e0 <_close_r+0x1c>)
 80064c8:	2300      	movs	r3, #0
 80064ca:	4604      	mov	r4, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	602b      	str	r3, [r5, #0]
 80064d0:	f7fc f9a1 	bl	8002816 <_close>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d102      	bne.n	80064de <_close_r+0x1a>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	b103      	cbz	r3, 80064de <_close_r+0x1a>
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	bd38      	pop	{r3, r4, r5, pc}
 80064e0:	200065d8 	.word	0x200065d8

080064e4 <_fstat_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4d07      	ldr	r5, [pc, #28]	; (8006504 <_fstat_r+0x20>)
 80064e8:	2300      	movs	r3, #0
 80064ea:	4604      	mov	r4, r0
 80064ec:	4608      	mov	r0, r1
 80064ee:	4611      	mov	r1, r2
 80064f0:	602b      	str	r3, [r5, #0]
 80064f2:	f7fc f99c 	bl	800282e <_fstat>
 80064f6:	1c43      	adds	r3, r0, #1
 80064f8:	d102      	bne.n	8006500 <_fstat_r+0x1c>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	b103      	cbz	r3, 8006500 <_fstat_r+0x1c>
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	bd38      	pop	{r3, r4, r5, pc}
 8006502:	bf00      	nop
 8006504:	200065d8 	.word	0x200065d8

08006508 <_isatty_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d06      	ldr	r5, [pc, #24]	; (8006524 <_isatty_r+0x1c>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	f7fc f99b 	bl	800284e <_isatty>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_isatty_r+0x1a>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_isatty_r+0x1a>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	200065d8 	.word	0x200065d8

08006528 <_lseek_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d07      	ldr	r5, [pc, #28]	; (8006548 <_lseek_r+0x20>)
 800652c:	4604      	mov	r4, r0
 800652e:	4608      	mov	r0, r1
 8006530:	4611      	mov	r1, r2
 8006532:	2200      	movs	r2, #0
 8006534:	602a      	str	r2, [r5, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f7fc f994 	bl	8002864 <_lseek>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_lseek_r+0x1e>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_lseek_r+0x1e>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	200065d8 	.word	0x200065d8

0800654c <__malloc_lock>:
 800654c:	4801      	ldr	r0, [pc, #4]	; (8006554 <__malloc_lock+0x8>)
 800654e:	f7ff bb0d 	b.w	8005b6c <__retarget_lock_acquire_recursive>
 8006552:	bf00      	nop
 8006554:	200065cc 	.word	0x200065cc

08006558 <__malloc_unlock>:
 8006558:	4801      	ldr	r0, [pc, #4]	; (8006560 <__malloc_unlock+0x8>)
 800655a:	f7ff bb08 	b.w	8005b6e <__retarget_lock_release_recursive>
 800655e:	bf00      	nop
 8006560:	200065cc 	.word	0x200065cc

08006564 <_read_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	; (8006584 <_read_r+0x20>)
 8006568:	4604      	mov	r4, r0
 800656a:	4608      	mov	r0, r1
 800656c:	4611      	mov	r1, r2
 800656e:	2200      	movs	r2, #0
 8006570:	602a      	str	r2, [r5, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f7fc f916 	bl	80027a4 <_read>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_read_r+0x1e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_read_r+0x1e>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	200065d8 	.word	0x200065d8

08006588 <_raise_r>:
 8006588:	291f      	cmp	r1, #31
 800658a:	b538      	push	{r3, r4, r5, lr}
 800658c:	4604      	mov	r4, r0
 800658e:	460d      	mov	r5, r1
 8006590:	d904      	bls.n	800659c <_raise_r+0x14>
 8006592:	2316      	movs	r3, #22
 8006594:	6003      	str	r3, [r0, #0]
 8006596:	f04f 30ff 	mov.w	r0, #4294967295
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800659e:	b112      	cbz	r2, 80065a6 <_raise_r+0x1e>
 80065a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065a4:	b94b      	cbnz	r3, 80065ba <_raise_r+0x32>
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 f830 	bl	800660c <_getpid_r>
 80065ac:	462a      	mov	r2, r5
 80065ae:	4601      	mov	r1, r0
 80065b0:	4620      	mov	r0, r4
 80065b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b6:	f000 b817 	b.w	80065e8 <_kill_r>
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d00a      	beq.n	80065d4 <_raise_r+0x4c>
 80065be:	1c59      	adds	r1, r3, #1
 80065c0:	d103      	bne.n	80065ca <_raise_r+0x42>
 80065c2:	2316      	movs	r3, #22
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	2001      	movs	r0, #1
 80065c8:	e7e7      	b.n	800659a <_raise_r+0x12>
 80065ca:	2400      	movs	r4, #0
 80065cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065d0:	4628      	mov	r0, r5
 80065d2:	4798      	blx	r3
 80065d4:	2000      	movs	r0, #0
 80065d6:	e7e0      	b.n	800659a <_raise_r+0x12>

080065d8 <raise>:
 80065d8:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <raise+0xc>)
 80065da:	4601      	mov	r1, r0
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f7ff bfd3 	b.w	8006588 <_raise_r>
 80065e2:	bf00      	nop
 80065e4:	200000a0 	.word	0x200000a0

080065e8 <_kill_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	; (8006608 <_kill_r+0x20>)
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	f7fc f8bb 	bl	8002770 <_kill>
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	d102      	bne.n	8006604 <_kill_r+0x1c>
 80065fe:	682b      	ldr	r3, [r5, #0]
 8006600:	b103      	cbz	r3, 8006604 <_kill_r+0x1c>
 8006602:	6023      	str	r3, [r4, #0]
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	bf00      	nop
 8006608:	200065d8 	.word	0x200065d8

0800660c <_getpid_r>:
 800660c:	f7fc b8a8 	b.w	8002760 <_getpid>

08006610 <_init>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	bf00      	nop
 8006614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006616:	bc08      	pop	{r3}
 8006618:	469e      	mov	lr, r3
 800661a:	4770      	bx	lr

0800661c <_fini>:
 800661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661e:	bf00      	nop
 8006620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006622:	bc08      	pop	{r3}
 8006624:	469e      	mov	lr, r3
 8006626:	4770      	bx	lr
